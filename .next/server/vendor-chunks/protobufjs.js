"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/protobufjs";
exports.ids = ["vendor-chunks/protobufjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/protobufjs/ext/descriptor/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/protobufjs/ext/descriptor/index.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nvar $protobuf = __webpack_require__(/*! ../.. */ \"(ssr)/./node_modules/protobufjs/index.js\");\nmodule.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(__webpack_require__(/*! ../../google/protobuf/descriptor.json */ \"(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json\")).lookup(\".google.protobuf\");\nvar Namespace = $protobuf.Namespace,\n  Root = $protobuf.Root,\n  Enum = $protobuf.Enum,\n  Type = $protobuf.Type,\n  Field = $protobuf.Field,\n  MapField = $protobuf.MapField,\n  OneOf = $protobuf.OneOf,\n  Service = $protobuf.Service,\n  Method = $protobuf.Method;\n\n// --- Root ---\n\n/**\r\n * Properties of a FileDescriptorSet message.\r\n * @interface IFileDescriptorSet\r\n * @property {IFileDescriptorProto[]} file Files\r\n */\n\n/**\r\n * Properties of a FileDescriptorProto message.\r\n * @interface IFileDescriptorProto\r\n * @property {string} [name] File name\r\n * @property {string} [package] Package\r\n * @property {*} [dependency] Not supported\r\n * @property {*} [publicDependency] Not supported\r\n * @property {*} [weakDependency] Not supported\r\n * @property {IDescriptorProto[]} [messageType] Nested message types\r\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\r\n * @property {IServiceDescriptorProto[]} [service] Nested services\r\n * @property {IFieldDescriptorProto[]} [extension] Nested extension fields\r\n * @property {IFileOptions} [options] Options\r\n * @property {*} [sourceCodeInfo] Not supported\r\n * @property {string} [syntax=\"proto2\"] Syntax\r\n */\n\n/**\r\n * Properties of a FileOptions message.\r\n * @interface IFileOptions\r\n * @property {string} [javaPackage]\r\n * @property {string} [javaOuterClassname]\r\n * @property {boolean} [javaMultipleFiles]\r\n * @property {boolean} [javaGenerateEqualsAndHash]\r\n * @property {boolean} [javaStringCheckUtf8]\r\n * @property {IFileOptionsOptimizeMode} [optimizeFor=1]\r\n * @property {string} [goPackage]\r\n * @property {boolean} [ccGenericServices]\r\n * @property {boolean} [javaGenericServices]\r\n * @property {boolean} [pyGenericServices]\r\n * @property {boolean} [deprecated]\r\n * @property {boolean} [ccEnableArenas]\r\n * @property {string} [objcClassPrefix]\r\n * @property {string} [csharpNamespace]\r\n */\n\n/**\r\n * Values of he FileOptions.OptimizeMode enum.\r\n * @typedef IFileOptionsOptimizeMode\r\n * @type {number}\r\n * @property {number} SPEED=1\r\n * @property {number} CODE_SIZE=2\r\n * @property {number} LITE_RUNTIME=3\r\n */\n\n/**\r\n * Creates a root from a descriptor set.\r\n * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor\r\n * @returns {Root} Root instance\r\n */\nRoot.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.FileDescriptorSet.decode(descriptor);\n  var root = new Root();\n  if (descriptor.file) {\n    var fileDescriptor, filePackage;\n    for (var j = 0, i; j < descriptor.file.length; ++j) {\n      filePackage = root;\n      if ((fileDescriptor = descriptor.file[j])[\"package\"] && fileDescriptor[\"package\"].length) filePackage = root.define(fileDescriptor[\"package\"]);\n      if (fileDescriptor.name && fileDescriptor.name.length) root.files.push(filePackage.filename = fileDescriptor.name);\n      if (fileDescriptor.messageType) for (i = 0; i < fileDescriptor.messageType.length; ++i) filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));\n      if (fileDescriptor.enumType) for (i = 0; i < fileDescriptor.enumType.length; ++i) filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));\n      if (fileDescriptor.extension) for (i = 0; i < fileDescriptor.extension.length; ++i) filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));\n      if (fileDescriptor.service) for (i = 0; i < fileDescriptor.service.length; ++i) filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));\n      var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);\n      if (opts) {\n        var ks = Object.keys(opts);\n        for (i = 0; i < ks.length; ++i) filePackage.setOption(ks[i], opts[ks[i]]);\n      }\n    }\n  }\n  return root;\n};\n\n/**\r\n * Converts a root to a descriptor set.\r\n * @returns {Message<IFileDescriptorSet>} Descriptor\r\n * @param {string} [syntax=\"proto2\"] Syntax\r\n */\nRoot.prototype.toDescriptor = function toDescriptor(syntax) {\n  var set = exports.FileDescriptorSet.create();\n  Root_toDescriptorRecursive(this, set.file, syntax);\n  return set;\n};\n\n// Traverses a namespace and assembles the descriptor set\nfunction Root_toDescriptorRecursive(ns, files, syntax) {\n  // Create a new file\n  var file = exports.FileDescriptorProto.create({\n    name: ns.filename || (ns.fullName.substring(1).replace(/\\./g, \"_\") || \"root\") + \".proto\"\n  });\n  if (syntax) file.syntax = syntax;\n  if (!(ns instanceof Root)) file[\"package\"] = ns.fullName.substring(1);\n\n  // Add nested types\n  for (var i = 0, nested; i < ns.nestedArray.length; ++i) if ((nested = ns._nestedArray[i]) instanceof Type) file.messageType.push(nested.toDescriptor(syntax));else if (nested instanceof Enum) file.enumType.push(nested.toDescriptor());else if (nested instanceof Field) file.extension.push(nested.toDescriptor(syntax));else if (nested instanceof Service) file.service.push(nested.toDescriptor());else if (nested instanceof /* plain */Namespace) Root_toDescriptorRecursive(nested, files, syntax); // requires new file\n\n  // Keep package-level options\n  file.options = toDescriptorOptions(ns.options, exports.FileOptions);\n\n  // And keep the file only if there is at least one nested object\n  if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length) files.push(file);\n}\n\n// --- Type ---\n\n/**\r\n * Properties of a DescriptorProto message.\r\n * @interface IDescriptorProto\r\n * @property {string} [name] Message type name\r\n * @property {IFieldDescriptorProto[]} [field] Fields\r\n * @property {IFieldDescriptorProto[]} [extension] Extension fields\r\n * @property {IDescriptorProto[]} [nestedType] Nested message types\r\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\r\n * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges\r\n * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs\r\n * @property {IMessageOptions} [options] Not supported\r\n * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges\r\n * @property {string[]} [reservedName] Reserved names\r\n */\n\n/**\r\n * Properties of a MessageOptions message.\r\n * @interface IMessageOptions\r\n * @property {boolean} [mapEntry=false] Whether this message is a map entry\r\n */\n\n/**\r\n * Properties of an ExtensionRange message.\r\n * @interface IDescriptorProtoExtensionRange\r\n * @property {number} [start] Start field id\r\n * @property {number} [end] End field id\r\n */\n\n/**\r\n * Properties of a ReservedRange message.\r\n * @interface IDescriptorProtoReservedRange\r\n * @property {number} [start] Start field id\r\n * @property {number} [end] End field id\r\n */\n\nvar unnamedMessageIndex = 0;\n\n/**\r\n * Creates a type from a descriptor.\r\n * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @param {string} [syntax=\"proto2\"] Syntax\r\n * @returns {Type} Type instance\r\n */\nType.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n\n  // Create the message type\n  var type = new Type(descriptor.name.length ? descriptor.name : \"Type\" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)),\n    i;\n\n  /* Oneofs */\n  if (descriptor.oneofDecl) for (i = 0; i < descriptor.oneofDecl.length; ++i) type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));\n  /* Fields */\n  if (descriptor.field) for (i = 0; i < descriptor.field.length; ++i) {\n    var field = Field.fromDescriptor(descriptor.field[i], syntax);\n    type.add(field);\n    if (descriptor.field[i].hasOwnProperty(\"oneofIndex\"))\n      // eslint-disable-line no-prototype-builtins\n      type.oneofsArray[descriptor.field[i].oneofIndex].add(field);\n  }\n  /* Extension fields */\n  if (descriptor.extension) for (i = 0; i < descriptor.extension.length; ++i) type.add(Field.fromDescriptor(descriptor.extension[i], syntax));\n  /* Nested types */\n  if (descriptor.nestedType) for (i = 0; i < descriptor.nestedType.length; ++i) {\n    type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));\n    if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry) type.setOption(\"map_entry\", true);\n  }\n  /* Nested enums */\n  if (descriptor.enumType) for (i = 0; i < descriptor.enumType.length; ++i) type.add(Enum.fromDescriptor(descriptor.enumType[i]));\n  /* Extension ranges */\n  if (descriptor.extensionRange && descriptor.extensionRange.length) {\n    type.extensions = [];\n    for (i = 0; i < descriptor.extensionRange.length; ++i) type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);\n  }\n  /* Reserved... */\n  if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {\n    type.reserved = [];\n    /* Ranges */\n    if (descriptor.reservedRange) for (i = 0; i < descriptor.reservedRange.length; ++i) type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);\n    /* Names */\n    if (descriptor.reservedName) for (i = 0; i < descriptor.reservedName.length; ++i) type.reserved.push(descriptor.reservedName[i]);\n  }\n  return type;\n};\n\n/**\r\n * Converts a type to a descriptor.\r\n * @returns {Message<IDescriptorProto>} Descriptor\r\n * @param {string} [syntax=\"proto2\"] Syntax\r\n */\nType.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.DescriptorProto.create({\n      name: this.name\n    }),\n    i;\n\n  /* Fields */\n  for (i = 0; i < this.fieldsArray.length; ++i) {\n    var fieldDescriptor;\n    descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));\n    if (this._fieldsArray[i] instanceof MapField) {\n      // map fields are repeated FieldNameEntry\n      var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType),\n        valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType),\n        valueTypeName = valueType === /* type */11 || valueType === /* enum */14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : undefined;\n      descriptor.nestedType.push(exports.DescriptorProto.create({\n        name: fieldDescriptor.typeName,\n        field: [exports.FieldDescriptorProto.create({\n          name: \"key\",\n          number: 1,\n          label: 1,\n          type: keyType\n        }),\n        // can't reference a type or enum\n        exports.FieldDescriptorProto.create({\n          name: \"value\",\n          number: 2,\n          label: 1,\n          type: valueType,\n          typeName: valueTypeName\n        })],\n        options: exports.MessageOptions.create({\n          mapEntry: true\n        })\n      }));\n    }\n  }\n  /* Oneofs */\n  for (i = 0; i < this.oneofsArray.length; ++i) descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());\n  /* Nested... */\n  for (i = 0; i < this.nestedArray.length; ++i) {\n    /* Extension fields */if (this._nestedArray[i] instanceof Field) descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Types */else if (this._nestedArray[i] instanceof Type) descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Enums */else if (this._nestedArray[i] instanceof Enum) descriptor.enumType.push(this._nestedArray[i].toDescriptor());\n    // plain nested namespaces become packages instead in Root#toDescriptor\n  }\n  /* Extension ranges */\n  if (this.extensions) for (i = 0; i < this.extensions.length; ++i) descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({\n    start: this.extensions[i][0],\n    end: this.extensions[i][1]\n  }));\n  /* Reserved... */\n  if (this.reserved) for (i = 0; i < this.reserved.length; ++i) /* Names */if (typeof this.reserved[i] === \"string\") descriptor.reservedName.push(this.reserved[i]);\n  /* Ranges */else descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({\n    start: this.reserved[i][0],\n    end: this.reserved[i][1]\n  }));\n  descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);\n  return descriptor;\n};\n\n// --- Field ---\n\n/**\r\n * Properties of a FieldDescriptorProto message.\r\n * @interface IFieldDescriptorProto\r\n * @property {string} [name] Field name\r\n * @property {number} [number] Field id\r\n * @property {IFieldDescriptorProtoLabel} [label] Field rule\r\n * @property {IFieldDescriptorProtoType} [type] Field basic type\r\n * @property {string} [typeName] Field type name\r\n * @property {string} [extendee] Extended type name\r\n * @property {string} [defaultValue] Literal default value\r\n * @property {number} [oneofIndex] Oneof index if part of a oneof\r\n * @property {*} [jsonName] Not supported\r\n * @property {IFieldOptions} [options] Field options\r\n */\n\n/**\r\n * Values of the FieldDescriptorProto.Label enum.\r\n * @typedef IFieldDescriptorProtoLabel\r\n * @type {number}\r\n * @property {number} LABEL_OPTIONAL=1\r\n * @property {number} LABEL_REQUIRED=2\r\n * @property {number} LABEL_REPEATED=3\r\n */\n\n/**\r\n * Values of the FieldDescriptorProto.Type enum.\r\n * @typedef IFieldDescriptorProtoType\r\n * @type {number}\r\n * @property {number} TYPE_DOUBLE=1\r\n * @property {number} TYPE_FLOAT=2\r\n * @property {number} TYPE_INT64=3\r\n * @property {number} TYPE_UINT64=4\r\n * @property {number} TYPE_INT32=5\r\n * @property {number} TYPE_FIXED64=6\r\n * @property {number} TYPE_FIXED32=7\r\n * @property {number} TYPE_BOOL=8\r\n * @property {number} TYPE_STRING=9\r\n * @property {number} TYPE_GROUP=10\r\n * @property {number} TYPE_MESSAGE=11\r\n * @property {number} TYPE_BYTES=12\r\n * @property {number} TYPE_UINT32=13\r\n * @property {number} TYPE_ENUM=14\r\n * @property {number} TYPE_SFIXED32=15\r\n * @property {number} TYPE_SFIXED64=16\r\n * @property {number} TYPE_SINT32=17\r\n * @property {number} TYPE_SINT64=18\r\n */\n\n/**\r\n * Properties of a FieldOptions message.\r\n * @interface IFieldOptions\r\n * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)\r\n * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)\r\n */\n\n/**\r\n * Values of the FieldOptions.JSType enum.\r\n * @typedef IFieldOptionsJSType\r\n * @type {number}\r\n * @property {number} JS_NORMAL=0\r\n * @property {number} JS_STRING=1\r\n * @property {number} JS_NUMBER=2\r\n */\n\n// copied here from parse.js\nvar numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;\n\n/**\r\n * Creates a field from a descriptor.\r\n * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @param {string} [syntax=\"proto2\"] Syntax\r\n * @returns {Field} Field instance\r\n */\nField.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n  if (typeof descriptor.number !== \"number\") throw Error(\"missing field id\");\n\n  // Rewire field type\n  var fieldType;\n  if (descriptor.typeName && descriptor.typeName.length) fieldType = descriptor.typeName;else fieldType = fromDescriptorType(descriptor.type);\n\n  // Rewire field rule\n  var fieldRule;\n  switch (descriptor.label) {\n    // 0 is reserved for errors\n    case 1:\n      fieldRule = undefined;\n      break;\n    case 2:\n      fieldRule = \"required\";\n      break;\n    case 3:\n      fieldRule = \"repeated\";\n      break;\n    default:\n      throw Error(\"illegal label: \" + descriptor.label);\n  }\n  var extendee = descriptor.extendee;\n  if (descriptor.extendee !== undefined) {\n    extendee = extendee.length ? extendee : undefined;\n  }\n  var field = new Field(descriptor.name.length ? descriptor.name : \"field\" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);\n  field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);\n  if (descriptor.defaultValue && descriptor.defaultValue.length) {\n    var defaultValue = descriptor.defaultValue;\n    switch (defaultValue) {\n      case \"true\":\n      case \"TRUE\":\n        defaultValue = true;\n        break;\n      case \"false\":\n      case \"FALSE\":\n        defaultValue = false;\n        break;\n      default:\n        var match = numberRe.exec(defaultValue);\n        if (match) defaultValue = parseInt(defaultValue); // eslint-disable-line radix\n        break;\n    }\n    field.setOption(\"default\", defaultValue);\n  }\n  if (packableDescriptorType(descriptor.type)) {\n    if (syntax === \"proto3\") {\n      // defaults to packed=true (internal preset is packed=true)\n      if (descriptor.options && !descriptor.options.packed) field.setOption(\"packed\", false);\n    } else if (!(descriptor.options && descriptor.options.packed))\n      // defaults to packed=false\n      field.setOption(\"packed\", false);\n  }\n  return field;\n};\n\n/**\r\n * Converts a field to a descriptor.\r\n * @returns {Message<IFieldDescriptorProto>} Descriptor\r\n * @param {string} [syntax=\"proto2\"] Syntax\r\n */\nField.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.FieldDescriptorProto.create({\n    name: this.name,\n    number: this.id\n  });\n  if (this.map) {\n    descriptor.type = 11; // message\n    descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)\n    descriptor.label = 3; // repeated\n  } else {\n    // Rewire field type\n    switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {\n      case 10: // group\n      case 11: // type\n      case 14:\n        // enum\n        descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;\n        break;\n    }\n\n    // Rewire field rule\n    switch (this.rule) {\n      case \"repeated\":\n        descriptor.label = 3;\n        break;\n      case \"required\":\n        descriptor.label = 2;\n        break;\n      default:\n        descriptor.label = 1;\n        break;\n    }\n  }\n\n  // Handle extension field\n  descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;\n\n  // Handle part of oneof\n  if (this.partOf) if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0) throw Error(\"missing oneof\");\n  if (this.options) {\n    descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);\n    if (this.options[\"default\"] != null) descriptor.defaultValue = String(this.options[\"default\"]);\n  }\n  if (syntax === \"proto3\") {\n    // defaults to packed=true\n    if (!this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;\n  } else if (this.packed)\n    // defaults to packed=false\n    (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;\n  return descriptor;\n};\n\n// --- Enum ---\n\n/**\r\n * Properties of an EnumDescriptorProto message.\r\n * @interface IEnumDescriptorProto\r\n * @property {string} [name] Enum name\r\n * @property {IEnumValueDescriptorProto[]} [value] Enum values\r\n * @property {IEnumOptions} [options] Enum options\r\n */\n\n/**\r\n * Properties of an EnumValueDescriptorProto message.\r\n * @interface IEnumValueDescriptorProto\r\n * @property {string} [name] Name\r\n * @property {number} [number] Value\r\n * @property {*} [options] Not supported\r\n */\n\n/**\r\n * Properties of an EnumOptions message.\r\n * @interface IEnumOptions\r\n * @property {boolean} [allowAlias] Whether aliases are allowed\r\n * @property {boolean} [deprecated]\r\n */\n\nvar unnamedEnumIndex = 0;\n\n/**\r\n * Creates an enum from a descriptor.\r\n * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @returns {Enum} Enum instance\r\n */\nEnum.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.EnumDescriptorProto.decode(descriptor);\n\n  // Construct values object\n  var values = {};\n  if (descriptor.value) for (var i = 0; i < descriptor.value.length; ++i) {\n    var name = descriptor.value[i].name,\n      value = descriptor.value[i].number || 0;\n    values[name && name.length ? name : \"NAME\" + value] = value;\n  }\n  return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : \"Enum\" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports.EnumOptions));\n};\n\n/**\r\n * Converts an enum to a descriptor.\r\n * @returns {Message<IEnumDescriptorProto>} Descriptor\r\n */\nEnum.prototype.toDescriptor = function toDescriptor() {\n  // Values\n  var values = [];\n  for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i) values.push(exports.EnumValueDescriptorProto.create({\n    name: ks[i],\n    number: this.values[ks[i]]\n  }));\n  return exports.EnumDescriptorProto.create({\n    name: this.name,\n    value: values,\n    options: toDescriptorOptions(this.options, exports.EnumOptions)\n  });\n};\n\n// --- OneOf ---\n\n/**\r\n * Properties of a OneofDescriptorProto message.\r\n * @interface IOneofDescriptorProto\r\n * @property {string} [name] Oneof name\r\n * @property {*} [options] Not supported\r\n */\n\nvar unnamedOneofIndex = 0;\n\n/**\r\n * Creates a oneof from a descriptor.\r\n * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @returns {OneOf} OneOf instance\r\n */\nOneOf.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.OneofDescriptorProto.decode(descriptor);\n  return new OneOf(\n  // unnamedOneOfIndex is global, not per type, because we have no ref to a type here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"oneof\" + unnamedOneofIndex++\n  // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option\n  );\n};\n\n/**\r\n * Converts a oneof to a descriptor.\r\n * @returns {Message<IOneofDescriptorProto>} Descriptor\r\n */\nOneOf.prototype.toDescriptor = function toDescriptor() {\n  return exports.OneofDescriptorProto.create({\n    name: this.name\n    // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option\n  });\n};\n\n// --- Service ---\n\n/**\r\n * Properties of a ServiceDescriptorProto message.\r\n * @interface IServiceDescriptorProto\r\n * @property {string} [name] Service name\r\n * @property {IMethodDescriptorProto[]} [method] Methods\r\n * @property {IServiceOptions} [options] Options\r\n */\n\n/**\r\n * Properties of a ServiceOptions message.\r\n * @interface IServiceOptions\r\n * @property {boolean} [deprecated]\r\n */\n\nvar unnamedServiceIndex = 0;\n\n/**\r\n * Creates a service from a descriptor.\r\n * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @returns {Service} Service instance\r\n */\nService.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.ServiceDescriptorProto.decode(descriptor);\n  var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : \"Service\" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));\n  if (descriptor.method) for (var i = 0; i < descriptor.method.length; ++i) service.add(Method.fromDescriptor(descriptor.method[i]));\n  return service;\n};\n\n/**\r\n * Converts a service to a descriptor.\r\n * @returns {Message<IServiceDescriptorProto>} Descriptor\r\n */\nService.prototype.toDescriptor = function toDescriptor() {\n  // Methods\n  var methods = [];\n  for (var i = 0; i < this.methodsArray.length; ++i) methods.push(this._methodsArray[i].toDescriptor());\n  return exports.ServiceDescriptorProto.create({\n    name: this.name,\n    method: methods,\n    options: toDescriptorOptions(this.options, exports.ServiceOptions)\n  });\n};\n\n// --- Method ---\n\n/**\r\n * Properties of a MethodDescriptorProto message.\r\n * @interface IMethodDescriptorProto\r\n * @property {string} [name] Method name\r\n * @property {string} [inputType] Request type name\r\n * @property {string} [outputType] Response type name\r\n * @property {IMethodOptions} [options] Not supported\r\n * @property {boolean} [clientStreaming=false] Whether requests are streamed\r\n * @property {boolean} [serverStreaming=false] Whether responses are streamed\r\n */\n\n/**\r\n * Properties of a MethodOptions message.\r\n * @interface IMethodOptions\r\n * @property {boolean} [deprecated]\r\n */\n\nvar unnamedMethodIndex = 0;\n\n/**\r\n * Creates a method from a descriptor.\r\n * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor\r\n * @returns {Method} Reflected method instance\r\n */\nMethod.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.MethodDescriptorProto.decode(descriptor);\n  return new Method(\n  // unnamedMethodIndex is global, not per service, because we have no ref to a service here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"Method\" + unnamedMethodIndex++, \"rpc\", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports.MethodOptions));\n};\n\n/**\r\n * Converts a method to a descriptor.\r\n * @returns {Message<IMethodDescriptorProto>} Descriptor\r\n */\nMethod.prototype.toDescriptor = function toDescriptor() {\n  return exports.MethodDescriptorProto.create({\n    name: this.name,\n    inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,\n    outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,\n    clientStreaming: this.requestStream,\n    serverStreaming: this.responseStream,\n    options: toDescriptorOptions(this.options, exports.MethodOptions)\n  });\n};\n\n// --- utility ---\n\n// Converts a descriptor type to a protobuf.js basic type\nfunction fromDescriptorType(type) {\n  switch (type) {\n    // 0 is reserved for errors\n    case 1:\n      return \"double\";\n    case 2:\n      return \"float\";\n    case 3:\n      return \"int64\";\n    case 4:\n      return \"uint64\";\n    case 5:\n      return \"int32\";\n    case 6:\n      return \"fixed64\";\n    case 7:\n      return \"fixed32\";\n    case 8:\n      return \"bool\";\n    case 9:\n      return \"string\";\n    case 12:\n      return \"bytes\";\n    case 13:\n      return \"uint32\";\n    case 15:\n      return \"sfixed32\";\n    case 16:\n      return \"sfixed64\";\n    case 17:\n      return \"sint32\";\n    case 18:\n      return \"sint64\";\n  }\n  throw Error(\"illegal type: \" + type);\n}\n\n// Tests if a descriptor type is packable\nfunction packableDescriptorType(type) {\n  switch (type) {\n    case 1: // double\n    case 2: // float\n    case 3: // int64\n    case 4: // uint64\n    case 5: // int32\n    case 6: // fixed64\n    case 7: // fixed32\n    case 8: // bool\n    case 13: // uint32\n    case 14: // enum (!)\n    case 15: // sfixed32\n    case 16: // sfixed64\n    case 17: // sint32\n    case 18:\n      // sint64\n      return true;\n  }\n  return false;\n}\n\n// Converts a protobuf.js basic type to a descriptor type\nfunction toDescriptorType(type, resolvedType) {\n  switch (type) {\n    // 0 is reserved for errors\n    case \"double\":\n      return 1;\n    case \"float\":\n      return 2;\n    case \"int64\":\n      return 3;\n    case \"uint64\":\n      return 4;\n    case \"int32\":\n      return 5;\n    case \"fixed64\":\n      return 6;\n    case \"fixed32\":\n      return 7;\n    case \"bool\":\n      return 8;\n    case \"string\":\n      return 9;\n    case \"bytes\":\n      return 12;\n    case \"uint32\":\n      return 13;\n    case \"sfixed32\":\n      return 15;\n    case \"sfixed64\":\n      return 16;\n    case \"sint32\":\n      return 17;\n    case \"sint64\":\n      return 18;\n  }\n  if (resolvedType instanceof Enum) return 14;\n  if (resolvedType instanceof Type) return resolvedType.group ? 10 : 11;\n  throw Error(\"illegal type: \" + type);\n}\n\n// Converts descriptor options to an options object\nfunction fromDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i) if ((key = (field = type._fieldsArray[i]).name) !== \"uninterpretedOption\") if (options.hasOwnProperty(key)) {\n    // eslint-disable-line no-prototype-builtins\n    val = options[key];\n    if (field.resolvedType instanceof Enum && typeof val === \"number\" && field.resolvedType.valuesById[val] !== undefined) val = field.resolvedType.valuesById[val];\n    out.push(underScore(key), val);\n  }\n  return out.length ? $protobuf.util.toObject(out) : undefined;\n}\n\n// Converts an options object to descriptor options\nfunction toDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) {\n    val = options[key = ks[i]];\n    if (key === \"default\") continue;\n    var field = type.fields[key];\n    if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)])) continue;\n    out.push(key, val);\n  }\n  return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;\n}\n\n// Calculates the shortest relative path from `from` to `to`.\nfunction shortname(from, to) {\n  var fromPath = from.fullName.split(\".\"),\n    toPath = to.fullName.split(\".\"),\n    i = 0,\n    j = 0,\n    k = toPath.length - 1;\n  if (!(from instanceof Root) && to instanceof Namespace) while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {\n    var other = to.lookup(fromPath[i++], true);\n    if (other !== null && other !== to) break;\n    ++j;\n  } else for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);\n  return toPath.slice(j).join(\".\");\n}\n\n// copied here from cli/targets/proto.js\nfunction underScore(str) {\n  return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function ($0, $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n}\n\n// --- exports ---\n\n/**\r\n * Reflected file descriptor set.\r\n * @name FileDescriptorSet\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected file descriptor proto.\r\n * @name FileDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected descriptor proto.\r\n * @name DescriptorProto\r\n * @type {Type}\r\n * @property {Type} ExtensionRange\r\n * @property {Type} ReservedRange\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     ExtensionRange: $protobuf.Type,\r\n *     ReservedRange: $protobuf.Type\r\n * }\r\n */\n\n/**\r\n * Reflected field descriptor proto.\r\n * @name FieldDescriptorProto\r\n * @type {Type}\r\n * @property {Enum} Label\r\n * @property {Enum} Type\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     Label: $protobuf.Enum,\r\n *     Type: $protobuf.Enum\r\n * }\r\n */\n\n/**\r\n * Reflected oneof descriptor proto.\r\n * @name OneofDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected enum descriptor proto.\r\n * @name EnumDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected service descriptor proto.\r\n * @name ServiceDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected enum value descriptor proto.\r\n * @name EnumValueDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected method descriptor proto.\r\n * @name MethodDescriptorProto\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected file options.\r\n * @name FileOptions\r\n * @type {Type}\r\n * @property {Enum} OptimizeMode\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     OptimizeMode: $protobuf.Enum\r\n * }\r\n */\n\n/**\r\n * Reflected message options.\r\n * @name MessageOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected field options.\r\n * @name FieldOptions\r\n * @type {Type}\r\n * @property {Enum} CType\r\n * @property {Enum} JSType\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     CType: $protobuf.Enum,\r\n *     JSType: $protobuf.Enum\r\n * }\r\n */\n\n/**\r\n * Reflected oneof options.\r\n * @name OneofOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected enum options.\r\n * @name EnumOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected enum value options.\r\n * @name EnumValueOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected service options.\r\n * @name ServiceOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected method options.\r\n * @name MethodOptions\r\n * @type {Type}\r\n * @const\r\n * @tstype $protobuf.Type\r\n */\n\n/**\r\n * Reflected uninterpretet option.\r\n * @name UninterpretedOption\r\n * @type {Type}\r\n * @property {Type} NamePart\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     NamePart: $protobuf.Type\r\n * }\r\n */\n\n/**\r\n * Reflected source code info.\r\n * @name SourceCodeInfo\r\n * @type {Type}\r\n * @property {Type} Location\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     Location: $protobuf.Type\r\n * }\r\n */\n\n/**\r\n * Reflected generated code info.\r\n * @name GeneratedCodeInfo\r\n * @type {Type}\r\n * @property {Type} Annotation\r\n * @const\r\n * @tstype $protobuf.Type & {\r\n *     Annotation: $protobuf.Type\r\n * }\r\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/ext/descriptor/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/index.js":
/*!******************************************!*\
  !*** ./node_modules/protobufjs/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// full library entry point.\n\n\n\nmodule.exports = __webpack_require__(/*! ./src/index */ \"(ssr)/./node_modules/protobufjs/src/index.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFYTs7QUFDYkEsdUdBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1maXJlYmFzZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL2luZGV4LmpzPzRmMjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZnVsbCBsaWJyYXJ5IGVudHJ5IHBvaW50LlxyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3JjL2luZGV4XCIpO1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/common.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/common.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = common;\nvar commonRe = /\\/|\\./;\n\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\nfunction common(name, json) {\n  if (!commonRe.test(name)) {\n    name = \"google/protobuf/\" + name + \".proto\";\n    json = {\n      nested: {\n        google: {\n          nested: {\n            protobuf: {\n              nested: json\n            }\n          }\n        }\n      }\n    };\n  }\n  common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n  /**\r\n   * Properties of a google.protobuf.Any message.\r\n   * @interface IAny\r\n   * @type {Object}\r\n   * @property {string} [typeUrl]\r\n   * @property {Uint8Array} [bytes]\r\n   * @memberof common\r\n   */\n  Any: {\n    fields: {\n      type_url: {\n        type: \"string\",\n        id: 1\n      },\n      value: {\n        type: \"bytes\",\n        id: 2\n      }\n    }\n  }\n});\nvar timeType;\ncommon(\"duration\", {\n  /**\r\n   * Properties of a google.protobuf.Duration message.\r\n   * @interface IDuration\r\n   * @type {Object}\r\n   * @property {number|Long} [seconds]\r\n   * @property {number} [nanos]\r\n   * @memberof common\r\n   */\n  Duration: timeType = {\n    fields: {\n      seconds: {\n        type: \"int64\",\n        id: 1\n      },\n      nanos: {\n        type: \"int32\",\n        id: 2\n      }\n    }\n  }\n});\ncommon(\"timestamp\", {\n  /**\r\n   * Properties of a google.protobuf.Timestamp message.\r\n   * @interface ITimestamp\r\n   * @type {Object}\r\n   * @property {number|Long} [seconds]\r\n   * @property {number} [nanos]\r\n   * @memberof common\r\n   */\n  Timestamp: timeType\n});\ncommon(\"empty\", {\n  /**\r\n   * Properties of a google.protobuf.Empty message.\r\n   * @interface IEmpty\r\n   * @memberof common\r\n   */\n  Empty: {\n    fields: {}\n  }\n});\ncommon(\"struct\", {\n  /**\r\n   * Properties of a google.protobuf.Struct message.\r\n   * @interface IStruct\r\n   * @type {Object}\r\n   * @property {Object.<string,IValue>} [fields]\r\n   * @memberof common\r\n   */\n  Struct: {\n    fields: {\n      fields: {\n        keyType: \"string\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.Value message.\r\n   * @interface IValue\r\n   * @type {Object}\r\n   * @property {string} [kind]\r\n   * @property {0} [nullValue]\r\n   * @property {number} [numberValue]\r\n   * @property {string} [stringValue]\r\n   * @property {boolean} [boolValue]\r\n   * @property {IStruct} [structValue]\r\n   * @property {IListValue} [listValue]\r\n   * @memberof common\r\n   */\n  Value: {\n    oneofs: {\n      kind: {\n        oneof: [\"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\"]\n      }\n    },\n    fields: {\n      nullValue: {\n        type: \"NullValue\",\n        id: 1\n      },\n      numberValue: {\n        type: \"double\",\n        id: 2\n      },\n      stringValue: {\n        type: \"string\",\n        id: 3\n      },\n      boolValue: {\n        type: \"bool\",\n        id: 4\n      },\n      structValue: {\n        type: \"Struct\",\n        id: 5\n      },\n      listValue: {\n        type: \"ListValue\",\n        id: 6\n      }\n    }\n  },\n  NullValue: {\n    values: {\n      NULL_VALUE: 0\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.ListValue message.\r\n   * @interface IListValue\r\n   * @type {Object}\r\n   * @property {Array.<IValue>} [values]\r\n   * @memberof common\r\n   */\n  ListValue: {\n    fields: {\n      values: {\n        rule: \"repeated\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"wrappers\", {\n  /**\r\n   * Properties of a google.protobuf.DoubleValue message.\r\n   * @interface IDoubleValue\r\n   * @type {Object}\r\n   * @property {number} [value]\r\n   * @memberof common\r\n   */\n  DoubleValue: {\n    fields: {\n      value: {\n        type: \"double\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.FloatValue message.\r\n   * @interface IFloatValue\r\n   * @type {Object}\r\n   * @property {number} [value]\r\n   * @memberof common\r\n   */\n  FloatValue: {\n    fields: {\n      value: {\n        type: \"float\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.Int64Value message.\r\n   * @interface IInt64Value\r\n   * @type {Object}\r\n   * @property {number|Long} [value]\r\n   * @memberof common\r\n   */\n  Int64Value: {\n    fields: {\n      value: {\n        type: \"int64\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.UInt64Value message.\r\n   * @interface IUInt64Value\r\n   * @type {Object}\r\n   * @property {number|Long} [value]\r\n   * @memberof common\r\n   */\n  UInt64Value: {\n    fields: {\n      value: {\n        type: \"uint64\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.Int32Value message.\r\n   * @interface IInt32Value\r\n   * @type {Object}\r\n   * @property {number} [value]\r\n   * @memberof common\r\n   */\n  Int32Value: {\n    fields: {\n      value: {\n        type: \"int32\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.UInt32Value message.\r\n   * @interface IUInt32Value\r\n   * @type {Object}\r\n   * @property {number} [value]\r\n   * @memberof common\r\n   */\n  UInt32Value: {\n    fields: {\n      value: {\n        type: \"uint32\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.BoolValue message.\r\n   * @interface IBoolValue\r\n   * @type {Object}\r\n   * @property {boolean} [value]\r\n   * @memberof common\r\n   */\n  BoolValue: {\n    fields: {\n      value: {\n        type: \"bool\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.StringValue message.\r\n   * @interface IStringValue\r\n   * @type {Object}\r\n   * @property {string} [value]\r\n   * @memberof common\r\n   */\n  StringValue: {\n    fields: {\n      value: {\n        type: \"string\",\n        id: 1\n      }\n    }\n  },\n  /**\r\n   * Properties of a google.protobuf.BytesValue message.\r\n   * @interface IBytesValue\r\n   * @type {Object}\r\n   * @property {Uint8Array} [value]\r\n   * @memberof common\r\n   */\n  BytesValue: {\n    fields: {\n      value: {\n        type: \"bytes\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"field_mask\", {\n  /**\r\n   * Properties of a google.protobuf.FieldMask message.\r\n   * @interface IDoubleValue\r\n   * @type {Object}\r\n   * @property {number} [value]\r\n   * @memberof common\r\n   */\n  FieldMask: {\n    fields: {\n      paths: {\n        rule: \"repeated\",\n        type: \"string\",\n        id: 1\n      }\n    }\n  }\n});\n\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\ncommon.get = function get(file) {\n  return common[file] || null;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/converter.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/converter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\nvar converter = exports;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n  var defaultAlreadyEmitted = false;\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(d%s){\", prop);\n      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n        // enum unknown values passthrough\n        if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {\n          gen(\"default:\")(\"if(typeof(d%s)===\\\"number\\\"){m%s=d%s;break}\", prop, prop, prop);\n          if (!field.repeated) gen // fallback to default value only for\n          // arrays, to avoid leaving holes.\n          (\"break\"); // for non-repeated fields, just ignore\n          defaultAlreadyEmitted = true;\n        }\n        gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n      }\n      gen(\"}\");\n    } else gen(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n        break;\n      case \"uint32\":\n      case \"fixed32\":\n        gen(\"m%s=d%s>>>0\", prop, prop);\n        break;\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n        gen(\"m%s=d%s|0\", prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)(\"else if(typeof d%s===\\\"string\\\")\", prop)(\"m%s=parseInt(d%s,10)\", prop, prop)(\"else if(typeof d%s===\\\"number\\\")\", prop)(\"m%s=d%s\", prop, prop)(\"else if(typeof d%s===\\\"object\\\")\", prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n        break;\n      case \"bytes\":\n        gen(\"if(typeof d%s===\\\"string\\\")\", prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length >= 0)\", prop)(\"m%s=d%s\", prop, prop);\n        break;\n      case \"string\":\n        gen(\"m%s=String(d%s)\", prop, prop);\n        break;\n      case \"bool\":\n        gen(\"m%s=Boolean(d%s)\", prop, prop);\n        break;\n      /* default: gen\r\n          (\"m%s=d%s\", prop, prop);\r\n          break; */\n    }\n  }\n\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nconverter.fromObject = function fromObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n  if (!fields.length) return gen(\"return new this.ctor\");\n  gen(\"var m=new this.ctor\");\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      prop = util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(d%s){\", prop)(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[i]\")(\"}\")(\"}\");\n\n      // Non-repeated fields\n    } else {\n      if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n      (\"if(d%s!=null){\", prop); // !== undefined && !== null\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop);\n      if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n    }\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(typeof m%s===\\\"number\\\")\", prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n        (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n        break;\n      case \"bytes\":\n        gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n        break;\n      default:\n        gen(\"d%s=m%s\", prop, prop);\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nconverter.toObject = function toObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  if (!fields.length) return util.codegen()(\"return {}\");\n  var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n  var repeatedFields = [],\n    mapFields = [],\n    normalFields = [],\n    i = 0;\n  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n  if (repeatedFields.length) {\n    gen(\"if(o.arrays||o.defaults){\");\n    for (i = 0; i < repeatedFields.length; ++i) gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n    gen(\"}\");\n  }\n  if (mapFields.length) {\n    gen(\"if(o.objects||o.defaults){\");\n    for (i = 0; i < mapFields.length; ++i) gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n    gen(\"}\");\n  }\n  if (normalFields.length) {\n    gen(\"if(o.defaults){\");\n    for (i = 0; i < normalFields.length; ++i) {\n      var field = normalFields[i],\n        prop = util.safeProp(field.name);\n      if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {\n        var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n        gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n      } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    }\n    gen(\"}\");\n  }\n  var hasKs2 = false;\n  for (i = 0; i < fields.length; ++i) {\n    var field = fields[i],\n      index = mtype._fieldsArray.indexOf(field),\n      prop = util.safeProp(field.name);\n    if (field.map) {\n      if (!hasKs2) {\n        hasKs2 = true;\n        gen(\"var ks2\");\n      }\n      gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[ks2[j]]\")(\"}\");\n    } else if (field.repeated) {\n      gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[j]\")(\"}\");\n    } else {\n      gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n      genValuePartial_toObject(gen, field, /* sorted */index, prop);\n      if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    }\n    gen(\"}\");\n  }\n  return gen(\"return d\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/converter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/decoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/decoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = decoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction missing(field) {\n  return \"missing required '\" + field.name + \"'\";\n}\n\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nfunction decoder(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function (field) {\n    return field.map;\n  }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\");\n  if (mtype.group) gen(\"if((t&7)===4)\")(\"break\");\n  gen(\"switch(t>>>3){\");\n  var i = 0;\n  for (; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      ref = \"m\" + util.safeProp(field.name);\n    gen(\"case %i: {\", field.id);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n      if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);else gen(\"k=null\");\n      if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);else gen(\"value=null\");\n      gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n      if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n      else gen(\"value=r.%s()\", type);\n      gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n      if (types.long[field.keyType] !== undefined) gen(\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);else gen(\"%s[k]=value\", ref);\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n\n      // Packable (always check for forward and backward compatiblity)\n      if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n\n      // Non-packed\n      if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s.push(types[%i].decode(r))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);else gen(\"%s.push(r.%s())\", ref, type);\n\n      // Non-repeated\n    } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s=types[%i].decode(r)\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);else gen(\"%s=r.%s()\", ref, type);\n    gen(\"break\")(\"}\");\n    // Unknown fields\n  }\n  gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n\n  // Field presence\n  for (i = 0; i < mtype._fieldsArray.length; ++i) {\n    var rfield = mtype._fieldsArray[i];\n    if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/decoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/encoder.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/encoder.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = encoder;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n  return field.resolvedType.group ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nfunction encoder(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n  var i, ref;\n\n  // \"when a message is serialized its known fields should be written sequentially by field number\"\n  var fields = /* initializes */mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      index = mtype._fieldsArray.indexOf(field),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      wireType = types.basic[type];\n    ref = \"m\" + util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n      (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n      if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n      else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n      gen(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n      // Packed repeated\n      if (field.packed && types.packed[type] !== undefined) {\n        gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n\n        // Non-packed\n      } else {\n        gen(\"for(var i=0;i<%s.length;++i)\", ref);\n        if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n      }\n      gen(\"}\");\n\n      // Non-repeated\n    } else {\n      if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n      if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n    }\n  }\n  return gen(\"return w\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/encoder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/enum.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/enum.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\r\n */\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n\n  /**\r\n   * Enum values by id.\r\n   * @type {Object.<number,string>}\r\n   */\n  this.valuesById = {};\n\n  /**\r\n   * Enum values by name.\r\n   * @type {Object.<string,number>}\r\n   */\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\r\n   * Enum comment text.\r\n   * @type {string|null}\r\n   */\n  this.comment = comment;\n\n  /**\r\n   * Value comment texts, if any.\r\n   * @type {Object.<string,string>}\r\n   */\n  this.comments = comments || {};\n\n  /**\r\n   * Values options, if any\r\n   * @type {Object<string, Object<string, *>>|undefined}\r\n   */\n  this.valuesOptions = valuesOptions;\n\n  /**\r\n   * Reserved ranges, if any.\r\n   * @type {Array.<number[]|string>}\r\n   */\n  this.reserved = undefined; // toJSON\n\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\")\n    // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\n\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"valuesOptions\", this.valuesOptions, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @param {Object.<string, *>|undefined} [options] Options, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\nEnum.prototype.add = function add(name, id, comment, options) {\n  // utilized by the parser but not by .fromJSON\n\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n  if (options) {\n    if (this.valuesOptions === undefined) this.valuesOptions = {};\n    this.valuesOptions[name] = options || null;\n  }\n  this.comments[name] = comment || null;\n  return this;\n};\n\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  if (this.valuesOptions) delete this.valuesOptions[name];\n  return this;\n};\n\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/enum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/field.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/field.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\n\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n  /**\r\n   * Field rule, if any.\r\n   * @type {string|undefined}\r\n   */\n  if (rule === \"proto3_optional\") {\n    rule = \"optional\";\n  }\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\r\n   * Field type.\r\n   * @type {string}\r\n   */\n  this.type = type; // toJSON\n\n  /**\r\n   * Unique field id.\r\n   * @type {number}\r\n   */\n  this.id = id; // toJSON, marker\n\n  /**\r\n   * Extended type if different from parent.\r\n   * @type {string|undefined}\r\n   */\n  this.extend = extend || undefined; // toJSON\n\n  /**\r\n   * Whether this field is required.\r\n   * @type {boolean}\r\n   */\n  this.required = rule === \"required\";\n\n  /**\r\n   * Whether this field is optional.\r\n   * @type {boolean}\r\n   */\n  this.optional = !this.required;\n\n  /**\r\n   * Whether this field is repeated.\r\n   * @type {boolean}\r\n   */\n  this.repeated = rule === \"repeated\";\n\n  /**\r\n   * Whether this field is a map or not.\r\n   * @type {boolean}\r\n   */\n  this.map = false;\n\n  /**\r\n   * Message this field belongs to.\r\n   * @type {Type|null}\r\n   */\n  this.message = null;\n\n  /**\r\n   * OneOf this field belongs to, if any,\r\n   * @type {OneOf|null}\r\n   */\n  this.partOf = null;\n\n  /**\r\n   * The field type's default value.\r\n   * @type {*}\r\n   */\n  this.typeDefault = null;\n\n  /**\r\n   * The field's default value on prototypes.\r\n   * @type {*}\r\n   */\n  this.defaultValue = null;\n\n  /**\r\n   * Whether this field's value should be treated as a long.\r\n   * @type {boolean}\r\n   */\n  this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n  /**\r\n   * Whether this field's value is a buffer.\r\n   * @type {boolean}\r\n   */\n  this.bytes = type === \"bytes\";\n\n  /**\r\n   * Resolved type if not a basic type.\r\n   * @type {Type|Enum|null}\r\n   */\n  this.resolvedType = null;\n\n  /**\r\n   * Sister-field within the extended type if a declaring extension field.\r\n   * @type {Field|null}\r\n   */\n  this.extensionField = null;\n\n  /**\r\n   * Sister-field within the declaring namespace if an extended field.\r\n   * @type {Field|null}\r\n   */\n  this.declaringField = null;\n\n  /**\r\n   * Internally remembers whether this field is packed.\r\n   * @type {boolean|null}\r\n   * @private\r\n   */\n  this._packed = null;\n\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n  this.comment = comment;\n}\n\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n\n/**\r\n * @override\r\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\")\n    // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\n\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else\n      // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } else if (this.options && this.options.proto3_optional) {\n    // proto3 scalar value marked optional; should default to null\n    this.typeDefault = null;\n  }\n\n  // use explicitly set default value if present\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  }\n\n  // remove unnecessary options\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  }\n\n  // convert to internal data type if necesssary\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n    /* istanbul ignore else */\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  }\n\n  // take special care of maps and repeated fields\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n  // ensure proper value on prototype\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n  // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n  Type = Type_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/field.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-light.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/index-light.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protobuf = module.exports = __webpack_require__(/*! ./index-minimal */ \"(ssr)/./node_modules/protobufjs/src/index-minimal.js\");\nprotobuf.build = \"light\";\n\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n  return root.load(filename, callback);\n}\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\nfunction loadSync(filename, root) {\n  if (!root) root = new protobuf.Root();\n  return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\");\nprotobuf.decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\");\nprotobuf.verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\");\nprotobuf.converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\");\n\n// Reflection\nprotobuf.ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\nprotobuf.Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\nprotobuf.Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\");\nprotobuf.Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\nprotobuf.Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\nprotobuf.Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\nprotobuf.OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nprotobuf.MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\");\nprotobuf.Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\");\nprotobuf.Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\");\n\n// Runtime\nprotobuf.Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\nprotobuf.wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n\n// Utility\nprotobuf.types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\");\nprotobuf.util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-light.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index-minimal.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/index-minimal.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar protobuf = exports;\n\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(ssr)/./node_modules/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(ssr)/./node_modules/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nprotobuf.rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\nprotobuf.roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nprotobuf.configure = configure;\n\n/* istanbul ignore next */\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\nfunction configure() {\n  protobuf.util._configure();\n  protobuf.Writer._configure(protobuf.BufferWriter);\n  protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXgtbWluaW1hbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYixJQUFJQSxRQUFRLEdBQUdDLE9BQU87O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBRCxRQUFRLENBQUNFLEtBQUssR0FBRyxTQUFTOztBQUUxQjtBQUNBRixRQUFRLENBQUNHLE1BQU0sR0FBU0MsbUJBQU8sQ0FBQywrREFBVSxDQUFDO0FBQzNDSixRQUFRLENBQUNLLFlBQVksR0FBR0QsbUJBQU8sQ0FBQyw2RUFBaUIsQ0FBQztBQUNsREosUUFBUSxDQUFDTSxNQUFNLEdBQVNGLG1CQUFPLENBQUMsK0RBQVUsQ0FBQztBQUMzQ0osUUFBUSxDQUFDTyxZQUFZLEdBQUdILG1CQUFPLENBQUMsNkVBQWlCLENBQUM7O0FBRWxEO0FBQ0FKLFFBQVEsQ0FBQ1EsSUFBSSxHQUFXSixtQkFBTyxDQUFDLDJFQUFnQixDQUFDO0FBQ2pESixRQUFRLENBQUNTLEdBQUcsR0FBWUwsbUJBQU8sQ0FBQyx5REFBTyxDQUFDO0FBQ3hDSixRQUFRLENBQUNVLEtBQUssR0FBVU4sbUJBQU8sQ0FBQyw2REFBUyxDQUFDO0FBQzFDSixRQUFRLENBQUNXLFNBQVMsR0FBTUEsU0FBUzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFNBQVNBLENBQUEsRUFBRztFQUNqQlgsUUFBUSxDQUFDUSxJQUFJLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0VBQzFCWixRQUFRLENBQUNHLE1BQU0sQ0FBQ1MsVUFBVSxDQUFDWixRQUFRLENBQUNLLFlBQVksQ0FBQztFQUNqREwsUUFBUSxDQUFDTSxNQUFNLENBQUNNLFVBQVUsQ0FBQ1osUUFBUSxDQUFDTyxZQUFZLENBQUM7QUFDckQ7O0FBRUE7QUFDQUksU0FBUyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZpcmViYXNlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanM/OTQzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIHByb3RvYnVmID0gZXhwb3J0cztcclxuXHJcbi8qKlxyXG4gKiBCdWlsZCB0eXBlLCBvbmUgb2YgYFwiZnVsbFwiYCwgYFwibGlnaHRcImAgb3IgYFwibWluaW1hbFwiYC5cclxuICogQG5hbWUgYnVpbGRcclxuICogQHR5cGUge3N0cmluZ31cclxuICogQGNvbnN0XHJcbiAqL1xyXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xyXG5cclxuLy8gU2VyaWFsaXphdGlvblxyXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XHJcbnByb3RvYnVmLkJ1ZmZlcldyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlcl9idWZmZXJcIik7XHJcbnByb3RvYnVmLlJlYWRlciAgICAgICA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcclxuXHJcbi8vIFV0aWxpdHlcclxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5wcm90b2J1Zi5ycGMgICAgICAgICAgPSByZXF1aXJlKFwiLi9ycGNcIik7XHJcbnByb3RvYnVmLnJvb3RzICAgICAgICA9IHJlcXVpcmUoXCIuL3Jvb3RzXCIpO1xyXG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XHJcblxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4vKipcclxuICogUmVjb25maWd1cmVzIHRoZSBsaWJyYXJ5IGFjY29yZGluZyB0byB0aGUgZW52aXJvbm1lbnQuXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqL1xyXG5mdW5jdGlvbiBjb25maWd1cmUoKSB7XHJcbiAgICBwcm90b2J1Zi51dGlsLl9jb25maWd1cmUoKTtcclxuICAgIHByb3RvYnVmLldyaXRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlcldyaXRlcik7XHJcbiAgICBwcm90b2J1Zi5SZWFkZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJSZWFkZXIpO1xyXG59XHJcblxyXG4vLyBTZXQgdXAgYnVmZmVyIHV0aWxpdHkgYWNjb3JkaW5nIHRvIHRoZSBlbnZpcm9ubWVudFxyXG5jb25maWd1cmUoKTtcclxuIl0sIm5hbWVzIjpbInByb3RvYnVmIiwiZXhwb3J0cyIsImJ1aWxkIiwiV3JpdGVyIiwicmVxdWlyZSIsIkJ1ZmZlcldyaXRlciIsIlJlYWRlciIsIkJ1ZmZlclJlYWRlciIsInV0aWwiLCJycGMiLCJyb290cyIsImNvbmZpZ3VyZSIsIl9jb25maWd1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/index.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protobuf = module.exports = __webpack_require__(/*! ./index-light */ \"(ssr)/./node_modules/protobufjs/src/index-light.js\");\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\");\nprotobuf.parse = __webpack_require__(/*! ./parse */ \"(ssr)/./node_modules/protobufjs/src/parse.js\");\nprotobuf.common = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/protobufjs/src/common.js\");\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2IsSUFBSUEsUUFBUSxHQUFHQywrR0FBeUM7QUFFeERELFFBQVEsQ0FBQ0ksS0FBSyxHQUFHLE1BQU07O0FBRXZCO0FBQ0FKLFFBQVEsQ0FBQ0ssUUFBUSxHQUFXRixtQkFBTyxDQUFDLG1FQUFZLENBQUM7QUFDakRILFFBQVEsQ0FBQ00sS0FBSyxHQUFjSCxtQkFBTyxDQUFDLDZEQUFTLENBQUM7QUFDOUNILFFBQVEsQ0FBQ08sTUFBTSxHQUFhSixtQkFBTyxDQUFDLCtEQUFVLENBQUM7O0FBRS9DO0FBQ0FILFFBQVEsQ0FBQ1EsSUFBSSxDQUFDQyxVQUFVLENBQUNULFFBQVEsQ0FBQ1UsSUFBSSxFQUFFVixRQUFRLENBQUNNLEtBQUssRUFBRU4sUUFBUSxDQUFDTyxNQUFNLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZpcmViYXNlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL2luZGV4LmpzPzVhNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBwcm90b2J1ZiA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vaW5kZXgtbGlnaHRcIik7XHJcblxyXG5wcm90b2J1Zi5idWlsZCA9IFwiZnVsbFwiO1xyXG5cclxuLy8gUGFyc2VyXHJcbnByb3RvYnVmLnRva2VuaXplICAgICAgICAgPSByZXF1aXJlKFwiLi90b2tlbml6ZVwiKTtcclxucHJvdG9idWYucGFyc2UgICAgICAgICAgICA9IHJlcXVpcmUoXCIuL3BhcnNlXCIpO1xyXG5wcm90b2J1Zi5jb21tb24gICAgICAgICAgID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xyXG5cclxuLy8gQ29uZmlndXJlIHBhcnNlclxyXG5wcm90b2J1Zi5Sb290Ll9jb25maWd1cmUocHJvdG9idWYuVHlwZSwgcHJvdG9idWYucGFyc2UsIHByb3RvYnVmLmNvbW1vbik7XHJcbiJdLCJuYW1lcyI6WyJwcm90b2J1ZiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwiYnVpbGQiLCJ0b2tlbml6ZSIsInBhcnNlIiwiY29tbW9uIiwiUm9vdCIsIl9jb25maWd1cmUiLCJUeXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/mapfield.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/mapfield.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = MapField;\n\n// extends Field\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n  Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n  /* istanbul ignore if */\n  if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n\n  /**\r\n   * Key type.\r\n   * @type {string}\r\n   */\n  this.keyType = keyType; // toJSON, marker\n\n  /**\r\n   * Resolved key type if not a basic type.\r\n   * @type {ReflectionObject|null}\r\n   */\n  this.resolvedKeyType = null;\n\n  // Overrides Field#map\n  this.map = true;\n}\n\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\n\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\n\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\nMapField.fromJSON = function fromJSON(name, json) {\n  return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"keyType\", this.keyType, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * @override\r\n */\nMapField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n\n  // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n  if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n  return Field.prototype.resolve.call(this);\n};\n\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n  // submessage value: decorate the submessage and use its name as the type\n  if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n\n  // enum reference value: create a reflected copy of the enum and keep reuseing it\n  else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n  return function mapFieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvbWFwZmllbGQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHQyxRQUFROztBQUV6QjtBQUNBLElBQUlDLEtBQUssR0FBR0MsbUJBQU8sQ0FBQyw2REFBUyxDQUFDO0FBQzlCLENBQUMsQ0FBQ0YsUUFBUSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixLQUFLLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFFBQVEsRUFBRU8sU0FBUyxHQUFHLFVBQVU7QUFFckcsSUFBSUMsS0FBSyxHQUFLTixtQkFBTyxDQUFDLDZEQUFTLENBQUM7RUFDNUJPLElBQUksR0FBTVAsbUJBQU8sQ0FBQywyREFBUSxDQUFDOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixRQUFRQSxDQUFDVSxJQUFJLEVBQUVDLEVBQUUsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFFO0VBQ3pEZCxLQUFLLENBQUNlLElBQUksQ0FBQyxJQUFJLEVBQUVOLElBQUksRUFBRUMsRUFBRSxFQUFFRSxJQUFJLEVBQUVJLFNBQVMsRUFBRUEsU0FBUyxFQUFFSCxPQUFPLEVBQUVDLE9BQU8sQ0FBQzs7RUFFeEU7RUFDQSxJQUFJLENBQUNOLElBQUksQ0FBQ1MsUUFBUSxDQUFDTixPQUFPLENBQUMsRUFDdkIsTUFBTU8sU0FBUyxDQUFDLDBCQUEwQixDQUFDOztFQUUvQztBQUNKO0FBQ0E7QUFDQTtFQUNJLElBQUksQ0FBQ1AsT0FBTyxHQUFHQSxPQUFPLENBQUMsQ0FBQzs7RUFFeEI7QUFDSjtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNRLGVBQWUsR0FBRyxJQUFJOztFQUUzQjtFQUNBLElBQUksQ0FBQ0MsR0FBRyxHQUFHLElBQUk7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBckIsUUFBUSxDQUFDc0IsUUFBUSxHQUFHLFNBQVNBLFFBQVFBLENBQUNaLElBQUksRUFBRWEsSUFBSSxFQUFFO0VBQzlDLE9BQU8sSUFBSXZCLFFBQVEsQ0FBQ1UsSUFBSSxFQUFFYSxJQUFJLENBQUNaLEVBQUUsRUFBRVksSUFBSSxDQUFDWCxPQUFPLEVBQUVXLElBQUksQ0FBQ1YsSUFBSSxFQUFFVSxJQUFJLENBQUNULE9BQU8sRUFBRVMsSUFBSSxDQUFDUixPQUFPLENBQUM7QUFDM0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FmLFFBQVEsQ0FBQ0csU0FBUyxDQUFDcUIsTUFBTSxHQUFHLFNBQVNBLE1BQU1BLENBQUNDLGFBQWEsRUFBRTtFQUN2RCxJQUFJQyxZQUFZLEdBQUdELGFBQWEsR0FBR0UsT0FBTyxDQUFDRixhQUFhLENBQUNDLFlBQVksQ0FBQyxHQUFHLEtBQUs7RUFDOUUsT0FBT2pCLElBQUksQ0FBQ21CLFFBQVEsQ0FBQyxDQUNqQixTQUFTLEVBQUcsSUFBSSxDQUFDaEIsT0FBTyxFQUN4QixNQUFNLEVBQU0sSUFBSSxDQUFDQyxJQUFJLEVBQ3JCLElBQUksRUFBUSxJQUFJLENBQUNGLEVBQUUsRUFDbkIsUUFBUSxFQUFJLElBQUksQ0FBQ2tCLE1BQU0sRUFDdkIsU0FBUyxFQUFHLElBQUksQ0FBQ2YsT0FBTyxFQUN4QixTQUFTLEVBQUdZLFlBQVksR0FBRyxJQUFJLENBQUNYLE9BQU8sR0FBR0UsU0FBUyxDQUN0RCxDQUFDO0FBQ04sQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQWpCLFFBQVEsQ0FBQ0csU0FBUyxDQUFDMkIsT0FBTyxHQUFHLFNBQVNBLE9BQU9BLENBQUEsRUFBRztFQUM1QyxJQUFJLElBQUksQ0FBQ0MsUUFBUSxFQUNiLE9BQU8sSUFBSTs7RUFFZjtFQUNBLElBQUl2QixLQUFLLENBQUN3QixNQUFNLENBQUMsSUFBSSxDQUFDcEIsT0FBTyxDQUFDLEtBQUtLLFNBQVMsRUFDeEMsTUFBTWdCLEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUNyQixPQUFPLENBQUM7RUFFcEQsT0FBT1gsS0FBSyxDQUFDRSxTQUFTLENBQUMyQixPQUFPLENBQUNkLElBQUksQ0FBQyxJQUFJLENBQUM7QUFDN0MsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBaEIsUUFBUSxDQUFDa0MsQ0FBQyxHQUFHLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRTtFQUUxRTtFQUNBLElBQUksT0FBT0EsY0FBYyxLQUFLLFVBQVUsRUFDcENBLGNBQWMsR0FBRzdCLElBQUksQ0FBQzhCLFlBQVksQ0FBQ0QsY0FBYyxDQUFDLENBQUM1QixJQUFJOztFQUUzRDtFQUFBLEtBQ0ssSUFBSTRCLGNBQWMsSUFBSSxPQUFPQSxjQUFjLEtBQUssUUFBUSxFQUN6REEsY0FBYyxHQUFHN0IsSUFBSSxDQUFDK0IsWUFBWSxDQUFDRixjQUFjLENBQUMsQ0FBQzVCLElBQUk7RUFFM0QsT0FBTyxTQUFTK0IsaUJBQWlCQSxDQUFDdEMsU0FBUyxFQUFFdUMsU0FBUyxFQUFFO0lBQ3BEakMsSUFBSSxDQUFDOEIsWUFBWSxDQUFDcEMsU0FBUyxDQUFDRyxXQUFXLENBQUMsQ0FDbkNxQyxHQUFHLENBQUMsSUFBSTNDLFFBQVEsQ0FBQzBDLFNBQVMsRUFBRU4sT0FBTyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsQ0FBQyxDQUFDO0VBQzVFLENBQUM7QUFDTCxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1maXJlYmFzZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9tYXBmaWVsZC5qcz8yYjkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IE1hcEZpZWxkO1xyXG5cclxuLy8gZXh0ZW5kcyBGaWVsZFxyXG52YXIgRmllbGQgPSByZXF1aXJlKFwiLi9maWVsZFwiKTtcclxuKChNYXBGaWVsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEZpZWxkLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gTWFwRmllbGQpLmNsYXNzTmFtZSA9IFwiTWFwRmllbGRcIjtcclxuXHJcbnZhciB0eXBlcyAgID0gcmVxdWlyZShcIi4vdHlwZXNcIiksXHJcbiAgICB1dGlsICAgID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IG1hcCBmaWVsZCBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSZWZsZWN0ZWQgbWFwIGZpZWxkLlxyXG4gKiBAZXh0ZW5kcyBGaWVsZEJhc2VcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFVuaXF1ZSBuYW1lIHdpdGhpbiBpdHMgbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBpZCBVbmlxdWUgaWQgd2l0aGluIGl0cyBuYW1lc3BhY2VcclxuICogQHBhcmFtIHtzdHJpbmd9IGtleVR5cGUgS2V5IHR5cGVcclxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVmFsdWUgdHlwZVxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBbb3B0aW9uc10gRGVjbGFyZWQgb3B0aW9uc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbW1lbnRdIENvbW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZmllbGRcclxuICovXHJcbmZ1bmN0aW9uIE1hcEZpZWxkKG5hbWUsIGlkLCBrZXlUeXBlLCB0eXBlLCBvcHRpb25zLCBjb21tZW50KSB7XHJcbiAgICBGaWVsZC5jYWxsKHRoaXMsIG5hbWUsIGlkLCB0eXBlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb3B0aW9ucywgY29tbWVudCk7XHJcblxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoIXV0aWwuaXNTdHJpbmcoa2V5VHlwZSkpXHJcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwia2V5VHlwZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogS2V5IHR5cGUuXHJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmtleVR5cGUgPSBrZXlUeXBlOyAvLyB0b0pTT04sIG1hcmtlclxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzb2x2ZWQga2V5IHR5cGUgaWYgbm90IGEgYmFzaWMgdHlwZS5cclxuICAgICAqIEB0eXBlIHtSZWZsZWN0aW9uT2JqZWN0fG51bGx9XHJcbiAgICAgKi9cclxuICAgIHRoaXMucmVzb2x2ZWRLZXlUeXBlID0gbnVsbDtcclxuXHJcbiAgICAvLyBPdmVycmlkZXMgRmllbGQjbWFwXHJcbiAgICB0aGlzLm1hcCA9IHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXAgZmllbGQgZGVzY3JpcHRvci5cclxuICogQGludGVyZmFjZSBJTWFwRmllbGRcclxuICogQGV4dGVuZHMge0lGaWVsZH1cclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGtleVR5cGUgS2V5IHR5cGVcclxuICovXHJcblxyXG4vKipcclxuICogRXh0ZW5zaW9uIG1hcCBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAaW50ZXJmYWNlIElFeHRlbnNpb25NYXBGaWVsZFxyXG4gKiBAZXh0ZW5kcyBJTWFwRmllbGRcclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGV4dGVuZCBFeHRlbmRlZCB0eXBlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBtYXAgZmllbGQgZnJvbSBhIG1hcCBmaWVsZCBkZXNjcmlwdG9yLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBGaWVsZCBuYW1lXHJcbiAqIEBwYXJhbSB7SU1hcEZpZWxkfSBqc29uIE1hcCBmaWVsZCBkZXNjcmlwdG9yXHJcbiAqIEByZXR1cm5zIHtNYXBGaWVsZH0gQ3JlYXRlZCBtYXAgZmllbGRcclxuICogQHRocm93cyB7VHlwZUVycm9yfSBJZiBhcmd1bWVudHMgYXJlIGludmFsaWRcclxuICovXHJcbk1hcEZpZWxkLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04obmFtZSwganNvbikge1xyXG4gICAgcmV0dXJuIG5ldyBNYXBGaWVsZChuYW1lLCBqc29uLmlkLCBqc29uLmtleVR5cGUsIGpzb24udHlwZSwganNvbi5vcHRpb25zLCBqc29uLmNvbW1lbnQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgbWFwIGZpZWxkIHRvIGEgbWFwIGZpZWxkIGRlc2NyaXB0b3IuXHJcbiAqIEBwYXJhbSB7SVRvSlNPTk9wdGlvbnN9IFt0b0pTT05PcHRpb25zXSBKU09OIGNvbnZlcnNpb24gb3B0aW9uc1xyXG4gKiBAcmV0dXJucyB7SU1hcEZpZWxkfSBNYXAgZmllbGQgZGVzY3JpcHRvclxyXG4gKi9cclxuTWFwRmllbGQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTih0b0pTT05PcHRpb25zKSB7XHJcbiAgICB2YXIga2VlcENvbW1lbnRzID0gdG9KU09OT3B0aW9ucyA/IEJvb2xlYW4odG9KU09OT3B0aW9ucy5rZWVwQ29tbWVudHMpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gdXRpbC50b09iamVjdChbXHJcbiAgICAgICAgXCJrZXlUeXBlXCIgLCB0aGlzLmtleVR5cGUsXHJcbiAgICAgICAgXCJ0eXBlXCIgICAgLCB0aGlzLnR5cGUsXHJcbiAgICAgICAgXCJpZFwiICAgICAgLCB0aGlzLmlkLFxyXG4gICAgICAgIFwiZXh0ZW5kXCIgICwgdGhpcy5leHRlbmQsXHJcbiAgICAgICAgXCJvcHRpb25zXCIgLCB0aGlzLm9wdGlvbnMsXHJcbiAgICAgICAgXCJjb21tZW50XCIgLCBrZWVwQ29tbWVudHMgPyB0aGlzLmNvbW1lbnQgOiB1bmRlZmluZWRcclxuICAgIF0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuTWFwRmllbGQucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKCkge1xyXG4gICAgaWYgKHRoaXMucmVzb2x2ZWQpXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcblxyXG4gICAgLy8gQmVzaWRlcyBhIHZhbHVlIHR5cGUsIG1hcCBmaWVsZHMgaGF2ZSBhIGtleSB0eXBlIHRoYXQgbWF5IGJlIFwiYW55IHNjYWxhciB0eXBlIGV4Y2VwdCBmb3IgZmxvYXRpbmcgcG9pbnQgdHlwZXMgYW5kIGJ5dGVzXCJcclxuICAgIGlmICh0eXBlcy5tYXBLZXlbdGhpcy5rZXlUeXBlXSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBrZXkgdHlwZTogXCIgKyB0aGlzLmtleVR5cGUpO1xyXG5cclxuICAgIHJldHVybiBGaWVsZC5wcm90b3R5cGUucmVzb2x2ZS5jYWxsKHRoaXMpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1hcCBmaWVsZCBkZWNvcmF0b3IgKFR5cGVTY3JpcHQpLlxyXG4gKiBAbmFtZSBNYXBGaWVsZC5kXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmllbGRJZCBGaWVsZCBpZFxyXG4gKiBAcGFyYW0ge1wiaW50MzJcInxcInVpbnQzMlwifFwic2ludDMyXCJ8XCJmaXhlZDMyXCJ8XCJzZml4ZWQzMlwifFwiaW50NjRcInxcInVpbnQ2NFwifFwic2ludDY0XCJ8XCJmaXhlZDY0XCJ8XCJzZml4ZWQ2NFwifFwiYm9vbFwifFwic3RyaW5nXCJ9IGZpZWxkS2V5VHlwZSBGaWVsZCBrZXkgdHlwZVxyXG4gKiBAcGFyYW0ge1wiZG91YmxlXCJ8XCJmbG9hdFwifFwiaW50MzJcInxcInVpbnQzMlwifFwic2ludDMyXCJ8XCJmaXhlZDMyXCJ8XCJzZml4ZWQzMlwifFwiaW50NjRcInxcInVpbnQ2NFwifFwic2ludDY0XCJ8XCJmaXhlZDY0XCJ8XCJzZml4ZWQ2NFwifFwiYm9vbFwifFwic3RyaW5nXCJ8XCJieXRlc1wifE9iamVjdHxDb25zdHJ1Y3Rvcjx7fT59IGZpZWxkVmFsdWVUeXBlIEZpZWxkIHZhbHVlIHR5cGVcclxuICogQHJldHVybnMge0ZpZWxkRGVjb3JhdG9yfSBEZWNvcmF0b3IgZnVuY3Rpb25cclxuICogQHRlbXBsYXRlIFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IG51bWJlciB8IExvbmcgfCBzdHJpbmcgfCBib29sZWFuIHwgVWludDhBcnJheSB8IEJ1ZmZlciB8IG51bWJlcltdIHwgTWVzc2FnZTx7fT4gfVxyXG4gKi9cclxuTWFwRmllbGQuZCA9IGZ1bmN0aW9uIGRlY29yYXRlTWFwRmllbGQoZmllbGRJZCwgZmllbGRLZXlUeXBlLCBmaWVsZFZhbHVlVHlwZSkge1xyXG5cclxuICAgIC8vIHN1Ym1lc3NhZ2UgdmFsdWU6IGRlY29yYXRlIHRoZSBzdWJtZXNzYWdlIGFuZCB1c2UgaXRzIG5hbWUgYXMgdGhlIHR5cGVcclxuICAgIGlmICh0eXBlb2YgZmllbGRWYWx1ZVR5cGUgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmaWVsZFZhbHVlVHlwZSA9IHV0aWwuZGVjb3JhdGVUeXBlKGZpZWxkVmFsdWVUeXBlKS5uYW1lO1xyXG5cclxuICAgIC8vIGVudW0gcmVmZXJlbmNlIHZhbHVlOiBjcmVhdGUgYSByZWZsZWN0ZWQgY29weSBvZiB0aGUgZW51bSBhbmQga2VlcCByZXVzZWluZyBpdFxyXG4gICAgZWxzZSBpZiAoZmllbGRWYWx1ZVR5cGUgJiYgdHlwZW9mIGZpZWxkVmFsdWVUeXBlID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIGZpZWxkVmFsdWVUeXBlID0gdXRpbC5kZWNvcmF0ZUVudW0oZmllbGRWYWx1ZVR5cGUpLm5hbWU7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1hcEZpZWxkRGVjb3JhdG9yKHByb3RvdHlwZSwgZmllbGROYW1lKSB7XHJcbiAgICAgICAgdXRpbC5kZWNvcmF0ZVR5cGUocHJvdG90eXBlLmNvbnN0cnVjdG9yKVxyXG4gICAgICAgICAgICAuYWRkKG5ldyBNYXBGaWVsZChmaWVsZE5hbWUsIGZpZWxkSWQsIGZpZWxkS2V5VHlwZSwgZmllbGRWYWx1ZVR5cGUpKTtcclxuICAgIH07XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTWFwRmllbGQiLCJGaWVsZCIsInJlcXVpcmUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsImNsYXNzTmFtZSIsInR5cGVzIiwidXRpbCIsIm5hbWUiLCJpZCIsImtleVR5cGUiLCJ0eXBlIiwib3B0aW9ucyIsImNvbW1lbnQiLCJjYWxsIiwidW5kZWZpbmVkIiwiaXNTdHJpbmciLCJUeXBlRXJyb3IiLCJyZXNvbHZlZEtleVR5cGUiLCJtYXAiLCJmcm9tSlNPTiIsImpzb24iLCJ0b0pTT04iLCJ0b0pTT05PcHRpb25zIiwia2VlcENvbW1lbnRzIiwiQm9vbGVhbiIsInRvT2JqZWN0IiwiZXh0ZW5kIiwicmVzb2x2ZSIsInJlc29sdmVkIiwibWFwS2V5IiwiRXJyb3IiLCJkIiwiZGVjb3JhdGVNYXBGaWVsZCIsImZpZWxkSWQiLCJmaWVsZEtleVR5cGUiLCJmaWVsZFZhbHVlVHlwZSIsImRlY29yYXRlVHlwZSIsImRlY29yYXRlRW51bSIsIm1hcEZpZWxkRGVjb3JhdG9yIiwiZmllbGROYW1lIiwiYWRkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/mapfield.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/message.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/message.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Message;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object = object\r\n */\nfunction Message(properties) {\n  // not used internally\n  if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) this[keys[i]] = properties[keys[i]];\n}\n\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\n\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.create = function create(properties) {\n  return this.$type.create(properties);\n};\n\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.encode = function encode(message, writer) {\n  return this.$type.encode(message, writer);\n};\n\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.$type.encodeDelimited(message, writer);\n};\n\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.decode = function decode(reader) {\n  return this.$type.decode(reader);\n};\n\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n  return this.$type.decodeDelimited(reader);\n};\n\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\nMessage.verify = function verify(message) {\n  return this.$type.verify(message);\n};\n\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.fromObject = function fromObject(object) {\n  return this.$type.fromObject(object);\n};\n\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\nMessage.toObject = function toObject(message, options) {\n  return this.$type.toObject(message, options);\n};\n\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\nMessage.prototype.toJSON = function toJSON() {\n  return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/method.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/method.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\r\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n  /* istanbul ignore next */\n  if (util.isObject(requestStream)) {\n    options = requestStream;\n    requestStream = responseStream = undefined;\n  } else if (util.isObject(responseStream)) {\n    options = responseStream;\n    responseStream = undefined;\n  }\n\n  /* istanbul ignore if */\n  if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n  ReflectionObject.call(this, name, options);\n\n  /**\r\n   * Method type.\r\n   * @type {string}\r\n   */\n  this.type = type || \"rpc\"; // toJSON\n\n  /**\r\n   * Request type.\r\n   * @type {string}\r\n   */\n  this.requestType = requestType; // toJSON, marker\n\n  /**\r\n   * Whether requests are streamed or not.\r\n   * @type {boolean|undefined}\r\n   */\n  this.requestStream = requestStream ? true : undefined; // toJSON\n\n  /**\r\n   * Response type.\r\n   * @type {string}\r\n   */\n  this.responseType = responseType; // toJSON\n\n  /**\r\n   * Whether responses are streamed or not.\r\n   * @type {boolean|undefined}\r\n   */\n  this.responseStream = responseStream ? true : undefined; // toJSON\n\n  /**\r\n   * Resolved request type.\r\n   * @type {Type|null}\r\n   */\n  this.resolvedRequestType = null;\n\n  /**\r\n   * Resolved response type.\r\n   * @type {Type|null}\r\n   */\n  this.resolvedResponseType = null;\n\n  /**\r\n   * Comment for this method\r\n   * @type {string|null}\r\n   */\n  this.comment = comment;\n\n  /**\r\n   * Options properly parsed into an object\r\n   */\n  this.parsedOptions = parsedOptions;\n}\n\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n * @property {string} comment Method comments\r\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\r\n */\n\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\nMethod.fromJSON = function fromJSON(name, json) {\n  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"type\", this.type !== \"rpc\" && /* istanbul ignore next */this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined, \"parsedOptions\", this.parsedOptions]);\n};\n\n/**\r\n * @override\r\n */\nMethod.prototype.resolve = function resolve() {\n  /* istanbul ignore if */\n  if (this.resolved) return this;\n  this.resolvedRequestType = this.parent.lookupType(this.requestType);\n  this.resolvedResponseType = this.parent.lookupType(this.responseType);\n  return ReflectionObject.prototype.resolve.call(this);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/method.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/namespace.js":
/*!**************************************************!*\
  !*** ./node_modules/protobufjs/src/namespace.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\");\nvar Type,\n  // cyclic\n  Service, Enum;\n\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\n\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n  return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\nfunction arrayToJSON(array, toJSONOptions) {\n  if (!(array && array.length)) return undefined;\n  var obj = {};\n  for (var i = 0; i < array.length; ++i) obj[array[i].name] = array[i].toJSON(toJSONOptions);\n  return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n  return false;\n};\n\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (reserved[i] === name) return true;\n  return false;\n};\n\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\nfunction Namespace(name, options) {\n  ReflectionObject.call(this, name, options);\n\n  /**\r\n   * Nested objects by name.\r\n   * @type {Object.<string,ReflectionObject>|undefined}\r\n   */\n  this.nested = undefined; // toJSON\n\n  /**\r\n   * Cached nested objects as an array.\r\n   * @type {ReflectionObject[]|null}\r\n   * @private\r\n   */\n  this._nestedArray = null;\n}\nfunction clearCache(namespace) {\n  namespace._nestedArray = null;\n  return namespace;\n}\n\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n  get: function () {\n    return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n  }\n});\n\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\n\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\n\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\r\n */\n\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n  return util.toObject([\"options\", this.options, \"nested\", arrayToJSON(this.nestedArray, toJSONOptions)]);\n};\n\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n  var ns = this;\n  /* istanbul ignore else */\n  if (nestedJson) {\n    for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n      nested = nestedJson[names[i]];\n      ns.add(\n      // most to least likely\n      (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n  }\n  return this;\n};\n\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\nNamespace.prototype.get = function get(name) {\n  return this.nested && this.nested[name] || null;\n};\n\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n  if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n  throw Error(\"no such enum: \" + name);\n};\n\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\nNamespace.prototype.add = function add(object) {\n  if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError(\"object must be a valid nested object\");\n  if (!this.nested) this.nested = {};else {\n    var prev = this.get(object.name);\n    if (prev) {\n      if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n        // replace plain namespace but keep existing nested elements and options\n        var nested = prev.nestedArray;\n        for (var i = 0; i < nested.length; ++i) object.add(nested[i]);\n        this.remove(prev);\n        if (!this.nested) this.nested = {};\n        object.setOptions(prev.options, true);\n      } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    }\n  }\n  this.nested[object.name] = object;\n  object.onAdd(this);\n  return clearCache(this);\n};\n\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\nNamespace.prototype.remove = function remove(object) {\n  if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n  if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n  delete this.nested[object.name];\n  if (!Object.keys(this.nested).length) this.nested = undefined;\n  object.onRemove(this);\n  return clearCache(this);\n};\n\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\nNamespace.prototype.define = function define(path, json) {\n  if (util.isString(path)) path = path.split(\".\");else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n  if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n  var ptr = this;\n  while (path.length > 0) {\n    var part = path.shift();\n    if (ptr.nested && ptr.nested[part]) {\n      ptr = ptr.nested[part];\n      if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n    } else ptr.add(ptr = new Namespace(part));\n  }\n  if (json) ptr.addJSON(json);\n  return ptr;\n};\n\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n  var nested = this.nestedArray,\n    i = 0;\n  while (i < nested.length) if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();\n  return this.resolve();\n};\n\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n  /* istanbul ignore next */\n  if (typeof filterTypes === \"boolean\") {\n    parentAlreadyChecked = filterTypes;\n    filterTypes = undefined;\n  } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];\n  if (util.isString(path) && path.length) {\n    if (path === \".\") return this.root;\n    path = path.split(\".\");\n  } else if (!path.length) return this;\n\n  // Start at root if path is absolute\n  if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n\n  // Test if the first part matches any nested object, and if so, traverse if path contains more\n  var found = this.get(path[0]);\n  if (found) {\n    if (path.length === 1) {\n      if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;\n    } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;\n\n    // Otherwise try each nested namespace\n  } else for (var i = 0; i < this.nestedArray.length; ++i) if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;\n\n  // If there hasn't been a match, try again at the parent\n  if (this.parent === null || parentAlreadyChecked) return null;\n  return this.parent.lookup(path, filterTypes);\n};\n\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n  var found = this.lookup(path, [Type]);\n  if (!found) throw Error(\"no such type: \" + path);\n  return found;\n};\n\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n  var found = this.lookup(path, [Enum]);\n  if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n  var found = this.lookup(path, [Type, Enum]);\n  if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n  var found = this.lookup(path, [Service]);\n  if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n  return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function (Type_, Service_, Enum_) {\n  Type = Type_;\n  Service = Service_;\n  Enum = Enum_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/namespace.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/object.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/object.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Root; // cyclic\n\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n\n  /**\r\n   * Options.\r\n   * @type {Object.<string,*>|undefined}\r\n   */\n  this.options = options; // toJSON\n\n  /**\r\n   * Parsed Options.\r\n   * @type {Array.<Object.<string,*>>|undefined}\r\n   */\n  this.parsedOptions = null;\n\n  /**\r\n   * Unique name within its namespace.\r\n   * @type {string}\r\n   */\n  this.name = name;\n\n  /**\r\n   * Parent namespace.\r\n   * @type {Namespace|null}\r\n   */\n  this.parent = null;\n\n  /**\r\n   * Whether already resolved or not.\r\n   * @type {boolean}\r\n   */\n  this.resolved = false;\n\n  /**\r\n   * Comment text, if any.\r\n   * @type {string|null}\r\n   */\n  this.comment = null;\n\n  /**\r\n   * Defining file name.\r\n   * @type {string|null}\r\n   */\n  this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\r\n   * Reference to the root namespace.\r\n   * @name ReflectionObject#root\r\n   * @type {Root}\r\n   * @readonly\r\n   */\n  root: {\n    get: function () {\n      var ptr = this;\n      while (ptr.parent !== null) ptr = ptr.parent;\n      return ptr;\n    }\n  },\n  /**\r\n   * Full name including leading dot.\r\n   * @name ReflectionObject#fullName\r\n   * @type {string}\r\n   * @readonly\r\n   */\n  fullName: {\n    get: function () {\n      var path = [this.name],\n        ptr = this.parent;\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n      return path.join(\".\");\n    }\n  }\n});\n\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */function toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n  return this;\n};\n\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n\n/**\r\n * Sets a parsed option.\r\n * @param {string} name parsed Option name\r\n * @param {*} value Option value\r\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n  if (!this.parsedOptions) {\n    this.parsedOptions = [];\n  }\n  var parsedOptions = this.parsedOptions;\n  if (propName) {\n    // If setting a sub property of an option then try to merge it\n    // with an existing option\n    var opt = parsedOptions.find(function (opt) {\n      return Object.prototype.hasOwnProperty.call(opt, name);\n    });\n    if (opt) {\n      // If we found an existing option - just merge the property value\n      var newValue = opt[name];\n      util.setProperty(newValue, propName, value);\n    } else {\n      // otherwise, create a new option, set it's property and add it to the list\n      opt = {};\n      opt[name] = util.setProperty({}, propName, value);\n      parsedOptions.push(opt);\n    }\n  } else {\n    // Always create a new option when setting the value of the option itself\n    var newOpt = {};\n    newOpt[name] = value;\n    parsedOptions.push(newOpt);\n  }\n  return this;\n};\n\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);\n  return this;\n};\n\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n    fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/object.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/oneof.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/oneof.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = __webpack_require__(/*! ./object */ \"(ssr)/./node_modules/protobufjs/src/object.js\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\n\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\nfunction OneOf(name, fieldNames, options, comment) {\n  if (!Array.isArray(fieldNames)) {\n    options = fieldNames;\n    fieldNames = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n\n  /* istanbul ignore if */\n  if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n\n  /**\r\n   * Field names that belong to this oneof.\r\n   * @type {string[]}\r\n   */\n  this.oneof = fieldNames || []; // toJSON, marker\n\n  /**\r\n   * Fields that belong to this oneof as an array for iteration.\r\n   * @type {Field[]}\r\n   * @readonly\r\n   */\n  this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n  /**\r\n   * Comment for this field.\r\n   * @type {string|null}\r\n   */\n  this.comment = comment;\n}\n\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\n\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n  return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"oneof\", this.oneof, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\nfunction addFieldsToParent(oneof) {\n  if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\nOneOf.prototype.add = function add(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n  this.oneof.push(field.name);\n  this.fieldsArray.push(field);\n  field.partOf = this; // field.parent remains null\n  addFieldsToParent(this);\n  return this;\n};\n\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\nOneOf.prototype.remove = function remove(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  var index = this.fieldsArray.indexOf(field);\n\n  /* istanbul ignore if */\n  if (index < 0) throw Error(field + \" is not a member of \" + this);\n  this.fieldsArray.splice(index, 1);\n  index = this.oneof.indexOf(field.name);\n\n  /* istanbul ignore else */\n  if (index > -1)\n    // theoretical\n    this.oneof.splice(index, 1);\n  field.partOf = null;\n  return this;\n};\n\n/**\r\n * @override\r\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n  ReflectionObject.prototype.onAdd.call(this, parent);\n  var self = this;\n  // Collect present fields\n  for (var i = 0; i < this.oneof.length; ++i) {\n    var field = parent.get(this.oneof[i]);\n    if (field && !field.partOf) {\n      field.partOf = self;\n      self.fieldsArray.push(field);\n    }\n  }\n  // Add not yet present fields\n  addFieldsToParent(this);\n};\n\n/**\r\n * @override\r\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n  for (var i = 0, field; i < this.fieldsArray.length; ++i) if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n  ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\nOneOf.d = function decorateOneOf() {\n  var fieldNames = new Array(arguments.length),\n    index = 0;\n  while (index < arguments.length) fieldNames[index] = arguments[index++];\n  return function oneOfDecorator(prototype, oneofName) {\n    util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n    Object.defineProperty(prototype, oneofName, {\n      get: util.oneOfGetter(fieldNames),\n      set: util.oneOfSetter(fieldNames)\n    });\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/oneof.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/parse.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/parse.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n  keepCase: false\n};\nvar tokenize = __webpack_require__(/*! ./tokenize */ \"(ssr)/./node_modules/protobufjs/src/tokenize.js\"),\n  Root = __webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"),\n  Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\"),\n  Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"),\n  Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"),\n  types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/protobufjs/src/types.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar base10Re = /^[1-9][0-9]*$/,\n  base10NegRe = /^-?[1-9][0-9]*$/,\n  base16Re = /^0[x][0-9a-fA-F]+$/,\n  base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n  base8Re = /^0[0-7]+$/,\n  base8NegRe = /^-?0[0-7]+$/,\n  numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n  nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n  typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n  fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\n\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\r\n */\n\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\n\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\nfunction parse(source, root, options) {\n  /* eslint-disable callback-return */\n  if (!(root instanceof Root)) {\n    options = root;\n    root = new Root();\n  }\n  if (!options) options = parse.defaults;\n  var preferTrailingComment = options.preferTrailingComment || false;\n  var tn = tokenize(source, options.alternateCommentMode || false),\n    next = tn.next,\n    push = tn.push,\n    peek = tn.peek,\n    skip = tn.skip,\n    cmnt = tn.cmnt;\n  var head = true,\n    pkg,\n    imports,\n    weakImports,\n    syntax,\n    isProto3 = false;\n  var ptr = root;\n  var applyCase = options.keepCase ? function (name) {\n    return name;\n  } : util.camelCase;\n\n  /* istanbul ignore next */\n  function illegal(token, name, insideTryCatch) {\n    var filename = parse.filename;\n    if (!insideTryCatch) parse.filename = null;\n    return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n  }\n  function readString() {\n    var values = [],\n      token;\n    do {\n      /* istanbul ignore if */\n      if ((token = next()) !== \"\\\"\" && token !== \"'\") throw illegal(token);\n      values.push(next());\n      skip(token);\n      token = peek();\n    } while (token === \"\\\"\" || token === \"'\");\n    return values.join(\"\");\n  }\n  function readValue(acceptTypeRef) {\n    var token = next();\n    switch (token) {\n      case \"'\":\n      case \"\\\"\":\n        push(token);\n        return readString();\n      case \"true\":\n      case \"TRUE\":\n        return true;\n      case \"false\":\n      case \"FALSE\":\n        return false;\n    }\n    try {\n      return parseNumber(token, /* insideTryCatch */true);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (acceptTypeRef && typeRefRe.test(token)) return token;\n\n      /* istanbul ignore next */\n      throw illegal(token, \"value\");\n    }\n  }\n  function readRanges(target, acceptStrings) {\n    var token, start;\n    do {\n      if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\")) target.push(readString());else target.push([start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start]);\n    } while (skip(\",\", true));\n    var dummy = {\n      options: undefined\n    };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseRange_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseRange_line() {\n      parseInlineOptions(dummy); // skip\n    });\n  }\n\n  function parseNumber(token, insideTryCatch) {\n    var sign = 1;\n    if (token.charAt(0) === \"-\") {\n      sign = -1;\n      token = token.substring(1);\n    }\n    switch (token) {\n      case \"inf\":\n      case \"INF\":\n      case \"Inf\":\n        return sign * Infinity;\n      case \"nan\":\n      case \"NAN\":\n      case \"Nan\":\n      case \"NaN\":\n        return NaN;\n      case \"0\":\n        return 0;\n    }\n    if (base10Re.test(token)) return sign * parseInt(token, 10);\n    if (base16Re.test(token)) return sign * parseInt(token, 16);\n    if (base8Re.test(token)) return sign * parseInt(token, 8);\n\n    /* istanbul ignore else */\n    if (numberRe.test(token)) return sign * parseFloat(token);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"number\", insideTryCatch);\n  }\n  function parseId(token, acceptNegative) {\n    switch (token) {\n      case \"max\":\n      case \"MAX\":\n      case \"Max\":\n        return 536870911;\n      case \"0\":\n        return 0;\n    }\n\n    /* istanbul ignore if */\n    if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n    if (base10NegRe.test(token)) return parseInt(token, 10);\n    if (base16NegRe.test(token)) return parseInt(token, 16);\n\n    /* istanbul ignore else */\n    if (base8NegRe.test(token)) return parseInt(token, 8);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"id\");\n  }\n  function parsePackage() {\n    /* istanbul ignore if */\n    if (pkg !== undefined) throw illegal(\"package\");\n    pkg = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n    ptr = ptr.define(pkg);\n    skip(\";\");\n  }\n  function parseImport() {\n    var token = peek();\n    var whichImports;\n    switch (token) {\n      case \"weak\":\n        whichImports = weakImports || (weakImports = []);\n        next();\n        break;\n      case \"public\":\n        next();\n      // eslint-disable-next-line no-fallthrough\n      default:\n        whichImports = imports || (imports = []);\n        break;\n    }\n    token = readString();\n    skip(\";\");\n    whichImports.push(token);\n  }\n  function parseSyntax() {\n    skip(\"=\");\n    syntax = readString();\n    isProto3 = syntax === \"proto3\";\n\n    /* istanbul ignore if */\n    if (!isProto3 && syntax !== \"proto2\") throw illegal(syntax, \"syntax\");\n    skip(\";\");\n  }\n  function parseCommon(parent, token) {\n    switch (token) {\n      case \"option\":\n        parseOption(parent, token);\n        skip(\";\");\n        return true;\n      case \"message\":\n        parseType(parent, token);\n        return true;\n      case \"enum\":\n        parseEnum(parent, token);\n        return true;\n      case \"service\":\n        parseService(parent, token);\n        return true;\n      case \"extend\":\n        parseExtension(parent, token);\n        return true;\n    }\n    return false;\n  }\n  function ifBlock(obj, fnIf, fnElse) {\n    var trailingLine = tn.line;\n    if (obj) {\n      if (typeof obj.comment !== \"string\") {\n        obj.comment = cmnt(); // try block-type comment\n      }\n\n      obj.filename = parse.filename;\n    }\n    if (skip(\"{\", true)) {\n      var token;\n      while ((token = next()) !== \"}\") fnIf(token);\n      skip(\";\", true);\n    } else {\n      if (fnElse) fnElse();\n      skip(\";\");\n      if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n    }\n  }\n\n  function parseType(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n    var type = new Type(token);\n    ifBlock(type, function parseType_block(token) {\n      if (parseCommon(type, token)) return;\n      switch (token) {\n        case \"map\":\n          parseMapField(type, token);\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"oneof\":\n          parseOneOf(type, token);\n          break;\n        case \"extensions\":\n          readRanges(type.extensions || (type.extensions = []));\n          break;\n        case \"reserved\":\n          readRanges(type.reserved || (type.reserved = []), true);\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(type, \"optional\");\n          break;\n      }\n    });\n    parent.add(type);\n  }\n  function parseField(parent, rule, extend) {\n    var type = next();\n    if (type === \"group\") {\n      parseGroup(parent, rule);\n      return;\n    }\n    // Type names can consume multiple tokens, in multiple variants:\n    //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    // Keep reading tokens until we get a type name with no period at the end,\n    // and the next token does not start with a period.\n    while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n      type += next();\n    }\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    name = applyCase(name);\n    skip(\"=\");\n    var field = new Field(name, parseId(next()), type, rule, extend);\n    ifBlock(field, function parseField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseField_line() {\n      parseInlineOptions(field);\n    });\n    if (rule === \"proto3_optional\") {\n      // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n      var oneof = new OneOf(\"_\" + name);\n      field.setOption(\"proto3_optional\", true);\n      oneof.add(field);\n      parent.add(oneof);\n    } else {\n      parent.add(field);\n    }\n\n    // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n    // parsing proto2 descriptors without the option, where applicable. This must be done for\n    // all known packable types and anything that could be an enum (= is not a basic type).\n    if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption(\"packed\", false, /* ifNotSet */true);\n  }\n  function parseGroup(parent, rule) {\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    var fieldName = util.lcFirst(name);\n    if (name === fieldName) name = util.ucFirst(name);\n    skip(\"=\");\n    var id = parseId(next());\n    var type = new Type(name);\n    type.group = true;\n    var field = new Field(fieldName, id, name, rule);\n    field.filename = parse.filename;\n    ifBlock(type, function parseGroup_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(type, token);\n          skip(\";\");\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"message\":\n          parseType(type, token);\n          break;\n        case \"enum\":\n          parseEnum(type, token);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw illegal(token);\n        // there are no groups with proto3 semantics\n      }\n    });\n\n    parent.add(type).add(field);\n  }\n  function parseMapField(parent) {\n    skip(\"<\");\n    var keyType = next();\n\n    /* istanbul ignore if */\n    if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n    skip(\",\");\n    var valueType = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n    skip(\">\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    skip(\"=\");\n    var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n    ifBlock(field, function parseMapField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseMapField_line() {\n      parseInlineOptions(field);\n    });\n    parent.add(field);\n  }\n  function parseOneOf(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var oneof = new OneOf(applyCase(token));\n    ifBlock(oneof, function parseOneOf_block(token) {\n      if (token === \"option\") {\n        parseOption(oneof, token);\n        skip(\";\");\n      } else {\n        push(token);\n        parseField(oneof, \"optional\");\n      }\n    });\n    parent.add(oneof);\n  }\n  function parseEnum(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var enm = new Enum(token);\n    ifBlock(enm, function parseEnum_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(enm, token);\n          skip(\";\");\n          break;\n        case \"reserved\":\n          readRanges(enm.reserved || (enm.reserved = []), true);\n          break;\n        default:\n          parseEnumValue(enm, token);\n      }\n    });\n    parent.add(enm);\n  }\n  function parseEnumValue(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token)) throw illegal(token, \"name\");\n    skip(\"=\");\n    var value = parseId(next(), true),\n      dummy = {\n        options: undefined\n      };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseEnumValue_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseEnumValue_line() {\n      parseInlineOptions(dummy); // skip\n    });\n\n    parent.add(token, value, dummy.comment, dummy.options);\n  }\n  function parseOption(parent, token) {\n    var isCustom = skip(\"(\", true);\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token;\n    var option = name;\n    var propName;\n    if (isCustom) {\n      skip(\")\");\n      name = \"(\" + name + \")\";\n      option = name;\n      token = peek();\n      if (fqTypeRefRe.test(token)) {\n        propName = token.slice(1); //remove '.' before property name\n        name += token;\n        next();\n      }\n    }\n    skip(\"=\");\n    var optionValue = parseOptionValue(parent, name);\n    setParsedOption(parent, option, optionValue, propName);\n  }\n  function parseOptionValue(parent, name) {\n    // { a: \"foo\" b { c: \"bar\" } }\n    if (skip(\"{\", true)) {\n      var objectResult = {};\n      while (!skip(\"}\", true)) {\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next())) {\n          throw illegal(token, \"name\");\n        }\n        if (token === null) {\n          throw illegal(token, \"end of input\");\n        }\n        var value;\n        var propName = token;\n        skip(\":\", true);\n        if (peek() === \"{\") value = parseOptionValue(parent, name + \".\" + token);else if (peek() === \"[\") {\n          // option (my_option) = {\n          //     repeated_value: [ \"foo\", \"bar\" ]\n          // };\n          value = [];\n          var lastValue;\n          if (skip(\"[\", true)) {\n            do {\n              lastValue = readValue(true);\n              value.push(lastValue);\n            } while (skip(\",\", true));\n            skip(\"]\");\n            if (typeof lastValue !== \"undefined\") {\n              setOption(parent, name + \".\" + token, lastValue);\n            }\n          }\n        } else {\n          value = readValue(true);\n          setOption(parent, name + \".\" + token, value);\n        }\n        var prevValue = objectResult[propName];\n        if (prevValue) value = [].concat(prevValue).concat(value);\n        objectResult[propName] = value;\n\n        // Semicolons and commas can be optional\n        skip(\",\", true);\n        skip(\";\", true);\n      }\n      return objectResult;\n    }\n    var simpleValue = readValue(true);\n    setOption(parent, name, simpleValue);\n    return simpleValue;\n    // Does not enforce a delimiter to be universal\n  }\n\n  function setOption(parent, name, value) {\n    if (parent.setOption) parent.setOption(name, value);\n  }\n  function setParsedOption(parent, name, value, propName) {\n    if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n  }\n  function parseInlineOptions(parent) {\n    if (skip(\"[\", true)) {\n      do {\n        parseOption(parent, \"option\");\n      } while (skip(\",\", true));\n      skip(\"]\");\n    }\n    return parent;\n  }\n  function parseService(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n    var service = new Service(token);\n    ifBlock(service, function parseService_block(token) {\n      if (parseCommon(service, token)) return;\n\n      /* istanbul ignore else */\n      if (token === \"rpc\") parseMethod(service, token);else throw illegal(token);\n    });\n    parent.add(service);\n  }\n  function parseMethod(parent, token) {\n    // Get the comment of the preceding line now (if one exists) in case the\n    // method is defined across multiple lines.\n    var commentText = cmnt();\n    var type = token;\n\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token,\n      requestType,\n      requestStream,\n      responseType,\n      responseStream;\n    skip(\"(\");\n    if (skip(\"stream\", true)) requestStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    requestType = token;\n    skip(\")\");\n    skip(\"returns\");\n    skip(\"(\");\n    if (skip(\"stream\", true)) responseStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    responseType = token;\n    skip(\")\");\n    var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n    method.comment = commentText;\n    ifBlock(method, function parseMethod_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(method, token);\n        skip(\";\");\n      } else throw illegal(token);\n    });\n    parent.add(method);\n  }\n  function parseExtension(parent, token) {\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n    var reference = token;\n    ifBlock(null, function parseExtension_block(token) {\n      switch (token) {\n        case \"required\":\n        case \"repeated\":\n          parseField(parent, token, reference);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(parent, \"proto3_optional\", reference);\n          } else {\n            parseField(parent, \"optional\", reference);\n          }\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(parent, \"optional\", reference);\n          break;\n      }\n    });\n  }\n  var token;\n  while ((token = next()) !== null) {\n    switch (token) {\n      case \"package\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parsePackage();\n        break;\n      case \"import\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseImport();\n        break;\n      case \"syntax\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseSyntax();\n        break;\n      case \"option\":\n        parseOption(ptr, token);\n        skip(\";\");\n        break;\n      default:\n        /* istanbul ignore else */\n        if (parseCommon(ptr, token)) {\n          head = false;\n          continue;\n        }\n\n        /* istanbul ignore next */\n        throw illegal(token);\n    }\n  }\n  parse.filename = null;\n  return {\n    \"package\": pkg,\n    \"imports\": imports,\n    weakImports: weakImports,\n    syntax: syntax,\n    root: root\n  };\n}\n\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/reader.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Reader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferReader; // cyclic\n\nvar LongBits = util.LongBits,\n  utf8 = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n  return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\nfunction Reader(buffer) {\n  /**\r\n   * Read buffer.\r\n   * @type {Uint8Array}\r\n   */\n  this.buf = buffer;\n\n  /**\r\n   * Read buffer position.\r\n   * @type {number}\r\n   */\n  this.pos = 0;\n\n  /**\r\n   * Read buffer length.\r\n   * @type {number}\r\n   */\n  this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n  if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */ : function create_array(buffer) {\n  if (Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n};\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup(buffer) {\n    return (Reader.create = function create_buffer(buffer) {\n      return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n      /* istanbul ignore next */ : create_array(buffer);\n    })(buffer);\n  }\n  /* istanbul ignore next */ : create_array;\n};\n\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\nReader.create = create();\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.uint32 = function read_uint32_setup() {\n  var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n  return function read_uint32() {\n    value = (this.buf[this.pos] & 127) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n\n    /* istanbul ignore if */\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len;\n      throw indexOutOfRange(this, 10);\n    }\n    return value;\n  };\n}();\n\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\nReader.prototype.int32 = function read_int32() {\n  return this.uint32() | 0;\n};\n\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\nReader.prototype.sint32 = function read_sint32() {\n  var value = this.uint32();\n  return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n  // tends to deopt with local vars for octet etc.\n  var bits = new LongBits(0, 0);\n  var i = 0;\n  if (this.len - this.pos > 4) {\n    // fast route (lo)\n    for (; i < 4; ++i) {\n      // 1st..4th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 5th\n    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n    if (this.buf[this.pos++] < 128) return bits;\n    i = 0;\n  } else {\n    for (; i < 3; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 1st..3th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 4th\n    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n    return bits;\n  }\n  if (this.len - this.pos > 4) {\n    // fast route (hi)\n    for (; i < 5; ++i) {\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  } else {\n    for (; i < 5; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  }\n  /* istanbul ignore next */\n  throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\nReader.prototype.bool = function read_bool() {\n  return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n  // note that this uses `end`, not `pos`\n  return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\nReader.prototype.fixed32 = function read_fixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64( /* this: Reader */\n) {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\n\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.float = function read_float() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readFloatLE(this.buf, this.pos);\n  this.pos += 4;\n  return value;\n};\n\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\nReader.prototype.double = function read_double() {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readDoubleLE(this.buf, this.pos);\n  this.pos += 8;\n  return value;\n};\n\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\nReader.prototype.bytes = function read_bytes() {\n  var length = this.uint32(),\n    start = this.pos,\n    end = this.pos + length;\n\n  /* istanbul ignore if */\n  if (end > this.len) throw indexOutOfRange(this, length);\n  this.pos += length;\n  if (Array.isArray(this.buf))\n    // plain array\n    return this.buf.slice(start, end);\n  if (start === end) {\n    // fix for IE 10/Win8 and others' subarray returning array of size 1\n    var nativeBuffer = util.Buffer;\n    return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n  }\n  return this._slice.call(this.buf, start, end);\n};\n\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\nReader.prototype.string = function read_string() {\n  var bytes = this.bytes();\n  return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\nReader.prototype.skip = function skip(length) {\n  if (typeof length === \"number\") {\n    /* istanbul ignore if */\n    if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n  } else {\n    do {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n    } while (this.buf[this.pos++] & 128);\n  }\n  return this;\n};\n\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\nReader.prototype.skipType = function (wireType) {\n  switch (wireType) {\n    case 0:\n      this.skip();\n      break;\n    case 1:\n      this.skip(8);\n      break;\n    case 2:\n      this.skip(this.uint32());\n      break;\n    case 3:\n      while ((wireType = this.uint32() & 7) !== 4) {\n        this.skipType(wireType);\n      }\n      break;\n    case 5:\n      this.skip(4);\n      break;\n\n    /* istanbul ignore next */\n    default:\n      throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  }\n  return this;\n};\nReader._configure = function (BufferReader_) {\n  BufferReader = BufferReader_;\n  Reader.create = create();\n  BufferReader._configure();\n  var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n  util.merge(Reader.prototype, {\n    int64: function read_int64() {\n      return readLongVarint.call(this)[fn](false);\n    },\n    uint64: function read_uint64() {\n      return readLongVarint.call(this)[fn](true);\n    },\n    sint64: function read_sint64() {\n      return readLongVarint.call(this).zzDecode()[fn](false);\n    },\n    fixed64: function read_fixed64() {\n      return readFixed64.call(this)[fn](true);\n    },\n    sfixed64: function read_sfixed64() {\n      return readFixed64.call(this)[fn](false);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/reader_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/reader_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\nfunction BufferReader(buffer) {\n  Reader.call(this, buffer);\n\n  /**\r\n   * Read buffer.\r\n   * @name BufferReader#buf\r\n   * @type {Buffer}\r\n   */\n}\n\nBufferReader._configure = function () {\n  /* istanbul ignore else */\n  if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n/**\r\n * @override\r\n */\nBufferReader.prototype.string = function read_string_buffer() {\n  var len = this.uint32(); // modifies pos\n  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\n\nBufferReader._configure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcmVhZGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxtQkFBTyxDQUFDLDJFQUFnQixDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNGLFlBQVlBLENBQUNRLE1BQU0sRUFBRTtFQUMxQlAsTUFBTSxDQUFDUSxJQUFJLENBQUMsSUFBSSxFQUFFRCxNQUFNLENBQUM7O0VBRXpCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQVIsWUFBWSxDQUFDVSxVQUFVLEdBQUcsWUFBWTtFQUNsQztFQUNBLElBQUlILElBQUksQ0FBQ0ksTUFBTSxFQUNYWCxZQUFZLENBQUNHLFNBQVMsQ0FBQ1MsTUFBTSxHQUFHTCxJQUFJLENBQUNJLE1BQU0sQ0FBQ1IsU0FBUyxDQUFDVSxLQUFLO0FBQ25FLENBQUM7O0FBR0Q7QUFDQTtBQUNBO0FBQ0FiLFlBQVksQ0FBQ0csU0FBUyxDQUFDVyxNQUFNLEdBQUcsU0FBU0Msa0JBQWtCQSxDQUFBLEVBQUc7RUFDMUQsSUFBSUMsR0FBRyxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pCLE9BQU8sSUFBSSxDQUFDQyxHQUFHLENBQUNDLFNBQVMsR0FDbkIsSUFBSSxDQUFDRCxHQUFHLENBQUNDLFNBQVMsQ0FBQyxJQUFJLENBQUNDLEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsSUFBSSxDQUFDRixHQUFHLEdBQUdKLEdBQUcsRUFBRSxJQUFJLENBQUNBLEdBQUcsQ0FBQyxDQUFDLEdBQzNFLElBQUksQ0FBQ0UsR0FBRyxDQUFDSyxRQUFRLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQ0gsR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxJQUFJLENBQUNGLEdBQUcsR0FBR0osR0FBRyxFQUFFLElBQUksQ0FBQ0EsR0FBRyxDQUFDLENBQUM7QUFDN0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFoQixZQUFZLENBQUNVLFVBQVUsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1maXJlYmFzZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzPzUwODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyUmVhZGVyO1xyXG5cclxuLy8gZXh0ZW5kcyBSZWFkZXJcclxudmFyIFJlYWRlciA9IHJlcXVpcmUoXCIuL3JlYWRlclwiKTtcclxuKEJ1ZmZlclJlYWRlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFJlYWRlci5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IEJ1ZmZlclJlYWRlcjtcclxuXHJcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgYSBuZXcgYnVmZmVyIHJlYWRlciBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxyXG4gKiBAZXh0ZW5kcyBSZWFkZXJcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQnVmZmVyIHRvIHJlYWQgZnJvbVxyXG4gKi9cclxuZnVuY3Rpb24gQnVmZmVyUmVhZGVyKGJ1ZmZlcikge1xyXG4gICAgUmVhZGVyLmNhbGwodGhpcywgYnVmZmVyKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYnVmZmVyLlxyXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxyXG4gICAgICogQHR5cGUge0J1ZmZlcn1cclxuICAgICAqL1xyXG59XHJcblxyXG5CdWZmZXJSZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAodXRpbC5CdWZmZXIpXHJcbiAgICAgICAgQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBvdmVycmlkZVxyXG4gKi9cclxuQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiByZWFkX3N0cmluZ19idWZmZXIoKSB7XHJcbiAgICB2YXIgbGVuID0gdGhpcy51aW50MzIoKTsgLy8gbW9kaWZpZXMgcG9zXHJcbiAgICByZXR1cm4gdGhpcy5idWYudXRmOFNsaWNlXHJcbiAgICAgICAgPyB0aGlzLmJ1Zi51dGY4U2xpY2UodGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSlcclxuICAgICAgICA6IHRoaXMuYnVmLnRvU3RyaW5nKFwidXRmLThcIiwgdGhpcy5wb3MsIHRoaXMucG9zID0gTWF0aC5taW4odGhpcy5wb3MgKyBsZW4sIHRoaXMubGVuKSk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVhZHMgYSBzZXF1ZW5jZSBvZiBieXRlcyBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cclxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBWYWx1ZSByZWFkXHJcbiAqL1xyXG5cclxuQnVmZmVyUmVhZGVyLl9jb25maWd1cmUoKTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCdWZmZXJSZWFkZXIiLCJSZWFkZXIiLCJyZXF1aXJlIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ1dGlsIiwiYnVmZmVyIiwiY2FsbCIsIl9jb25maWd1cmUiLCJCdWZmZXIiLCJfc2xpY2UiLCJzbGljZSIsInN0cmluZyIsInJlYWRfc3RyaW5nX2J1ZmZlciIsImxlbiIsInVpbnQzMiIsImJ1ZiIsInV0ZjhTbGljZSIsInBvcyIsIk1hdGgiLCJtaW4iLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/root.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/root.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar Type,\n  // cyclic\n  parse,\n  // might be excluded\n  common; // \"\n\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n\n  /**\r\n   * Deferred extension fields.\r\n   * @type {Field[]}\r\n   */\n  this.deferred = [];\n\n  /**\r\n   * Resolved file names of loaded files.\r\n   * @type {string[]}\r\n   */\n  this.files = [];\n}\n\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\r\n * Fetch content from file path or url\r\n * This method exists so you can override it with your own logic.\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n\n  // Finishes loading by calling the callback (exactly once)\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    if (sync) throw err;\n    var cb = callback;\n    callback = null;\n    cb(err, root);\n  }\n\n  // Bundled definition existence checking\n  function getBundledFileName(filename) {\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) return altname;\n    }\n    return null;\n  }\n\n  // Processes a single file\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n          resolved,\n          i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n    if (!sync && !queued) finish(null, self); // only once anyway\n  }\n\n  // Fetches a single file\n  function fetch(filename, weak) {\n    filename = getBundledFileName(filename) || filename;\n\n    // Skip if already loaded / attempted\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename);\n\n    // Shortcut bundled definitions\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    }\n\n    // Otherwise fetch from disk or network\n    if (sync) {\n      var source;\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n      process(filename, source);\n    } else {\n      ++queued;\n      self.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n        if (!callback) return; // terminated meanwhile\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued)\n            // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n        process(filename, source);\n      });\n    }\n  }\n  var queued = 0;\n\n  // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n  if (util.isString(filename)) filename = [filename];\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n\n/**\r\n * @override\r\n */\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    //do not allow to extend same field twice to prevent the error\n    if (extendedType.get(sisterField.name)) {\n      return true;\n    }\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n  return false;\n}\n\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf)) /* everything else is a namespace */{\n      if (object instanceof Type)\n        // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n      for (var j = 0; j < /* initializes */object.nestedArray.length; ++j)\n      // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n  // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field */object.extend !== undefined) {\n      if ( /* already handled */object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i < /* initializes */object.nestedArray.length; ++i)\n    // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7O0FBRXJCO0FBQ0EsSUFBSUMsU0FBUyxHQUFHQyxtQkFBTyxDQUFDLHFFQUFhLENBQUM7QUFDdEMsQ0FBQyxDQUFDRixJQUFJLENBQUNHLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNKLFNBQVMsQ0FBQ0UsU0FBUyxDQUFDLEVBQUVHLFdBQVcsR0FBR04sSUFBSSxFQUFFTyxTQUFTLEdBQUcsTUFBTTtBQUU3RixJQUFJQyxLQUFLLEdBQUtOLG1CQUFPLENBQUMsNkRBQVMsQ0FBQztFQUM1Qk8sSUFBSSxHQUFNUCxtQkFBTyxDQUFDLDJEQUFRLENBQUM7RUFDM0JRLEtBQUssR0FBS1IsbUJBQU8sQ0FBQyw2REFBUyxDQUFDO0VBQzVCUyxJQUFJLEdBQU1ULG1CQUFPLENBQUMsMkRBQVEsQ0FBQztBQUUvQixJQUFJVSxJQUFJO0VBQUk7RUFDUkMsS0FBSztFQUFHO0VBQ1JDLE1BQU0sQ0FBQyxDQUFDOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU2QsSUFBSUEsQ0FBQ2UsT0FBTyxFQUFFO0VBQ25CZCxTQUFTLENBQUNlLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFRCxPQUFPLENBQUM7O0VBRWpDO0FBQ0o7QUFDQTtBQUNBO0VBQ0ksSUFBSSxDQUFDRSxRQUFRLEdBQUcsRUFBRTs7RUFFbEI7QUFDSjtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBbEIsSUFBSSxDQUFDbUIsUUFBUSxHQUFHLFNBQVNBLFFBQVFBLENBQUNDLElBQUksRUFBRUMsSUFBSSxFQUFFO0VBQzFDLElBQUksQ0FBQ0EsSUFBSSxFQUNMQSxJQUFJLEdBQUcsSUFBSXJCLElBQUksQ0FBQyxDQUFDO0VBQ3JCLElBQUlvQixJQUFJLENBQUNMLE9BQU8sRUFDWk0sSUFBSSxDQUFDQyxVQUFVLENBQUNGLElBQUksQ0FBQ0wsT0FBTyxDQUFDO0VBQ2pDLE9BQU9NLElBQUksQ0FBQ0UsT0FBTyxDQUFDSCxJQUFJLENBQUNJLE1BQU0sQ0FBQztBQUNwQyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXhCLElBQUksQ0FBQ0csU0FBUyxDQUFDc0IsV0FBVyxHQUFHZCxJQUFJLENBQUNlLElBQUksQ0FBQ0MsT0FBTzs7QUFFOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBM0IsSUFBSSxDQUFDRyxTQUFTLENBQUN5QixLQUFLLEdBQUdqQixJQUFJLENBQUNpQixLQUFLOztBQUVqQztBQUNBO0FBQ0EsU0FBU0MsSUFBSUEsQ0FBQSxFQUFHLENBQUMsQ0FBQyxDQUFDOztBQUVuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBN0IsSUFBSSxDQUFDRyxTQUFTLENBQUMyQixJQUFJLEdBQUcsU0FBU0EsSUFBSUEsQ0FBQ0MsUUFBUSxFQUFFaEIsT0FBTyxFQUFFaUIsUUFBUSxFQUFFO0VBQzdELElBQUksT0FBT2pCLE9BQU8sS0FBSyxVQUFVLEVBQUU7SUFDL0JpQixRQUFRLEdBQUdqQixPQUFPO0lBQ2xCQSxPQUFPLEdBQUdrQixTQUFTO0VBQ3ZCO0VBQ0EsSUFBSUMsSUFBSSxHQUFHLElBQUk7RUFDZixJQUFJLENBQUNGLFFBQVEsRUFDVCxPQUFPckIsSUFBSSxDQUFDd0IsU0FBUyxDQUFDTCxJQUFJLEVBQUVJLElBQUksRUFBRUgsUUFBUSxFQUFFaEIsT0FBTyxDQUFDO0VBRXhELElBQUlxQixJQUFJLEdBQUdKLFFBQVEsS0FBS0gsSUFBSSxDQUFDLENBQUM7O0VBRTlCO0VBQ0EsU0FBU1EsTUFBTUEsQ0FBQ0MsR0FBRyxFQUFFakIsSUFBSSxFQUFFO0lBQ3ZCO0lBQ0EsSUFBSSxDQUFDVyxRQUFRLEVBQ1Q7SUFDSixJQUFJSSxJQUFJLEVBQ0osTUFBTUUsR0FBRztJQUNiLElBQUlDLEVBQUUsR0FBR1AsUUFBUTtJQUNqQkEsUUFBUSxHQUFHLElBQUk7SUFDZk8sRUFBRSxDQUFDRCxHQUFHLEVBQUVqQixJQUFJLENBQUM7RUFDakI7O0VBRUE7RUFDQSxTQUFTbUIsa0JBQWtCQSxDQUFDVCxRQUFRLEVBQUU7SUFDbEMsSUFBSVUsR0FBRyxHQUFHVixRQUFRLENBQUNXLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztJQUNsRCxJQUFJRCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUU7TUFDVixJQUFJRSxPQUFPLEdBQUdaLFFBQVEsQ0FBQ2EsU0FBUyxDQUFDSCxHQUFHLENBQUM7TUFDckMsSUFBSUUsT0FBTyxJQUFJN0IsTUFBTSxFQUFFLE9BQU82QixPQUFPO0lBQ3pDO0lBQ0EsT0FBTyxJQUFJO0VBQ2Y7O0VBRUE7RUFDQSxTQUFTRSxPQUFPQSxDQUFDZCxRQUFRLEVBQUVlLE1BQU0sRUFBRTtJQUMvQixJQUFJO01BQ0EsSUFBSW5DLElBQUksQ0FBQ29DLFFBQVEsQ0FBQ0QsTUFBTSxDQUFDLElBQUlBLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFDakRGLE1BQU0sR0FBR0csSUFBSSxDQUFDcEMsS0FBSyxDQUFDaUMsTUFBTSxDQUFDO01BQy9CLElBQUksQ0FBQ25DLElBQUksQ0FBQ29DLFFBQVEsQ0FBQ0QsTUFBTSxDQUFDLEVBQ3RCWixJQUFJLENBQUNaLFVBQVUsQ0FBQ3dCLE1BQU0sQ0FBQy9CLE9BQU8sQ0FBQyxDQUFDUSxPQUFPLENBQUN1QixNQUFNLENBQUN0QixNQUFNLENBQUMsQ0FBQyxLQUN0RDtRQUNEWCxLQUFLLENBQUNrQixRQUFRLEdBQUdBLFFBQVE7UUFDekIsSUFBSW1CLE1BQU0sR0FBR3JDLEtBQUssQ0FBQ2lDLE1BQU0sRUFBRVosSUFBSSxFQUFFbkIsT0FBTyxDQUFDO1VBQ3JDb0MsUUFBUTtVQUNSQyxDQUFDLEdBQUcsQ0FBQztRQUNULElBQUlGLE1BQU0sQ0FBQ0csT0FBTyxFQUNkLE9BQU9ELENBQUMsR0FBR0YsTUFBTSxDQUFDRyxPQUFPLENBQUNDLE1BQU0sRUFBRSxFQUFFRixDQUFDLEVBQ2pDLElBQUlELFFBQVEsR0FBR1gsa0JBQWtCLENBQUNVLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRCxDQUFDLENBQUMsQ0FBQyxJQUFJbEIsSUFBSSxDQUFDVCxXQUFXLENBQUNNLFFBQVEsRUFBRW1CLE1BQU0sQ0FBQ0csT0FBTyxDQUFDRCxDQUFDLENBQUMsQ0FBQyxFQUNqR3hCLEtBQUssQ0FBQ3VCLFFBQVEsQ0FBQztRQUMzQixJQUFJRCxNQUFNLENBQUNLLFdBQVcsRUFDbEIsS0FBS0gsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRixNQUFNLENBQUNLLFdBQVcsQ0FBQ0QsTUFBTSxFQUFFLEVBQUVGLENBQUMsRUFDMUMsSUFBSUQsUUFBUSxHQUFHWCxrQkFBa0IsQ0FBQ1UsTUFBTSxDQUFDSyxXQUFXLENBQUNILENBQUMsQ0FBQyxDQUFDLElBQUlsQixJQUFJLENBQUNULFdBQVcsQ0FBQ00sUUFBUSxFQUFFbUIsTUFBTSxDQUFDSyxXQUFXLENBQUNILENBQUMsQ0FBQyxDQUFDLEVBQ3pHeEIsS0FBSyxDQUFDdUIsUUFBUSxFQUFFLElBQUksQ0FBQztNQUNyQztJQUNKLENBQUMsQ0FBQyxPQUFPYixHQUFHLEVBQUU7TUFDVkQsTUFBTSxDQUFDQyxHQUFHLENBQUM7SUFDZjtJQUNBLElBQUksQ0FBQ0YsSUFBSSxJQUFJLENBQUNvQixNQUFNLEVBQ2hCbkIsTUFBTSxDQUFDLElBQUksRUFBRUgsSUFBSSxDQUFDLENBQUMsQ0FBQztFQUM1Qjs7RUFFQTtFQUNBLFNBQVNOLEtBQUtBLENBQUNHLFFBQVEsRUFBRTBCLElBQUksRUFBRTtJQUMzQjFCLFFBQVEsR0FBR1Msa0JBQWtCLENBQUNULFFBQVEsQ0FBQyxJQUFJQSxRQUFROztJQUVuRDtJQUNBLElBQUlHLElBQUksQ0FBQ2hCLEtBQUssQ0FBQ3dDLE9BQU8sQ0FBQzNCLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUNqQztJQUNKRyxJQUFJLENBQUNoQixLQUFLLENBQUN5QyxJQUFJLENBQUM1QixRQUFRLENBQUM7O0lBRXpCO0lBQ0EsSUFBSUEsUUFBUSxJQUFJakIsTUFBTSxFQUFFO01BQ3BCLElBQUlzQixJQUFJLEVBQ0pTLE9BQU8sQ0FBQ2QsUUFBUSxFQUFFakIsTUFBTSxDQUFDaUIsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUNuQztRQUNELEVBQUV5QixNQUFNO1FBQ1JJLFVBQVUsQ0FBQyxZQUFXO1VBQ2xCLEVBQUVKLE1BQU07VUFDUlgsT0FBTyxDQUFDZCxRQUFRLEVBQUVqQixNQUFNLENBQUNpQixRQUFRLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUM7TUFDTjtNQUNBO0lBQ0o7O0lBRUE7SUFDQSxJQUFJSyxJQUFJLEVBQUU7TUFDTixJQUFJVSxNQUFNO01BQ1YsSUFBSTtRQUNBQSxNQUFNLEdBQUduQyxJQUFJLENBQUNrRCxFQUFFLENBQUNDLFlBQVksQ0FBQy9CLFFBQVEsQ0FBQyxDQUFDZ0MsUUFBUSxDQUFDLE1BQU0sQ0FBQztNQUM1RCxDQUFDLENBQUMsT0FBT3pCLEdBQUcsRUFBRTtRQUNWLElBQUksQ0FBQ21CLElBQUksRUFDTHBCLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDO1FBQ2Y7TUFDSjtNQUNBTyxPQUFPLENBQUNkLFFBQVEsRUFBRWUsTUFBTSxDQUFDO0lBQzdCLENBQUMsTUFBTTtNQUNILEVBQUVVLE1BQU07TUFDUnRCLElBQUksQ0FBQ04sS0FBSyxDQUFDRyxRQUFRLEVBQUUsVUFBU08sR0FBRyxFQUFFUSxNQUFNLEVBQUU7UUFDdkMsRUFBRVUsTUFBTTtRQUNSO1FBQ0EsSUFBSSxDQUFDeEIsUUFBUSxFQUNULE9BQU8sQ0FBQztRQUNaLElBQUlNLEdBQUcsRUFBRTtVQUNMO1VBQ0EsSUFBSSxDQUFDbUIsSUFBSSxFQUNMcEIsTUFBTSxDQUFDQyxHQUFHLENBQUMsQ0FBQyxLQUNYLElBQUksQ0FBQ2tCLE1BQU07WUFBRTtZQUNkbkIsTUFBTSxDQUFDLElBQUksRUFBRUgsSUFBSSxDQUFDO1VBQ3RCO1FBQ0o7UUFDQVcsT0FBTyxDQUFDZCxRQUFRLEVBQUVlLE1BQU0sQ0FBQztNQUM3QixDQUFDLENBQUM7SUFDTjtFQUNKO0VBQ0EsSUFBSVUsTUFBTSxHQUFHLENBQUM7O0VBRWQ7RUFDQTtFQUNBLElBQUk3QyxJQUFJLENBQUNvQyxRQUFRLENBQUNoQixRQUFRLENBQUMsRUFDdkJBLFFBQVEsR0FBRyxDQUFFQSxRQUFRLENBQUU7RUFDM0IsS0FBSyxJQUFJcUIsQ0FBQyxHQUFHLENBQUMsRUFBRUQsUUFBUSxFQUFFQyxDQUFDLEdBQUdyQixRQUFRLENBQUN1QixNQUFNLEVBQUUsRUFBRUYsQ0FBQyxFQUM5QyxJQUFJRCxRQUFRLEdBQUdqQixJQUFJLENBQUNULFdBQVcsQ0FBQyxFQUFFLEVBQUVNLFFBQVEsQ0FBQ3FCLENBQUMsQ0FBQyxDQUFDLEVBQzVDeEIsS0FBSyxDQUFDdUIsUUFBUSxDQUFDO0VBRXZCLElBQUlmLElBQUksRUFDSixPQUFPRixJQUFJO0VBQ2YsSUFBSSxDQUFDc0IsTUFBTSxFQUNQbkIsTUFBTSxDQUFDLElBQUksRUFBRUgsSUFBSSxDQUFDO0VBQ3RCLE9BQU9ELFNBQVM7QUFDcEIsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBakMsSUFBSSxDQUFDRyxTQUFTLENBQUM2RCxRQUFRLEdBQUcsU0FBU0EsUUFBUUEsQ0FBQ2pDLFFBQVEsRUFBRWhCLE9BQU8sRUFBRTtFQUMzRCxJQUFJLENBQUNKLElBQUksQ0FBQ3NELE1BQU0sRUFDWixNQUFNQyxLQUFLLENBQUMsZUFBZSxDQUFDO0VBQ2hDLE9BQU8sSUFBSSxDQUFDcEMsSUFBSSxDQUFDQyxRQUFRLEVBQUVoQixPQUFPLEVBQUVjLElBQUksQ0FBQztBQUM3QyxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBN0IsSUFBSSxDQUFDRyxTQUFTLENBQUNnRSxVQUFVLEdBQUcsU0FBU0EsVUFBVUEsQ0FBQSxFQUFHO0VBQzlDLElBQUksSUFBSSxDQUFDbEQsUUFBUSxDQUFDcUMsTUFBTSxFQUNwQixNQUFNWSxLQUFLLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDakQsUUFBUSxDQUFDbUQsR0FBRyxDQUFDLFVBQVNDLEtBQUssRUFBRTtJQUN4RSxPQUFPLFVBQVUsR0FBR0EsS0FBSyxDQUFDQyxNQUFNLEdBQUcsT0FBTyxHQUFHRCxLQUFLLENBQUNFLE1BQU0sQ0FBQ0MsUUFBUTtFQUN0RSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0VBQ2xCLE9BQU94RSxTQUFTLENBQUNFLFNBQVMsQ0FBQ2dFLFVBQVUsQ0FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUM7QUFDcEQsQ0FBQzs7QUFFRDtBQUNBLElBQUkwRCxRQUFRLEdBQUcsUUFBUTs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGtCQUFrQkEsQ0FBQ3RELElBQUksRUFBRWdELEtBQUssRUFBRTtFQUNyQyxJQUFJTyxZQUFZLEdBQUdQLEtBQUssQ0FBQ0UsTUFBTSxDQUFDTSxNQUFNLENBQUNSLEtBQUssQ0FBQ0MsTUFBTSxDQUFDO0VBQ3BELElBQUlNLFlBQVksRUFBRTtJQUNkLElBQUlFLFdBQVcsR0FBRyxJQUFJdEUsS0FBSyxDQUFDNkQsS0FBSyxDQUFDRyxRQUFRLEVBQUVILEtBQUssQ0FBQ1UsRUFBRSxFQUFFVixLQUFLLENBQUNXLElBQUksRUFBRVgsS0FBSyxDQUFDWSxJQUFJLEVBQUVoRCxTQUFTLEVBQUVvQyxLQUFLLENBQUN0RCxPQUFPLENBQUM7SUFDdkc7SUFDQSxJQUFJNkQsWUFBWSxDQUFDTSxHQUFHLENBQUNKLFdBQVcsQ0FBQ0ssSUFBSSxDQUFDLEVBQUU7TUFDcEMsT0FBTyxJQUFJO0lBQ2Y7SUFDQUwsV0FBVyxDQUFDTSxjQUFjLEdBQUdmLEtBQUs7SUFDbENBLEtBQUssQ0FBQ2dCLGNBQWMsR0FBR1AsV0FBVztJQUNsQ0YsWUFBWSxDQUFDVSxHQUFHLENBQUNSLFdBQVcsQ0FBQztJQUM3QixPQUFPLElBQUk7RUFDZjtFQUNBLE9BQU8sS0FBSztBQUNoQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTlFLElBQUksQ0FBQ0csU0FBUyxDQUFDb0YsVUFBVSxHQUFHLFNBQVNBLFVBQVVBLENBQUNDLE1BQU0sRUFBRTtFQUNwRCxJQUFJQSxNQUFNLFlBQVloRixLQUFLLEVBQUU7SUFFekIsS0FBSSxzREFBdURnRixNQUFNLENBQUNsQixNQUFNLEtBQUtyQyxTQUFTLElBQUkseUJBQTBCLENBQUN1RCxNQUFNLENBQUNILGNBQWMsRUFDdEksSUFBSSxDQUFDVixrQkFBa0IsQ0FBQyxJQUFJLEVBQUVhLE1BQU0sQ0FBQyxFQUNqQyxJQUFJLENBQUN2RSxRQUFRLENBQUMwQyxJQUFJLENBQUM2QixNQUFNLENBQUM7RUFFdEMsQ0FBQyxNQUFNLElBQUlBLE1BQU0sWUFBWS9FLElBQUksRUFBRTtJQUUvQixJQUFJaUUsUUFBUSxDQUFDZSxJQUFJLENBQUNELE1BQU0sQ0FBQ0wsSUFBSSxDQUFDLEVBQzFCSyxNQUFNLENBQUNqQixNQUFNLENBQUNpQixNQUFNLENBQUNMLElBQUksQ0FBQyxHQUFHSyxNQUFNLENBQUNFLE1BQU0sQ0FBQyxDQUFDO0VBRXBELENBQUMsTUFBTSxJQUFJLEVBQUVGLE1BQU0sWUFBWTlFLEtBQUssQ0FBQyxFQUFFLG9DQUFxQztNQUV4RSxJQUFJOEUsTUFBTSxZQUFZNUUsSUFBSTtRQUFFO1FBQ3hCLEtBQUssSUFBSXdDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNuQyxRQUFRLENBQUNxQyxNQUFNLEdBQ3BDLElBQUlxQixrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDMUQsUUFBUSxDQUFDbUMsQ0FBQyxDQUFDLENBQUMsRUFDMUMsSUFBSSxDQUFDbkMsUUFBUSxDQUFDMEUsTUFBTSxDQUFDdkMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRTNCLEVBQUVBLENBQUM7TUFDZixLQUFLLElBQUl3QyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsaUJBQWtCSixNQUFNLENBQUNLLFdBQVcsQ0FBQ3ZDLE1BQU0sRUFBRSxFQUFFc0MsQ0FBQztNQUFFO01BQ2xFLElBQUksQ0FBQ0wsVUFBVSxDQUFDQyxNQUFNLENBQUNNLFlBQVksQ0FBQ0YsQ0FBQyxDQUFDLENBQUM7TUFDM0MsSUFBSWxCLFFBQVEsQ0FBQ2UsSUFBSSxDQUFDRCxNQUFNLENBQUNMLElBQUksQ0FBQyxFQUMxQkssTUFBTSxDQUFDakIsTUFBTSxDQUFDaUIsTUFBTSxDQUFDTCxJQUFJLENBQUMsR0FBR0ssTUFBTSxDQUFDLENBQUM7SUFDN0M7O0VBRUE7RUFDQTtFQUNBO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQXhGLElBQUksQ0FBQ0csU0FBUyxDQUFDNEYsYUFBYSxHQUFHLFNBQVNBLGFBQWFBLENBQUNQLE1BQU0sRUFBRTtFQUMxRCxJQUFJQSxNQUFNLFlBQVloRixLQUFLLEVBQUU7SUFFekIsS0FBSSx3QkFBeUJnRixNQUFNLENBQUNsQixNQUFNLEtBQUtyQyxTQUFTLEVBQUU7TUFDdEQsS0FBSSxxQkFBc0J1RCxNQUFNLENBQUNILGNBQWMsRUFBRTtRQUFFO1FBQy9DRyxNQUFNLENBQUNILGNBQWMsQ0FBQ2QsTUFBTSxDQUFDeUIsTUFBTSxDQUFDUixNQUFNLENBQUNILGNBQWMsQ0FBQztRQUMxREcsTUFBTSxDQUFDSCxjQUFjLEdBQUcsSUFBSTtNQUNoQyxDQUFDLE1BQU07UUFBRTtRQUNMLElBQUlZLEtBQUssR0FBRyxJQUFJLENBQUNoRixRQUFRLENBQUN5QyxPQUFPLENBQUM4QixNQUFNLENBQUM7UUFDekM7UUFDQSxJQUFJUyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQ1YsSUFBSSxDQUFDaEYsUUFBUSxDQUFDMEUsTUFBTSxDQUFDTSxLQUFLLEVBQUUsQ0FBQyxDQUFDO01BQ3RDO0lBQ0o7RUFFSixDQUFDLE1BQU0sSUFBSVQsTUFBTSxZQUFZL0UsSUFBSSxFQUFFO0lBRS9CLElBQUlpRSxRQUFRLENBQUNlLElBQUksQ0FBQ0QsTUFBTSxDQUFDTCxJQUFJLENBQUMsRUFDMUIsT0FBT0ssTUFBTSxDQUFDakIsTUFBTSxDQUFDaUIsTUFBTSxDQUFDTCxJQUFJLENBQUMsQ0FBQyxDQUFDO0VBRTNDLENBQUMsTUFBTSxJQUFJSyxNQUFNLFlBQVl2RixTQUFTLEVBQUU7SUFFcEMsS0FBSyxJQUFJbUQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLGlCQUFrQm9DLE1BQU0sQ0FBQ0ssV0FBVyxDQUFDdkMsTUFBTSxFQUFFLEVBQUVGLENBQUM7SUFBRTtJQUNsRSxJQUFJLENBQUMyQyxhQUFhLENBQUNQLE1BQU0sQ0FBQ00sWUFBWSxDQUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFOUMsSUFBSXNCLFFBQVEsQ0FBQ2UsSUFBSSxDQUFDRCxNQUFNLENBQUNMLElBQUksQ0FBQyxFQUMxQixPQUFPSyxNQUFNLENBQUNqQixNQUFNLENBQUNpQixNQUFNLENBQUNMLElBQUksQ0FBQyxDQUFDLENBQUM7RUFFM0M7QUFDSixDQUFDOztBQUVEO0FBQ0FuRixJQUFJLENBQUNrRyxVQUFVLEdBQUcsVUFBU0MsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtFQUMvQ3pGLElBQUksR0FBS3VGLEtBQUs7RUFDZHRGLEtBQUssR0FBSXVGLE1BQU07RUFDZnRGLE1BQU0sR0FBR3VGLE9BQU87QUFDcEIsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZmlyZWJhc2UvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdC5qcz82OTAxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3Q7XHJcblxyXG4vLyBleHRlbmRzIE5hbWVzcGFjZVxyXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZShcIi4vbmFtZXNwYWNlXCIpO1xyXG4oKFJvb3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShOYW1lc3BhY2UucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBSb290KS5jbGFzc05hbWUgPSBcIlJvb3RcIjtcclxuXHJcbnZhciBGaWVsZCAgID0gcmVxdWlyZShcIi4vZmllbGRcIiksXHJcbiAgICBFbnVtICAgID0gcmVxdWlyZShcIi4vZW51bVwiKSxcclxuICAgIE9uZU9mICAgPSByZXF1aXJlKFwiLi9vbmVvZlwiKSxcclxuICAgIHV0aWwgICAgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xyXG5cclxudmFyIFR5cGUsICAgLy8gY3ljbGljXHJcbiAgICBwYXJzZSwgIC8vIG1pZ2h0IGJlIGV4Y2x1ZGVkXHJcbiAgICBjb21tb247IC8vIFwiXHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyByb290IG5hbWVzcGFjZSBpbnN0YW5jZS5cclxuICogQGNsYXNzZGVzYyBSb290IG5hbWVzcGFjZSB3cmFwcGluZyBhbGwgdHlwZXMsIGVudW1zLCBzZXJ2aWNlcywgc3ViLW5hbWVzcGFjZXMgZXRjLiB0aGF0IGJlbG9uZyB0b2dldGhlci5cclxuICogQGV4dGVuZHMgTmFtZXNwYWNlQmFzZVxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gW29wdGlvbnNdIFRvcCBsZXZlbCBvcHRpb25zXHJcbiAqL1xyXG5mdW5jdGlvbiBSb290KG9wdGlvbnMpIHtcclxuICAgIE5hbWVzcGFjZS5jYWxsKHRoaXMsIFwiXCIsIG9wdGlvbnMpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmZXJyZWQgZXh0ZW5zaW9uIGZpZWxkcy5cclxuICAgICAqIEB0eXBlIHtGaWVsZFtdfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmRlZmVycmVkID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNvbHZlZCBmaWxlIG5hbWVzIG9mIGxvYWRlZCBmaWxlcy5cclxuICAgICAqIEB0eXBlIHtzdHJpbmdbXX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5maWxlcyA9IFtdO1xyXG59XHJcblxyXG4vKipcclxuICogTG9hZHMgYSBuYW1lc3BhY2UgZGVzY3JpcHRvciBpbnRvIGEgcm9vdCBuYW1lc3BhY2UuXHJcbiAqIEBwYXJhbSB7SU5hbWVzcGFjZX0ganNvbiBOYW1lZXNwYWNlIGRlc2NyaXB0b3JcclxuICogQHBhcmFtIHtSb290fSBbcm9vdF0gUm9vdCBuYW1lc3BhY2UsIGRlZmF1bHRzIHRvIGNyZWF0ZSBhIG5ldyBvbmUgaWYgb21pdHRlZFxyXG4gKiBAcmV0dXJucyB7Um9vdH0gUm9vdCBuYW1lc3BhY2VcclxuICovXHJcblJvb3QuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTihqc29uLCByb290KSB7XHJcbiAgICBpZiAoIXJvb3QpXHJcbiAgICAgICAgcm9vdCA9IG5ldyBSb290KCk7XHJcbiAgICBpZiAoanNvbi5vcHRpb25zKVxyXG4gICAgICAgIHJvb3Quc2V0T3B0aW9ucyhqc29uLm9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIHJvb3QuYWRkSlNPTihqc29uLm5lc3RlZCk7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVzb2x2ZXMgdGhlIHBhdGggb2YgYW4gaW1wb3J0ZWQgZmlsZSwgcmVsYXRpdmUgdG8gdGhlIGltcG9ydGluZyBvcmlnaW4uXHJcbiAqIFRoaXMgbWV0aG9kIGV4aXN0cyBzbyB5b3UgY2FuIG92ZXJyaWRlIGl0IHdpdGggeW91ciBvd24gbG9naWMgaW4gY2FzZSB5b3VyIGltcG9ydHMgYXJlIHNjYXR0ZXJlZCBvdmVyIG11bHRpcGxlIGRpcmVjdG9yaWVzLlxyXG4gKiBAZnVuY3Rpb25cclxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpbiBUaGUgZmlsZSBuYW1lIG9mIHRoZSBpbXBvcnRpbmcgZmlsZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFyZ2V0IFRoZSBmaWxlIG5hbWUgYmVpbmcgaW1wb3J0ZWRcclxuICogQHJldHVybnMge3N0cmluZ3xudWxsfSBSZXNvbHZlZCBwYXRoIHRvIGB0YXJnZXRgIG9yIGBudWxsYCB0byBza2lwIHRoZSBmaWxlXHJcbiAqL1xyXG5Sb290LnByb3RvdHlwZS5yZXNvbHZlUGF0aCA9IHV0aWwucGF0aC5yZXNvbHZlO1xyXG5cclxuLyoqXHJcbiAqIEZldGNoIGNvbnRlbnQgZnJvbSBmaWxlIHBhdGggb3IgdXJsXHJcbiAqIFRoaXMgbWV0aG9kIGV4aXN0cyBzbyB5b3UgY2FuIG92ZXJyaWRlIGl0IHdpdGggeW91ciBvd24gbG9naWMuXHJcbiAqIEBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBGaWxlIHBhdGggb3IgdXJsXHJcbiAqIEBwYXJhbSB7RmV0Y2hDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblJvb3QucHJvdG90eXBlLmZldGNoID0gdXRpbC5mZXRjaDtcclxuXHJcbi8vIEEgc3ltYm9sLWxpa2UgZnVuY3Rpb24gdG8gc2FmZWx5IHNpZ25hbCBzeW5jaHJvbm91cyBsb2FkaW5nXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIFNZTkMoKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXHJcblxyXG4vKipcclxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCBjYWxscyB0aGUgY2FsbGJhY2suXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBOYW1lcyBvZiBvbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxyXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IG9wdGlvbnMgUGFyc2Ugb3B0aW9uc1xyXG4gKiBAcGFyYW0ge0xvYWRDYWxsYmFja30gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb25cclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblJvb3QucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiBsb2FkKGZpbGVuYW1lLCBvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XHJcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGlmICghY2FsbGJhY2spXHJcbiAgICAgICAgcmV0dXJuIHV0aWwuYXNQcm9taXNlKGxvYWQsIHNlbGYsIGZpbGVuYW1lLCBvcHRpb25zKTtcclxuXHJcbiAgICB2YXIgc3luYyA9IGNhbGxiYWNrID09PSBTWU5DOyAvLyB1bmRvY3VtZW50ZWRcclxuXHJcbiAgICAvLyBGaW5pc2hlcyBsb2FkaW5nIGJ5IGNhbGxpbmcgdGhlIGNhbGxiYWNrIChleGFjdGx5IG9uY2UpXHJcbiAgICBmdW5jdGlvbiBmaW5pc2goZXJyLCByb290KSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFjYWxsYmFjaylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmIChzeW5jKVxyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgdmFyIGNiID0gY2FsbGJhY2s7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIGNiKGVyciwgcm9vdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQnVuZGxlZCBkZWZpbml0aW9uIGV4aXN0ZW5jZSBjaGVja2luZ1xyXG4gICAgZnVuY3Rpb24gZ2V0QnVuZGxlZEZpbGVOYW1lKGZpbGVuYW1lKSB7XHJcbiAgICAgICAgdmFyIGlkeCA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKFwiZ29vZ2xlL3Byb3RvYnVmL1wiKTtcclxuICAgICAgICBpZiAoaWR4ID4gLTEpIHtcclxuICAgICAgICAgICAgdmFyIGFsdG5hbWUgPSBmaWxlbmFtZS5zdWJzdHJpbmcoaWR4KTtcclxuICAgICAgICAgICAgaWYgKGFsdG5hbWUgaW4gY29tbW9uKSByZXR1cm4gYWx0bmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJvY2Vzc2VzIGEgc2luZ2xlIGZpbGVcclxuICAgIGZ1bmN0aW9uIHByb2Nlc3MoZmlsZW5hbWUsIHNvdXJjZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh1dGlsLmlzU3RyaW5nKHNvdXJjZSkgJiYgc291cmNlLmNoYXJBdCgwKSA9PT0gXCJ7XCIpXHJcbiAgICAgICAgICAgICAgICBzb3VyY2UgPSBKU09OLnBhcnNlKHNvdXJjZSk7XHJcbiAgICAgICAgICAgIGlmICghdXRpbC5pc1N0cmluZyhzb3VyY2UpKVxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRPcHRpb25zKHNvdXJjZS5vcHRpb25zKS5hZGRKU09OKHNvdXJjZS5uZXN0ZWQpO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlLmZpbGVuYW1lID0gZmlsZW5hbWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2Uoc291cmNlLCBzZWxmLCBvcHRpb25zKSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCxcclxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQuaW1wb3J0cylcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IHBhcnNlZC5pbXBvcnRzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzb2x2ZWQgPSBnZXRCdW5kbGVkRmlsZU5hbWUocGFyc2VkLmltcG9ydHNbaV0pIHx8IHNlbGYucmVzb2x2ZVBhdGgoZmlsZW5hbWUsIHBhcnNlZC5pbXBvcnRzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkKTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQud2Vha0ltcG9ydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnNlZC53ZWFrSW1wb3J0cy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkID0gZ2V0QnVuZGxlZEZpbGVOYW1lKHBhcnNlZC53ZWFrSW1wb3J0c1tpXSkgfHwgc2VsZi5yZXNvbHZlUGF0aChmaWxlbmFtZSwgcGFyc2VkLndlYWtJbXBvcnRzW2ldKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoKHJlc29sdmVkLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBmaW5pc2goZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzeW5jICYmICFxdWV1ZWQpXHJcbiAgICAgICAgICAgIGZpbmlzaChudWxsLCBzZWxmKTsgLy8gb25seSBvbmNlIGFueXdheVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEZldGNoZXMgYSBzaW5nbGUgZmlsZVxyXG4gICAgZnVuY3Rpb24gZmV0Y2goZmlsZW5hbWUsIHdlYWspIHtcclxuICAgICAgICBmaWxlbmFtZSA9IGdldEJ1bmRsZWRGaWxlTmFtZShmaWxlbmFtZSkgfHwgZmlsZW5hbWU7XHJcblxyXG4gICAgICAgIC8vIFNraXAgaWYgYWxyZWFkeSBsb2FkZWQgLyBhdHRlbXB0ZWRcclxuICAgICAgICBpZiAoc2VsZi5maWxlcy5pbmRleE9mKGZpbGVuYW1lKSA+IC0xKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgc2VsZi5maWxlcy5wdXNoKGZpbGVuYW1lKTtcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXQgYnVuZGxlZCBkZWZpbml0aW9uc1xyXG4gICAgICAgIGlmIChmaWxlbmFtZSBpbiBjb21tb24pIHtcclxuICAgICAgICAgICAgaWYgKHN5bmMpXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzKGZpbGVuYW1lLCBjb21tb25bZmlsZW5hbWVdKTtcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICArK3F1ZXVlZDtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLS1xdWV1ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgY29tbW9uW2ZpbGVuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBPdGhlcndpc2UgZmV0Y2ggZnJvbSBkaXNrIG9yIG5ldHdvcmtcclxuICAgICAgICBpZiAoc3luYykge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgc291cmNlID0gdXRpbC5mcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpLnRvU3RyaW5nKFwidXRmOFwiKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXdlYWspXHJcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoKGVycik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICArK3F1ZXVlZDtcclxuICAgICAgICAgICAgc2VsZi5mZXRjaChmaWxlbmFtZSwgZnVuY3Rpb24oZXJyLCBzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIC0tcXVldWVkO1xyXG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gdGVybWluYXRlZCBtZWFud2hpbGVcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghd2VhaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIXF1ZXVlZCkgLy8gY2FuJ3QgYmUgY292ZXJlZCByZWxpYWJseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2gobnVsbCwgc2VsZik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJvY2VzcyhmaWxlbmFtZSwgc291cmNlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIHF1ZXVlZCA9IDA7XHJcblxyXG4gICAgLy8gQXNzZW1ibGluZyB0aGUgcm9vdCBuYW1lc3BhY2UgZG9lc24ndCByZXF1aXJlIHdvcmtpbmcgdHlwZVxyXG4gICAgLy8gcmVmZXJlbmNlcyBhbnltb3JlLCBzbyB3ZSBjYW4gbG9hZCBldmVyeXRoaW5nIGluIHBhcmFsbGVsXHJcbiAgICBpZiAodXRpbC5pc1N0cmluZyhmaWxlbmFtZSkpXHJcbiAgICAgICAgZmlsZW5hbWUgPSBbIGZpbGVuYW1lIF07XHJcbiAgICBmb3IgKHZhciBpID0gMCwgcmVzb2x2ZWQ7IGkgPCBmaWxlbmFtZS5sZW5ndGg7ICsraSlcclxuICAgICAgICBpZiAocmVzb2x2ZWQgPSBzZWxmLnJlc29sdmVQYXRoKFwiXCIsIGZpbGVuYW1lW2ldKSlcclxuICAgICAgICAgICAgZmV0Y2gocmVzb2x2ZWQpO1xyXG5cclxuICAgIGlmIChzeW5jKVxyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgaWYgKCFxdWV1ZWQpXHJcbiAgICAgICAgZmluaXNoKG51bGwsIHNlbGYpO1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufTtcclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIG9wdGlvbnM6SVBhcnNlT3B0aW9ucywgY2FsbGJhY2s6TG9hZENhbGxiYWNrKTp1bmRlZmluZWRcclxuXHJcbi8qKlxyXG4gKiBMb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgYW5kIGNhbGxzIHRoZSBjYWxsYmFjay5cclxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtMb2FkQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEB2YXJpYXRpb24gMlxyXG4gKi9cclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIGNhbGxiYWNrOkxvYWRDYWxsYmFjayk6dW5kZWZpbmVkXHJcblxyXG4vKipcclxuICogTG9hZHMgb25lIG9yIG11bHRpcGxlIC5wcm90byBvciBwcmVwcm9jZXNzZWQgLmpzb24gZmlsZXMgaW50byB0aGlzIHJvb3QgbmFtZXNwYWNlIGFuZCByZXR1cm5zIGEgcHJvbWlzZS5cclxuICogQGZ1bmN0aW9uIFJvb3QjbG9hZFxyXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gZmlsZW5hbWUgTmFtZXMgb2Ygb25lIG9yIG11bHRpcGxlIGZpbGVzIHRvIGxvYWRcclxuICogQHBhcmFtIHtJUGFyc2VPcHRpb25zfSBbb3B0aW9uc10gUGFyc2Ugb3B0aW9ucy4gRGVmYXVsdHMgdG8ge0BsaW5rIHBhcnNlLmRlZmF1bHRzfSB3aGVuIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPFJvb3Q+fSBQcm9taXNlXHJcbiAqIEB2YXJpYXRpb24gM1xyXG4gKi9cclxuLy8gZnVuY3Rpb24gbG9hZChmaWxlbmFtZTpzdHJpbmcsIFtvcHRpb25zOklQYXJzZU9wdGlvbnNdKTpQcm9taXNlPFJvb3Q+XHJcblxyXG4vKipcclxuICogU3luY2hyb25vdXNseSBsb2FkcyBvbmUgb3IgbXVsdGlwbGUgLnByb3RvIG9yIHByZXByb2Nlc3NlZCAuanNvbiBmaWxlcyBpbnRvIHRoaXMgcm9vdCBuYW1lc3BhY2UgKG5vZGUgb25seSkuXHJcbiAqIEBmdW5jdGlvbiBSb290I2xvYWRTeW5jXHJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBmaWxlbmFtZSBOYW1lcyBvZiBvbmUgb3IgbXVsdGlwbGUgZmlsZXMgdG8gbG9hZFxyXG4gKiBAcGFyYW0ge0lQYXJzZU9wdGlvbnN9IFtvcHRpb25zXSBQYXJzZSBvcHRpb25zLiBEZWZhdWx0cyB0byB7QGxpbmsgcGFyc2UuZGVmYXVsdHN9IHdoZW4gb21pdHRlZC5cclxuICogQHJldHVybnMge1Jvb3R9IFJvb3QgbmFtZXNwYWNlXHJcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBzeW5jaHJvbm91cyBmZXRjaGluZyBpcyBub3Qgc3VwcG9ydGVkIChpLmUuIGluIGJyb3dzZXJzKSBvciBpZiBhIGZpbGUncyBzeW50YXggaXMgaW52YWxpZFxyXG4gKi9cclxuUm9vdC5wcm90b3R5cGUubG9hZFN5bmMgPSBmdW5jdGlvbiBsb2FkU3luYyhmaWxlbmFtZSwgb3B0aW9ucykge1xyXG4gICAgaWYgKCF1dGlsLmlzTm9kZSlcclxuICAgICAgICB0aHJvdyBFcnJvcihcIm5vdCBzdXBwb3J0ZWRcIik7XHJcbiAgICByZXR1cm4gdGhpcy5sb2FkKGZpbGVuYW1lLCBvcHRpb25zLCBTWU5DKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcblJvb3QucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiByZXNvbHZlQWxsKCkge1xyXG4gICAgaWYgKHRoaXMuZGVmZXJyZWQubGVuZ3RoKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwidW5yZXNvbHZhYmxlIGV4dGVuc2lvbnM6IFwiICsgdGhpcy5kZWZlcnJlZC5tYXAoZnVuY3Rpb24oZmllbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiJ2V4dGVuZCBcIiArIGZpZWxkLmV4dGVuZCArIFwiJyBpbiBcIiArIGZpZWxkLnBhcmVudC5mdWxsTmFtZTtcclxuICAgICAgICB9KS5qb2luKFwiLCBcIikpO1xyXG4gICAgcmV0dXJuIE5hbWVzcGFjZS5wcm90b3R5cGUucmVzb2x2ZUFsbC5jYWxsKHRoaXMpO1xyXG59O1xyXG5cclxuLy8gb25seSB1cHBlcmNhc2VkIChhbmQgdGh1cyBjb25mbGljdC1mcmVlKSBjaGlsZHJlbiBhcmUgZXhwb3NlZCwgc2VlIGJlbG93XHJcbnZhciBleHBvc2VSZSA9IC9eW0EtWl0vO1xyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYSBkZWZlcnJlZCBkZWNsYXJpbmcgZXh0ZW5zaW9uIGZpZWxkIGJ5IGNyZWF0aW5nIGEgc2lzdGVyIGZpZWxkIHRvIHJlcHJlc2VudCBpdCB3aXRoaW4gaXRzIGV4dGVuZGVkIHR5cGUuXHJcbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCBSb290IGluc3RhbmNlXHJcbiAqIEBwYXJhbSB7RmllbGR9IGZpZWxkIERlY2xhcmluZyBleHRlbnNpb24gZmllbGQgd2l0aW4gdGhlIGRlY2xhcmluZyB0eXBlXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHRoZSBleHRlbmRlZCB0eXBlLCBgZmFsc2VgIG90aGVyd2lzZVxyXG4gKiBAaW5uZXJcclxuICogQGlnbm9yZVxyXG4gKi9cclxuZnVuY3Rpb24gdHJ5SGFuZGxlRXh0ZW5zaW9uKHJvb3QsIGZpZWxkKSB7XHJcbiAgICB2YXIgZXh0ZW5kZWRUeXBlID0gZmllbGQucGFyZW50Lmxvb2t1cChmaWVsZC5leHRlbmQpO1xyXG4gICAgaWYgKGV4dGVuZGVkVHlwZSkge1xyXG4gICAgICAgIHZhciBzaXN0ZXJGaWVsZCA9IG5ldyBGaWVsZChmaWVsZC5mdWxsTmFtZSwgZmllbGQuaWQsIGZpZWxkLnR5cGUsIGZpZWxkLnJ1bGUsIHVuZGVmaW5lZCwgZmllbGQub3B0aW9ucyk7XHJcbiAgICAgICAgLy9kbyBub3QgYWxsb3cgdG8gZXh0ZW5kIHNhbWUgZmllbGQgdHdpY2UgdG8gcHJldmVudCB0aGUgZXJyb3JcclxuICAgICAgICBpZiAoZXh0ZW5kZWRUeXBlLmdldChzaXN0ZXJGaWVsZC5uYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2lzdGVyRmllbGQuZGVjbGFyaW5nRmllbGQgPSBmaWVsZDtcclxuICAgICAgICBmaWVsZC5leHRlbnNpb25GaWVsZCA9IHNpc3RlckZpZWxkO1xyXG4gICAgICAgIGV4dGVuZGVkVHlwZS5hZGQoc2lzdGVyRmllbGQpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsbGVkIHdoZW4gYW55IG9iamVjdCBpcyBhZGRlZCB0byB0aGlzIHJvb3Qgb3IgaXRzIHN1Yi1uYW1lc3BhY2VzLlxyXG4gKiBAcGFyYW0ge1JlZmxlY3Rpb25PYmplY3R9IG9iamVjdCBPYmplY3QgYWRkZWRcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICogQHByaXZhdGVcclxuICovXHJcblJvb3QucHJvdG90eXBlLl9oYW5kbGVBZGQgPSBmdW5jdGlvbiBfaGFuZGxlQWRkKG9iamVjdCkge1xyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIEZpZWxkKSB7XHJcblxyXG4gICAgICAgIGlmICgvKiBhbiBleHRlbnNpb24gZmllbGQgKGltcGxpZXMgbm90IHBhcnQgb2YgYSBvbmVvZikgKi8gb2JqZWN0LmV4dGVuZCAhPT0gdW5kZWZpbmVkICYmIC8qIG5vdCBhbHJlYWR5IGhhbmRsZWQgKi8gIW9iamVjdC5leHRlbnNpb25GaWVsZClcclxuICAgICAgICAgICAgaWYgKCF0cnlIYW5kbGVFeHRlbnNpb24odGhpcywgb2JqZWN0KSlcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucHVzaChvYmplY3QpO1xyXG5cclxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgRW51bSkge1xyXG5cclxuICAgICAgICBpZiAoZXhwb3NlUmUudGVzdChvYmplY3QubmFtZSkpXHJcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnZhbHVlczsgLy8gZXhwb3NlIGVudW0gdmFsdWVzIGFzIHByb3BlcnR5IG9mIGl0cyBwYXJlbnRcclxuXHJcbiAgICB9IGVsc2UgaWYgKCEob2JqZWN0IGluc3RhbmNlb2YgT25lT2YpKSAvKiBldmVyeXRoaW5nIGVsc2UgaXMgYSBuYW1lc3BhY2UgKi8ge1xyXG5cclxuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgVHlwZSkgLy8gVHJ5IHRvIGhhbmRsZSBhbnkgZGVmZXJyZWQgZXh0ZW5zaW9uc1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGVmZXJyZWQubGVuZ3RoOylcclxuICAgICAgICAgICAgICAgIGlmICh0cnlIYW5kbGVFeHRlbnNpb24odGhpcywgdGhpcy5kZWZlcnJlZFtpXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZlcnJlZC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgLyogaW5pdGlhbGl6ZXMgKi8gb2JqZWN0Lm5lc3RlZEFycmF5Lmxlbmd0aDsgKytqKSAvLyByZWN1cnNlIGludG8gdGhlIG5hbWVzcGFjZVxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVBZGQob2JqZWN0Ll9uZXN0ZWRBcnJheVtqXSk7XHJcbiAgICAgICAgaWYgKGV4cG9zZVJlLnRlc3Qob2JqZWN0Lm5hbWUpKVxyXG4gICAgICAgICAgICBvYmplY3QucGFyZW50W29iamVjdC5uYW1lXSA9IG9iamVjdDsgLy8gZXhwb3NlIG5hbWVzcGFjZSBhcyBwcm9wZXJ0eSBvZiBpdHMgcGFyZW50XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlIGFib3ZlIGFsc28gYWRkcyB1cHBlcmNhc2VkIChhbmQgdGh1cyBjb25mbGljdC1mcmVlKSBuZXN0ZWQgdHlwZXMsIHNlcnZpY2VzIGFuZCBlbnVtcyBhc1xyXG4gICAgLy8gcHJvcGVydGllcyBvZiBuYW1lc3BhY2VzIGp1c3QgbGlrZSBzdGF0aWMgY29kZSBkb2VzLiBUaGlzIGFsbG93cyB1c2luZyBhIC5kLnRzIGdlbmVyYXRlZCBmb3JcclxuICAgIC8vIGEgc3RhdGljIG1vZHVsZSB3aXRoIHJlZmxlY3Rpb24tYmFzZWQgc29sdXRpb25zIHdoZXJlIHRoZSBjb25kaXRpb24gaXMgbWV0LlxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGxlZCB3aGVuIGFueSBvYmplY3QgaXMgcmVtb3ZlZCBmcm9tIHRoaXMgcm9vdCBvciBpdHMgc3ViLW5hbWVzcGFjZXMuXHJcbiAqIEBwYXJhbSB7UmVmbGVjdGlvbk9iamVjdH0gb2JqZWN0IE9iamVjdCByZW1vdmVkXHJcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5Sb290LnByb3RvdHlwZS5faGFuZGxlUmVtb3ZlID0gZnVuY3Rpb24gX2hhbmRsZVJlbW92ZShvYmplY3QpIHtcclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBGaWVsZCkge1xyXG5cclxuICAgICAgICBpZiAoLyogYW4gZXh0ZW5zaW9uIGZpZWxkICovIG9iamVjdC5leHRlbmQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoLyogYWxyZWFkeSBoYW5kbGVkICovIG9iamVjdC5leHRlbnNpb25GaWVsZCkgeyAvLyByZW1vdmUgaXRzIHNpc3RlciBmaWVsZFxyXG4gICAgICAgICAgICAgICAgb2JqZWN0LmV4dGVuc2lvbkZpZWxkLnBhcmVudC5yZW1vdmUob2JqZWN0LmV4dGVuc2lvbkZpZWxkKTtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5leHRlbnNpb25GaWVsZCA9IG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGNhbmNlbCB0aGUgZXh0ZW5zaW9uXHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmRlZmVycmVkLmluZGV4T2Yob2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfSBlbHNlIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbnVtKSB7XHJcblxyXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBlbnVtIHZhbHVlc1xyXG5cclxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgTmFtZXNwYWNlKSB7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgLyogaW5pdGlhbGl6ZXMgKi8gb2JqZWN0Lm5lc3RlZEFycmF5Lmxlbmd0aDsgKytpKSAvLyByZWN1cnNlIGludG8gdGhlIG5hbWVzcGFjZVxyXG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZW1vdmUob2JqZWN0Ll9uZXN0ZWRBcnJheVtpXSk7XHJcblxyXG4gICAgICAgIGlmIChleHBvc2VSZS50ZXN0KG9iamVjdC5uYW1lKSlcclxuICAgICAgICAgICAgZGVsZXRlIG9iamVjdC5wYXJlbnRbb2JqZWN0Lm5hbWVdOyAvLyB1bmV4cG9zZSBuYW1lc3BhY2VzXHJcblxyXG4gICAgfVxyXG59O1xyXG5cclxuLy8gU2V0cyB1cCBjeWNsaWMgZGVwZW5kZW5jaWVzIChjYWxsZWQgaW4gaW5kZXgtbGlnaHQpXHJcblJvb3QuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKFR5cGVfLCBwYXJzZV8sIGNvbW1vbl8pIHtcclxuICAgIFR5cGUgICA9IFR5cGVfO1xyXG4gICAgcGFyc2UgID0gcGFyc2VfO1xyXG4gICAgY29tbW9uID0gY29tbW9uXztcclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJSb290IiwiTmFtZXNwYWNlIiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiY2xhc3NOYW1lIiwiRmllbGQiLCJFbnVtIiwiT25lT2YiLCJ1dGlsIiwiVHlwZSIsInBhcnNlIiwiY29tbW9uIiwib3B0aW9ucyIsImNhbGwiLCJkZWZlcnJlZCIsImZpbGVzIiwiZnJvbUpTT04iLCJqc29uIiwicm9vdCIsInNldE9wdGlvbnMiLCJhZGRKU09OIiwibmVzdGVkIiwicmVzb2x2ZVBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImZldGNoIiwiU1lOQyIsImxvYWQiLCJmaWxlbmFtZSIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwic2VsZiIsImFzUHJvbWlzZSIsInN5bmMiLCJmaW5pc2giLCJlcnIiLCJjYiIsImdldEJ1bmRsZWRGaWxlTmFtZSIsImlkeCIsImxhc3RJbmRleE9mIiwiYWx0bmFtZSIsInN1YnN0cmluZyIsInByb2Nlc3MiLCJzb3VyY2UiLCJpc1N0cmluZyIsImNoYXJBdCIsIkpTT04iLCJwYXJzZWQiLCJyZXNvbHZlZCIsImkiLCJpbXBvcnRzIiwibGVuZ3RoIiwid2Vha0ltcG9ydHMiLCJxdWV1ZWQiLCJ3ZWFrIiwiaW5kZXhPZiIsInB1c2giLCJzZXRUaW1lb3V0IiwiZnMiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsImxvYWRTeW5jIiwiaXNOb2RlIiwiRXJyb3IiLCJyZXNvbHZlQWxsIiwibWFwIiwiZmllbGQiLCJleHRlbmQiLCJwYXJlbnQiLCJmdWxsTmFtZSIsImpvaW4iLCJleHBvc2VSZSIsInRyeUhhbmRsZUV4dGVuc2lvbiIsImV4dGVuZGVkVHlwZSIsImxvb2t1cCIsInNpc3RlckZpZWxkIiwiaWQiLCJ0eXBlIiwicnVsZSIsImdldCIsIm5hbWUiLCJkZWNsYXJpbmdGaWVsZCIsImV4dGVuc2lvbkZpZWxkIiwiYWRkIiwiX2hhbmRsZUFkZCIsIm9iamVjdCIsInRlc3QiLCJ2YWx1ZXMiLCJzcGxpY2UiLCJqIiwibmVzdGVkQXJyYXkiLCJfbmVzdGVkQXJyYXkiLCJfaGFuZGxlUmVtb3ZlIiwicmVtb3ZlIiwiaW5kZXgiLCJfY29uZmlndXJlIiwiVHlwZV8iLCJwYXJzZV8iLCJjb21tb25fIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/root.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/roots.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/roots.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = {};\n\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available across modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcm9vdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1maXJlYmFzZS8uL25vZGVfbW9kdWxlcy9wcm90b2J1ZmpzL3NyYy9yb290cy5qcz8xZjkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIE5hbWVkIHJvb3RzLlxyXG4gKiBUaGlzIGlzIHdoZXJlIHBianMgc3RvcmVzIGdlbmVyYXRlZCBzdHJ1Y3R1cmVzICh0aGUgb3B0aW9uIGAtciwgLS1yb290YCBzcGVjaWZpZXMgYSBuYW1lKS5cclxuICogQ2FuIGFsc28gYmUgdXNlZCBtYW51YWxseSB0byBtYWtlIHJvb3RzIGF2YWlsYWJsZSBhY3Jvc3MgbW9kdWxlcy5cclxuICogQG5hbWUgcm9vdHNcclxuICogQHR5cGUge09iamVjdC48c3RyaW5nLFJvb3Q+fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBwYmpzIC1yIG15cm9vdCAtbyBjb21waWxlZC5qcyAuLi5cclxuICpcclxuICogLy8gaW4gYW5vdGhlciBtb2R1bGU6XHJcbiAqIHJlcXVpcmUoXCIuL2NvbXBpbGVkLmpzXCIpO1xyXG4gKlxyXG4gKiAvLyBpbiBhbnkgc3Vic2VxdWVudCBtb2R1bGU6XHJcbiAqIHZhciByb290ID0gcHJvdG9idWYucm9vdHNbXCJteXJvb3RcIl07XHJcbiAqL1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc.js":
/*!********************************************!*\
  !*** ./node_modules/protobufjs/src/rpc.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\nvar rpc = exports;\n\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\n\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"(ssr)/./node_modules/protobufjs/src/rpc/service.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvcnBjLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsR0FBRyxHQUFHQyxPQUFPOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFELEdBQUcsQ0FBQ0UsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLHlFQUFlLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZpcmViYXNlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3JwYy5qcz80Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLyoqXHJcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cclxuICogQG5hbWVzcGFjZVxyXG4gKi9cclxudmFyIHJwYyA9IGV4cG9ydHM7XHJcblxyXG4vKipcclxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxyXG4gKiBAdHlwZWRlZiBSUENJbXBsXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gcmVxdWVzdERhdGEgUmVxdWVzdCBkYXRhXHJcbiAqIEBwYXJhbSB7UlBDSW1wbENhbGxiYWNrfSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvblxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBmdW5jdGlvbiBycGNJbXBsKG1ldGhvZCwgcmVxdWVzdERhdGEsIGNhbGxiYWNrKSB7XHJcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcclxuICogICAgICAgICB0aHJvdyBFcnJvcihcIm5vIHN1Y2ggbWV0aG9kXCIpO1xyXG4gKiAgICAgYXN5bmNocm9ub3VzbHlPYnRhaW5BUmVzcG9uc2UocmVxdWVzdERhdGEsIGZ1bmN0aW9uKGVyciwgcmVzcG9uc2VEYXRhKSB7XHJcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xyXG4gKiAgICAgfSk7XHJcbiAqIH1cclxuICovXHJcblxyXG4vKipcclxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cclxuICogQHR5cGVkZWYgUlBDSW1wbENhbGxiYWNrXHJcbiAqIEB0eXBlIHtmdW5jdGlvbn1cclxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXHJcbiAqIEBwYXJhbSB7VWludDhBcnJheXxudWxsfSBbcmVzcG9uc2VdIFJlc3BvbnNlIGRhdGEgb3IgYG51bGxgIHRvIHNpZ25hbCBlbmQgb2Ygc3RyZWFtLCBpZiB0aGVyZSBoYXNuJ3QgYmVlbiBhbiBlcnJvclxyXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxyXG4gKi9cclxuXHJcbnJwYy5TZXJ2aWNlID0gcmVxdWlyZShcIi4vcnBjL3NlcnZpY2VcIik7XHJcbiJdLCJuYW1lcyI6WyJycGMiLCJleHBvcnRzIiwiU2VydmljZSIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/rpc/service.js":
/*!****************************************************!*\
  !*** ./node_modules/protobufjs/src/rpc/service.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Service;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\n\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\n\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n  util.EventEmitter.call(this);\n\n  /**\r\n   * RPC implementation. Becomes `null` once the service is ended.\r\n   * @type {RPCImpl|null}\r\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\r\n   * Whether requests are length-delimited.\r\n   * @type {boolean}\r\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\r\n   * Whether responses are length-delimited.\r\n   * @type {boolean}\r\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n  if (!request) throw TypeError(\"request must be specified\");\n  var self = this;\n  if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n  if (!self.rpcImpl) {\n    setTimeout(function () {\n      callback(Error(\"already ended\"));\n    }, 0);\n    return undefined;\n  }\n  try {\n    return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n      if (err) {\n        self.emit(\"error\", err, method);\n        return callback(err);\n      }\n      if (response === null) {\n        self.end( /* endedByRPC */true);\n        return undefined;\n      }\n      if (!(response instanceof responseCtor)) {\n        try {\n          response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n        } catch (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n      }\n      self.emit(\"data\", response, method);\n      return callback(null, response);\n    });\n  } catch (err) {\n    self.emit(\"error\", err, method);\n    setTimeout(function () {\n      callback(err);\n    }, 0);\n    return undefined;\n  }\n};\n\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/service.js":
/*!************************************************!*\
  !*** ./node_modules/protobufjs/src/service.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = __webpack_require__(/*! ./method */ \"(ssr)/./node_modules/protobufjs/src/method.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  rpc = __webpack_require__(/*! ./rpc */ \"(ssr)/./node_modules/protobufjs/src/rpc.js\");\n\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\r\n   * Service methods.\r\n   * @type {Object.<string,Method>}\r\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\r\n   * Cached methods as an array.\r\n   * @type {Method[]|null}\r\n   * @private\r\n   */\n  this._methodsArray = null;\n}\n\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\n\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n\n/**\r\n * @override\r\n */\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n\n/**\r\n * @override\r\n */\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return Namespace.prototype.resolve.call(this);\n};\n\n/**\r\n * @override\r\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\r\n * @override\r\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n  for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n  return rpcService;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/service.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/tokenize.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/tokenize.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g,\n  stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n  stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */,\n  setCommentAltRe = /^\\s*\\*?\\/*/,\n  setCommentSplitRe = /\\n/g,\n  whitespaceRe = /\\s/,\n  unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n  \"0\": \"\\0\",\n  \"r\": \"\\r\",\n  \"n\": \"\\n\",\n  \"t\": \"\\t\"\n};\n\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\nfunction unescape(str) {\n  return str.replace(unescapeRe, function ($0, $1) {\n    switch ($1) {\n      case \"\\\\\":\n      case \"\":\n        return $1;\n      default:\n        return unescapeMap[$1] || \"\";\n    }\n  });\n}\ntokenize.unescape = unescape;\n\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\n\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\n\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\n\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\n\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\n\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\nfunction tokenize(source, alternateCommentMode) {\n  /* eslint-disable callback-return */\n  source = source.toString();\n  var offset = 0,\n    length = source.length,\n    line = 1,\n    lastCommentLine = 0,\n    comments = {};\n  var stack = [];\n  var stringDelim = null;\n\n  /* istanbul ignore next */\n  /**\r\n   * Creates an error for illegal syntax.\r\n   * @param {string} subject Subject\r\n   * @returns {Error} Error created\r\n   * @inner\r\n   */\n  function illegal(subject) {\n    return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n  }\n\n  /**\r\n   * Reads a string till its end.\r\n   * @returns {string} String read\r\n   * @inner\r\n   */\n  function readString() {\n    var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n    re.lastIndex = offset - 1;\n    var match = re.exec(source);\n    if (!match) throw illegal(\"string\");\n    offset = re.lastIndex;\n    push(stringDelim);\n    stringDelim = null;\n    return unescape(match[1]);\n  }\n\n  /**\r\n   * Gets the character at `pos` within the source.\r\n   * @param {number} pos Position\r\n   * @returns {string} Character\r\n   * @inner\r\n   */\n  function charAt(pos) {\n    return source.charAt(pos);\n  }\n\n  /**\r\n   * Sets the current comment text.\r\n   * @param {number} start Start offset\r\n   * @param {number} end End offset\r\n   * @param {boolean} isLeading set if a leading comment\r\n   * @returns {undefined}\r\n   * @inner\r\n   */\n  function setComment(start, end, isLeading) {\n    var comment = {\n      type: source.charAt(start++),\n      lineEmpty: false,\n      leading: isLeading\n    };\n    var lookback;\n    if (alternateCommentMode) {\n      lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n    } else {\n      lookback = 3; // \"///\" or \"/**\"\n    }\n\n    var commentOffset = start - lookback,\n      c;\n    do {\n      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n        comment.lineEmpty = true;\n        break;\n      }\n    } while (c === \" \" || c === \"\\t\");\n    var lines = source.substring(start, end).split(setCommentSplitRe);\n    for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n    comment.text = lines.join(\"\\n\").trim();\n    comments[line] = comment;\n    lastCommentLine = line;\n  }\n  function isDoubleSlashCommentLine(startOffset) {\n    var endOffset = findEndOfLine(startOffset);\n\n    // see if remaining line matches comment pattern\n    var lineText = source.substring(startOffset, endOffset);\n    var isComment = /^\\s*\\/\\//.test(lineText);\n    return isComment;\n  }\n  function findEndOfLine(cursor) {\n    // find end of cursor's line\n    var endOffset = cursor;\n    while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n      endOffset++;\n    }\n    return endOffset;\n  }\n\n  /**\r\n   * Obtains the next token.\r\n   * @returns {string|null} Next token or `null` on eof\r\n   * @inner\r\n   */\n  function next() {\n    if (stack.length > 0) return stack.shift();\n    if (stringDelim) return readString();\n    var repeat,\n      prev,\n      curr,\n      start,\n      isDoc,\n      isLeadingComment = offset === 0;\n    do {\n      if (offset === length) return null;\n      repeat = false;\n      while (whitespaceRe.test(curr = charAt(offset))) {\n        if (curr === \"\\n\") {\n          isLeadingComment = true;\n          ++line;\n        }\n        if (++offset === length) return null;\n      }\n      if (charAt(offset) === \"/\") {\n        if (++offset === length) {\n          throw illegal(\"comment\");\n        }\n        if (charAt(offset) === \"/\") {\n          // Line\n          if (!alternateCommentMode) {\n            // check for triple-slash comment\n            isDoc = charAt(start = offset + 1) === \"/\";\n            while (charAt(++offset) !== \"\\n\") {\n              if (offset === length) {\n                return null;\n              }\n            }\n            ++offset;\n            if (isDoc) {\n              setComment(start, offset - 1, isLeadingComment);\n              // Trailing comment cannot not be multi-line,\n              // so leading comment state should be reset to handle potential next comments\n              isLeadingComment = true;\n            }\n            ++line;\n            repeat = true;\n          } else {\n            // check for double-slash comments, consolidating consecutive lines\n            start = offset;\n            isDoc = false;\n            if (isDoubleSlashCommentLine(offset - 1)) {\n              isDoc = true;\n              do {\n                offset = findEndOfLine(offset);\n                if (offset === length) {\n                  break;\n                }\n                offset++;\n                if (!isLeadingComment) {\n                  // Trailing comment cannot not be multi-line\n                  break;\n                }\n              } while (isDoubleSlashCommentLine(offset));\n            } else {\n              offset = Math.min(length, findEndOfLine(offset) + 1);\n            }\n            if (isDoc) {\n              setComment(start, offset, isLeadingComment);\n              isLeadingComment = true;\n            }\n            line++;\n            repeat = true;\n          }\n        } else if ((curr = charAt(offset)) === \"*\") {\n          /* Block */\n          // check for /** (regular comment mode) or /* (alternate comment mode)\n          start = offset + 1;\n          isDoc = alternateCommentMode || charAt(start) === \"*\";\n          do {\n            if (curr === \"\\n\") {\n              ++line;\n            }\n            if (++offset === length) {\n              throw illegal(\"comment\");\n            }\n            prev = curr;\n            curr = charAt(offset);\n          } while (prev !== \"*\" || curr !== \"/\");\n          ++offset;\n          if (isDoc) {\n            setComment(start, offset - 2, isLeadingComment);\n            isLeadingComment = true;\n          }\n          repeat = true;\n        } else {\n          return \"/\";\n        }\n      }\n    } while (repeat);\n\n    // offset !== length if we got here\n\n    var end = offset;\n    delimRe.lastIndex = 0;\n    var delim = delimRe.test(charAt(end++));\n    if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;\n    var token = source.substring(offset, offset = end);\n    if (token === \"\\\"\" || token === \"'\") stringDelim = token;\n    return token;\n  }\n\n  /**\r\n   * Pushes a token back to the stack.\r\n   * @param {string} token Token\r\n   * @returns {undefined}\r\n   * @inner\r\n   */\n  function push(token) {\n    stack.push(token);\n  }\n\n  /**\r\n   * Peeks for the next token.\r\n   * @returns {string|null} Token or `null` on eof\r\n   * @inner\r\n   */\n  function peek() {\n    if (!stack.length) {\n      var token = next();\n      if (token === null) return null;\n      push(token);\n    }\n    return stack[0];\n  }\n\n  /**\r\n   * Skips a token.\r\n   * @param {string} expected Expected token\r\n   * @param {boolean} [optional=false] Whether the token is optional\r\n   * @returns {boolean} `true` when skipped, `false` if not\r\n   * @throws {Error} When a required token is not present\r\n   * @inner\r\n   */\n  function skip(expected, optional) {\n    var actual = peek(),\n      equals = actual === expected;\n    if (equals) {\n      next();\n      return true;\n    }\n    if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n    return false;\n  }\n\n  /**\r\n   * Gets a comment.\r\n   * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n   * @returns {string|null} Comment text\r\n   * @inner\r\n   */\n  function cmnt(trailingLine) {\n    var ret = null;\n    var comment;\n    if (trailingLine === undefined) {\n      comment = comments[line - 1];\n      delete comments[line - 1];\n      if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n        ret = comment.leading ? comment.text : null;\n      }\n    } else {\n      /* istanbul ignore else */\n      if (lastCommentLine < trailingLine) {\n        peek();\n      }\n      comment = comments[trailingLine];\n      delete comments[trailingLine];\n      if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n        ret = comment.leading ? null : comment.text;\n      }\n    }\n    return ret;\n  }\n  return Object.defineProperty({\n    next: next,\n    peek: peek,\n    push: push,\n    skip: skip,\n    cmnt: cmnt\n  }, \"line\", {\n    get: function () {\n      return line;\n    }\n  });\n  /* eslint-enable callback-return */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/tokenize.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/type.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/type.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = __webpack_require__(/*! ./namespace */ \"(ssr)/./node_modules/protobufjs/src/namespace.js\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  OneOf = __webpack_require__(/*! ./oneof */ \"(ssr)/./node_modules/protobufjs/src/oneof.js\"),\n  Field = __webpack_require__(/*! ./field */ \"(ssr)/./node_modules/protobufjs/src/field.js\"),\n  MapField = __webpack_require__(/*! ./mapfield */ \"(ssr)/./node_modules/protobufjs/src/mapfield.js\"),\n  Service = __webpack_require__(/*! ./service */ \"(ssr)/./node_modules/protobufjs/src/service.js\"),\n  Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\"),\n  Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/protobufjs/src/reader.js\"),\n  Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\"),\n  encoder = __webpack_require__(/*! ./encoder */ \"(ssr)/./node_modules/protobufjs/src/encoder.js\"),\n  decoder = __webpack_require__(/*! ./decoder */ \"(ssr)/./node_modules/protobufjs/src/decoder.js\"),\n  verifier = __webpack_require__(/*! ./verifier */ \"(ssr)/./node_modules/protobufjs/src/verifier.js\"),\n  converter = __webpack_require__(/*! ./converter */ \"(ssr)/./node_modules/protobufjs/src/converter.js\"),\n  wrappers = __webpack_require__(/*! ./wrappers */ \"(ssr)/./node_modules/protobufjs/src/wrappers.js\");\n\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\nfunction Type(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\r\n   * Message fields.\r\n   * @type {Object.<string,Field>}\r\n   */\n  this.fields = {}; // toJSON, marker\n\n  /**\r\n   * Oneofs declared within this namespace, if any.\r\n   * @type {Object.<string,OneOf>}\r\n   */\n  this.oneofs = undefined; // toJSON\n\n  /**\r\n   * Extension ranges, if any.\r\n   * @type {number[][]}\r\n   */\n  this.extensions = undefined; // toJSON\n\n  /**\r\n   * Reserved ranges, if any.\r\n   * @type {Array.<number[]|string>}\r\n   */\n  this.reserved = undefined; // toJSON\n\n  /*?\r\n   * Whether this type is a legacy group.\r\n   * @type {boolean|undefined}\r\n   */\n  this.group = undefined; // toJSON\n\n  /**\r\n   * Cached fields by id.\r\n   * @type {Object.<number,Field>|null}\r\n   * @private\r\n   */\n  this._fieldsById = null;\n\n  /**\r\n   * Cached fields as an array.\r\n   * @type {Field[]|null}\r\n   * @private\r\n   */\n  this._fieldsArray = null;\n\n  /**\r\n   * Cached oneofs as an array.\r\n   * @type {OneOf[]|null}\r\n   * @private\r\n   */\n  this._oneofsArray = null;\n\n  /**\r\n   * Cached constructor.\r\n   * @type {Constructor<{}>}\r\n   * @private\r\n   */\n  this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n  /**\r\n   * Message fields by id.\r\n   * @name Type#fieldsById\r\n   * @type {Object.<number,Field>}\r\n   * @readonly\r\n   */\n  fieldsById: {\n    get: function () {\n      /* istanbul ignore if */\n      if (this._fieldsById) return this._fieldsById;\n      this._fieldsById = {};\n      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n        var field = this.fields[names[i]],\n          id = field.id;\n\n        /* istanbul ignore if */\n        if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this._fieldsById[id] = field;\n      }\n      return this._fieldsById;\n    }\n  },\n  /**\r\n   * Fields of this message as an array for iteration.\r\n   * @name Type#fieldsArray\r\n   * @type {Field[]}\r\n   * @readonly\r\n   */\n  fieldsArray: {\n    get: function () {\n      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n    }\n  },\n  /**\r\n   * Oneofs of this message as an array for iteration.\r\n   * @name Type#oneofsArray\r\n   * @type {OneOf[]}\r\n   * @readonly\r\n   */\n  oneofsArray: {\n    get: function () {\n      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n    }\n  },\n  /**\r\n   * The registered constructor, if any registered, otherwise a generic constructor.\r\n   * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n   * @name Type#ctor\r\n   * @type {Constructor<{}>}\r\n   */\n  ctor: {\n    get: function () {\n      return this._ctor || (this.ctor = Type.generateConstructor(this)());\n    },\n    set: function (ctor) {\n      // Ensure proper prototype\n      var prototype = ctor.prototype;\n      if (!(prototype instanceof Message)) {\n        (ctor.prototype = new Message()).constructor = ctor;\n        util.merge(ctor.prototype, prototype);\n      }\n\n      // Classes and messages reference their reflected type\n      ctor.$type = ctor.prototype.$type = this;\n\n      // Mix in static methods\n      util.merge(ctor, Message, true);\n      this._ctor = ctor;\n\n      // Messages have non-enumerable default values on their prototype\n      var i = 0;\n      for (; i < /* initializes */this.fieldsArray.length; ++i) this._fieldsArray[i].resolve(); // ensures a proper value\n\n      // Messages have non-enumerable getters and setters for each virtual oneof field\n      var ctorProperties = {};\n      for (i = 0; i < /* initializes */this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {\n        get: util.oneOfGetter(this._oneofsArray[i].oneof),\n        set: util.oneOfSetter(this._oneofsArray[i].oneof)\n      };\n      if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n    }\n  }\n});\n\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nType.generateConstructor = function generateConstructor(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"p\"], mtype.name);\n  // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n  return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n  (\"this[ks[i]]=p[ks[i]]\");\n  /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n  type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n  delete type.encode;\n  delete type.decode;\n  delete type.verify;\n  return type;\n}\n\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {Array.<number[]|string>} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\n\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\nType.fromJSON = function fromJSON(name, json) {\n  var type = new Type(name, json.options);\n  type.extensions = json.extensions;\n  type.reserved = json.reserved;\n  var names = Object.keys(json.fields),\n    i = 0;\n  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n    var nested = json.nested[names[i]];\n    type.add(\n    // most to least likely\n    (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n  }\n  if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n  if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n  if (json.group) type.group = true;\n  if (json.comment) type.comment = json.comment;\n  return type;\n};\n\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"oneofs\", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), \"fields\", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {\n    return !obj.declaringField;\n  }), toJSONOptions) || {}, \"extensions\", this.extensions && this.extensions.length ? this.extensions : undefined, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"group\", this.group || undefined, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\r\n * @override\r\n */\nType.prototype.resolveAll = function resolveAll() {\n  var fields = this.fieldsArray,\n    i = 0;\n  while (i < fields.length) fields[i++].resolve();\n  var oneofs = this.oneofsArray;\n  i = 0;\n  while (i < oneofs.length) oneofs[i++].resolve();\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\r\n * @override\r\n */\nType.prototype.get = function get(name) {\n  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\nType.prototype.add = function add(object) {\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Field && object.extend === undefined) {\n    // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n    // The root object takes care of adding distinct sister-fields to the respective extended\n    // type instead.\n\n    // avoids calling the getter if not absolutely necessary because it's called quite frequently\n    if (this._fieldsById ? /* istanbul ignore next */this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n    if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n    if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n    if (object.parent) object.parent.remove(object);\n    this.fields[object.name] = object;\n    object.message = this;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    if (!this.oneofs) this.oneofs = {};\n    this.oneofs[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\nType.prototype.remove = function remove(object) {\n  if (object instanceof Field && object.extend === undefined) {\n    // See Type#add for the reason why extension fields are excluded here.\n\n    /* istanbul ignore if */\n    if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.fields[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    /* istanbul ignore if */\n    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.oneofs[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nType.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nType.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\nType.prototype.create = function create(properties) {\n  return new this.ctor(properties);\n};\n\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\nType.prototype.setup = function setup() {\n  // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n  // multiple times (V8, soft-deopt prototype-check).\n\n  var fullName = this.fullName,\n    types = [];\n  for (var i = 0; i < /* initializes */this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);\n\n  // Replace setup methods with type-specific generated functions\n  this.encode = encoder(this)({\n    Writer: Writer,\n    types: types,\n    util: util\n  });\n  this.decode = decoder(this)({\n    Reader: Reader,\n    types: types,\n    util: util\n  });\n  this.verify = verifier(this)({\n    types: types,\n    util: util\n  });\n  this.fromObject = converter.fromObject(this)({\n    types: types,\n    util: util\n  });\n  this.toObject = converter.toObject(this)({\n    types: types,\n    util: util\n  });\n\n  // Inject custom wrappers for common types\n  var wrapper = wrappers[fullName];\n  if (wrapper) {\n    var originalThis = Object.create(this);\n    // if (wrapper.fromObject) {\n    originalThis.fromObject = this.fromObject;\n    this.fromObject = wrapper.fromObject.bind(originalThis);\n    // }\n    // if (wrapper.toObject) {\n    originalThis.toObject = this.toObject;\n    this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n  }\n\n  return this;\n};\n\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\nType.prototype.encode = function encode_setup(message, writer) {\n  return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\nType.prototype.decode = function decode_setup(reader, length) {\n  return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n  if (!(reader instanceof Reader)) reader = Reader.create(reader);\n  return this.decode(reader, reader.uint32());\n};\n\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\nType.prototype.verify = function verify_setup(message) {\n  return this.setup().verify(message); // overrides this method\n};\n\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\nType.prototype.fromObject = function fromObject(object) {\n  return this.setup().fromObject(object);\n};\n\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\n\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\nType.prototype.toObject = function toObject(message, options) {\n  return this.setup().toObject(message, options);\n};\n\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\n\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\nType.d = function decorateType(typeName) {\n  return function typeDecorator(target) {\n    util.decorateType(target, typeName);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/type.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/types.js":
/*!**********************************************!*\
  !*** ./node_modules/protobufjs/src/types.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\nvar types = exports;\nvar util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nvar s = [\"double\",\n// 0\n\"float\",\n// 1\n\"int32\",\n// 2\n\"uint32\",\n// 3\n\"sint32\",\n// 4\n\"fixed32\",\n// 5\n\"sfixed32\",\n// 6\n\"int64\",\n// 7\n\"uint64\",\n// 8\n\"sint64\",\n// 9\n\"fixed64\",\n// 10\n\"sfixed64\",\n// 11\n\"bool\",\n// 12\n\"string\",\n// 13\n\"bytes\" // 14\n];\n\nfunction bake(values, offset) {\n  var i = 0,\n    o = {};\n  offset |= 0;\n  while (i < values.length) o[s[i + offset]] = values[i++];\n  return o;\n}\n\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\ntypes.basic = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2, /* bytes    */2]);\n\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\ntypes.defaults = bake([/* double   */0, /* float    */0, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */0, /* sfixed32 */0, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */0, /* sfixed64 */0, /* bool     */false, /* string   */\"\", /* bytes    */util.emptyArray, /* message  */null]);\n\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\ntypes.long = bake([/* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1], 7);\n\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\ntypes.mapKey = bake([/* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2], 2);\n\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\ntypes.packed = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util.js":
/*!*********************************************!*\
  !*** ./node_modules/protobufjs/src/util.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\nvar util = module.exports = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar roots = __webpack_require__(/*! ./roots */ \"(ssr)/./node_modules/protobufjs/src/roots.js\");\nvar Type,\n  // cyclic\n  Enum;\nutil.codegen = __webpack_require__(/*! @protobufjs/codegen */ \"(ssr)/./node_modules/@protobufjs/codegen/index.js\");\nutil.fetch = __webpack_require__(/*! @protobufjs/fetch */ \"(ssr)/./node_modules/@protobufjs/fetch/index.js\");\nutil.path = __webpack_require__(/*! @protobufjs/path */ \"(ssr)/./node_modules/@protobufjs/path/index.js\");\n\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\nutil.toArray = function toArray(object) {\n  if (object) {\n    var keys = Object.keys(object),\n      array = new Array(keys.length),\n      index = 0;\n    while (index < keys.length) array[index] = object[keys[index++]];\n    return array;\n  }\n  return [];\n};\n\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\nutil.toObject = function toObject(array) {\n  var object = {},\n    index = 0;\n  while (index < array.length) {\n    var key = array[index++],\n      val = array[index++];\n    if (val !== undefined) object[key] = val;\n  }\n  return object;\n};\nvar safePropBackslashRe = /\\\\/g,\n  safePropQuoteRe = /\"/g;\n\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\nutil.isReserved = function isReserved(name) {\n  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\nutil.safeProp = function safeProp(prop) {\n  if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n  return \".\" + prop;\n};\n\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\nutil.ucFirst = function ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\nutil.camelCase = function camelCase(str) {\n  return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n};\n\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n  return a.id - b.id;\n};\n\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n  /* istanbul ignore if */\n  if (ctor.$type) {\n    if (typeName && ctor.$type.name !== typeName) {\n      util.decorateRoot.remove(ctor.$type);\n      ctor.$type.name = typeName;\n      util.decorateRoot.add(ctor.$type);\n    }\n    return ctor.$type;\n  }\n\n  /* istanbul ignore next */\n  if (!Type) Type = __webpack_require__(/*! ./type */ \"(ssr)/./node_modules/protobufjs/src/type.js\");\n  var type = new Type(typeName || ctor.name);\n  util.decorateRoot.add(type);\n  type.ctor = ctor; // sets up .encode, .decode etc.\n  Object.defineProperty(ctor, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  Object.defineProperty(ctor.prototype, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  return type;\n};\nvar decorateEnumIndex = 0;\n\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\nutil.decorateEnum = function decorateEnum(object) {\n  /* istanbul ignore if */\n  if (object.$type) return object.$type;\n\n  /* istanbul ignore next */\n  if (!Enum) Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\");\n  var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n  util.decorateRoot.add(enm);\n  Object.defineProperty(object, \"$type\", {\n    value: enm,\n    enumerable: false\n  });\n  return enm;\n};\n\n/**\r\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {string} path dot '.' delimited path of the property to set\r\n * @param {Object} value the value to set\r\n * @returns {Object.<string,*>} Destination object\r\n */\nutil.setProperty = function setProperty(dst, path, value) {\n  function setProp(dst, path, value) {\n    var part = path.shift();\n    if (part === \"__proto__\" || part === \"prototype\") {\n      return dst;\n    }\n    if (path.length > 0) {\n      dst[part] = setProp(dst[part] || {}, path, value);\n    } else {\n      var prevValue = dst[part];\n      if (prevValue) value = [].concat(prevValue).concat(value);\n      dst[part] = value;\n    }\n    return dst;\n  }\n  if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n  if (!path) throw TypeError(\"path must be specified\");\n  path = path.split(\".\");\n  return setProp(dst, path, value);\n};\n\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\nObject.defineProperty(util, \"decorateRoot\", {\n  get: function () {\n    return roots[\"decorated\"] || (roots[\"decorated\"] = new (__webpack_require__(/*! ./root */ \"(ssr)/./node_modules/protobufjs/src/root.js\"))());\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/longbits.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/util/longbits.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = LongBits;\nvar util = __webpack_require__(/*! ../util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\nfunction LongBits(lo, hi) {\n  // note that the casts below are theoretically unnecessary as of today, but older statically\n  // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n  /**\r\n   * Low bits.\r\n   * @type {number}\r\n   */\n  this.lo = lo >>> 0;\n\n  /**\r\n   * High bits.\r\n   * @type {number}\r\n   */\n  this.hi = hi >>> 0;\n}\n\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function () {\n  return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n  return this;\n};\nzero.length = function () {\n  return 1;\n};\n\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\nLongBits.fromNumber = function fromNumber(value) {\n  if (value === 0) return zero;\n  var sign = value < 0;\n  if (sign) value = -value;\n  var lo = value >>> 0,\n    hi = (value - lo) / 4294967296 >>> 0;\n  if (sign) {\n    hi = ~hi >>> 0;\n    lo = ~lo >>> 0;\n    if (++lo > 4294967295) {\n      lo = 0;\n      if (++hi > 4294967295) hi = 0;\n    }\n  }\n  return new LongBits(lo, hi);\n};\n\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\nLongBits.from = function from(value) {\n  if (typeof value === \"number\") return LongBits.fromNumber(value);\n  if (util.isString(value)) {\n    /* istanbul ignore else */\n    if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n  }\n  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n  if (!unsigned && this.hi >>> 31) {\n    var lo = ~this.lo + 1 >>> 0,\n      hi = ~this.hi >>> 0;\n    if (!lo) hi = hi + 1 >>> 0;\n    return -(lo + hi * 4294967296);\n  }\n  return this.lo + this.hi * 4294967296;\n};\n\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n  return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n  /* istanbul ignore next */ : {\n    low: this.lo | 0,\n    high: this.hi | 0,\n    unsigned: Boolean(unsigned)\n  };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\nLongBits.fromHash = function fromHash(hash) {\n  if (hash === zeroHash) return zero;\n  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\nLongBits.prototype.toHash = function toHash() {\n  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n  var mask = this.hi >> 31;\n  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n  this.lo = (this.lo << 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n  var mask = -(this.lo & 1);\n  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n  this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\nLongBits.prototype.length = function length() {\n  var part0 = this.lo,\n    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n    part2 = this.hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9sb25nYml0cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFFBQVE7QUFFekIsSUFBSUMsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDRFQUFpQixDQUFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0YsUUFBUUEsQ0FBQ0csRUFBRSxFQUFFQyxFQUFFLEVBQUU7RUFFdEI7RUFDQTs7RUFFQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLElBQUksQ0FBQ0QsRUFBRSxHQUFHQSxFQUFFLEtBQUssQ0FBQzs7RUFFbEI7QUFDSjtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNDLEVBQUUsR0FBR0EsRUFBRSxLQUFLLENBQUM7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlDLElBQUksR0FBR0wsUUFBUSxDQUFDSyxJQUFJLEdBQUcsSUFBSUwsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFN0NLLElBQUksQ0FBQ0MsUUFBUSxHQUFHLFlBQVc7RUFBRSxPQUFPLENBQUM7QUFBRSxDQUFDO0FBQ3hDRCxJQUFJLENBQUNFLFFBQVEsR0FBR0YsSUFBSSxDQUFDRyxRQUFRLEdBQUcsWUFBVztFQUFFLE9BQU8sSUFBSTtBQUFFLENBQUM7QUFDM0RILElBQUksQ0FBQ0ksTUFBTSxHQUFHLFlBQVc7RUFBRSxPQUFPLENBQUM7QUFBRSxDQUFDOztBQUV0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsUUFBUSxHQUFHVixRQUFRLENBQUNVLFFBQVEsR0FBRyxrQkFBa0I7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVYsUUFBUSxDQUFDVyxVQUFVLEdBQUcsU0FBU0EsVUFBVUEsQ0FBQ0MsS0FBSyxFQUFFO0VBQzdDLElBQUlBLEtBQUssS0FBSyxDQUFDLEVBQ1gsT0FBT1AsSUFBSTtFQUNmLElBQUlRLElBQUksR0FBR0QsS0FBSyxHQUFHLENBQUM7RUFDcEIsSUFBSUMsSUFBSSxFQUNKRCxLQUFLLEdBQUcsQ0FBQ0EsS0FBSztFQUNsQixJQUFJVCxFQUFFLEdBQUdTLEtBQUssS0FBSyxDQUFDO0lBQ2hCUixFQUFFLEdBQUcsQ0FBQ1EsS0FBSyxHQUFHVCxFQUFFLElBQUksVUFBVSxLQUFLLENBQUM7RUFDeEMsSUFBSVUsSUFBSSxFQUFFO0lBQ05ULEVBQUUsR0FBRyxDQUFDQSxFQUFFLEtBQUssQ0FBQztJQUNkRCxFQUFFLEdBQUcsQ0FBQ0EsRUFBRSxLQUFLLENBQUM7SUFDZCxJQUFJLEVBQUVBLEVBQUUsR0FBRyxVQUFVLEVBQUU7TUFDbkJBLEVBQUUsR0FBRyxDQUFDO01BQ04sSUFBSSxFQUFFQyxFQUFFLEdBQUcsVUFBVSxFQUNqQkEsRUFBRSxHQUFHLENBQUM7SUFDZDtFQUNKO0VBQ0EsT0FBTyxJQUFJSixRQUFRLENBQUNHLEVBQUUsRUFBRUMsRUFBRSxDQUFDO0FBQy9CLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNjLElBQUksR0FBRyxTQUFTQSxJQUFJQSxDQUFDRixLQUFLLEVBQUU7RUFDakMsSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxFQUN6QixPQUFPWixRQUFRLENBQUNXLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3JDLElBQUlYLElBQUksQ0FBQ2MsUUFBUSxDQUFDSCxLQUFLLENBQUMsRUFBRTtJQUN0QjtJQUNBLElBQUlYLElBQUksQ0FBQ2UsSUFBSSxFQUNUSixLQUFLLEdBQUdYLElBQUksQ0FBQ2UsSUFBSSxDQUFDQyxVQUFVLENBQUNMLEtBQUssQ0FBQyxDQUFDLEtBRXBDLE9BQU9aLFFBQVEsQ0FBQ1csVUFBVSxDQUFDTyxRQUFRLENBQUNOLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztFQUN2RDtFQUNBLE9BQU9BLEtBQUssQ0FBQ08sR0FBRyxJQUFJUCxLQUFLLENBQUNRLElBQUksR0FBRyxJQUFJcEIsUUFBUSxDQUFDWSxLQUFLLENBQUNPLEdBQUcsS0FBSyxDQUFDLEVBQUVQLEtBQUssQ0FBQ1EsSUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHZixJQUFJO0FBQzNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBTCxRQUFRLENBQUNxQixTQUFTLENBQUNmLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFDZ0IsUUFBUSxFQUFFO0VBQ3RELElBQUksQ0FBQ0EsUUFBUSxJQUFJLElBQUksQ0FBQ2xCLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDN0IsSUFBSUQsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDQSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUM7TUFDdkJDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQ0EsRUFBRSxLQUFTLENBQUM7SUFDM0IsSUFBSSxDQUFDRCxFQUFFLEVBQ0hDLEVBQUUsR0FBR0EsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ3JCLE9BQU8sRUFBRUQsRUFBRSxHQUFHQyxFQUFFLEdBQUcsVUFBVSxDQUFDO0VBQ2xDO0VBQ0EsT0FBTyxJQUFJLENBQUNELEVBQUUsR0FBRyxJQUFJLENBQUNDLEVBQUUsR0FBRyxVQUFVO0FBQ3pDLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNxQixTQUFTLENBQUNFLE1BQU0sR0FBRyxTQUFTQSxNQUFNQSxDQUFDRCxRQUFRLEVBQUU7RUFDbEQsT0FBT3JCLElBQUksQ0FBQ2UsSUFBSSxHQUNWLElBQUlmLElBQUksQ0FBQ2UsSUFBSSxDQUFDLElBQUksQ0FBQ2IsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUNDLEVBQUUsR0FBRyxDQUFDLEVBQUVvQixPQUFPLENBQUNGLFFBQVEsQ0FBQztFQUMzRCw2QkFDRTtJQUFFSCxHQUFHLEVBQUUsSUFBSSxDQUFDaEIsRUFBRSxHQUFHLENBQUM7SUFBRWlCLElBQUksRUFBRSxJQUFJLENBQUNoQixFQUFFLEdBQUcsQ0FBQztJQUFFa0IsUUFBUSxFQUFFRSxPQUFPLENBQUNGLFFBQVE7RUFBRSxDQUFDO0FBQzlFLENBQUM7QUFFRCxJQUFJRyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0wsU0FBUyxDQUFDSSxVQUFVOztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0F6QixRQUFRLENBQUMyQixRQUFRLEdBQUcsU0FBU0EsUUFBUUEsQ0FBQ0MsSUFBSSxFQUFFO0VBQ3hDLElBQUlBLElBQUksS0FBS2xCLFFBQVEsRUFDakIsT0FBT0wsSUFBSTtFQUNmLE9BQU8sSUFBSUwsUUFBUSxDQUNmLENBQUV5QixVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUN4QkgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQzdCSCxVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FDOUJILFVBQVUsQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFFdkMsQ0FBRUgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsR0FDeEJILFVBQVUsQ0FBQ0ksSUFBSSxDQUFDRCxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUM3QkgsVUFBVSxDQUFDSSxJQUFJLENBQUNELElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQzlCSCxVQUFVLENBQUNJLElBQUksQ0FBQ0QsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUMxQyxDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBNUIsUUFBUSxDQUFDcUIsU0FBUyxDQUFDUyxNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHO0VBQzFDLE9BQU9KLE1BQU0sQ0FBQ0ssWUFBWSxDQUN0QixJQUFJLENBQUM1QixFQUFFLEdBQVUsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQUksR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEVBQ2QsSUFBSSxDQUFDQyxFQUFFLEdBQVUsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQUksR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxFQUNwQixJQUFJLENBQUNBLEVBQUUsS0FBSyxFQUNoQixDQUFDO0FBQ0wsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBSixRQUFRLENBQUNxQixTQUFTLENBQUNkLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDOUMsSUFBSXlCLElBQUksR0FBSyxJQUFJLENBQUM1QixFQUFFLElBQUksRUFBRTtFQUMxQixJQUFJLENBQUNBLEVBQUUsR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDQSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQ0QsRUFBRSxLQUFLLEVBQUUsSUFBSTZCLElBQUksTUFBTSxDQUFDO0VBQ3pELElBQUksQ0FBQzdCLEVBQUUsR0FBSSxDQUFFLElBQUksQ0FBQ0EsRUFBRSxJQUFJLENBQUMsR0FBcUI2QixJQUFJLE1BQU0sQ0FBQztFQUN6RCxPQUFPLElBQUk7QUFDZixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0FoQyxRQUFRLENBQUNxQixTQUFTLENBQUNiLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFBLEVBQUc7RUFDOUMsSUFBSXdCLElBQUksR0FBRyxFQUFFLElBQUksQ0FBQzdCLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDekIsSUFBSSxDQUFDQSxFQUFFLEdBQUksQ0FBQyxDQUFDLElBQUksQ0FBQ0EsRUFBRSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUNDLEVBQUUsSUFBSSxFQUFFLElBQUk0QixJQUFJLE1BQU0sQ0FBQztFQUN6RCxJQUFJLENBQUM1QixFQUFFLEdBQUksQ0FBRSxJQUFJLENBQUNBLEVBQUUsS0FBSyxDQUFDLEdBQW9CNEIsSUFBSSxNQUFNLENBQUM7RUFDekQsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBaEMsUUFBUSxDQUFDcUIsU0FBUyxDQUFDWixNQUFNLEdBQUcsU0FBU0EsTUFBTUEsQ0FBQSxFQUFHO0VBQzFDLElBQUl3QixLQUFLLEdBQUksSUFBSSxDQUFDOUIsRUFBRTtJQUNoQitCLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQy9CLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0MrQixLQUFLLEdBQUksSUFBSSxDQUFDL0IsRUFBRSxLQUFLLEVBQUU7RUFDM0IsT0FBTytCLEtBQUssS0FBSyxDQUFDLEdBQ1hELEtBQUssS0FBSyxDQUFDLEdBQ1RELEtBQUssR0FBRyxLQUFLLEdBQ1hBLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDbkJBLEtBQUssR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDekJDLEtBQUssR0FBRyxLQUFLLEdBQ1hBLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDbkJBLEtBQUssR0FBRyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FDM0JDLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDL0IsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZmlyZWJhc2UvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvdXRpbC9sb25nYml0cy5qcz9hNTZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IExvbmdCaXRzO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi4vdXRpbC9taW5pbWFsXCIpO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cy5cclxuICogQGNsYXNzZGVzYyBIZWxwZXIgY2xhc3MgZm9yIHdvcmtpbmcgd2l0aCB0aGUgbG93IGFuZCBoaWdoIGJpdHMgb2YgYSA2NCBiaXQgdmFsdWUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge251bWJlcn0gbG8gTG93IDMyIGJpdHMsIHVuc2lnbmVkXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSBIaWdoIDMyIGJpdHMsIHVuc2lnbmVkXHJcbiAqL1xyXG5mdW5jdGlvbiBMb25nQml0cyhsbywgaGkpIHtcclxuXHJcbiAgICAvLyBub3RlIHRoYXQgdGhlIGNhc3RzIGJlbG93IGFyZSB0aGVvcmV0aWNhbGx5IHVubmVjZXNzYXJ5IGFzIG9mIHRvZGF5LCBidXQgb2xkZXIgc3RhdGljYWxseVxyXG4gICAgLy8gZ2VuZXJhdGVkIGNvbnZlcnRlciBjb2RlIG1pZ2h0IHN0aWxsIGNhbGwgdGhlIGN0b3Igd2l0aCBzaWduZWQgMzJiaXRzLiBrZXB0IGZvciBjb21wYXQuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBMb3cgYml0cy5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMubG8gPSBsbyA+Pj4gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZ2ggYml0cy5cclxuICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHRoaXMuaGkgPSBoaSA+Pj4gMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFplcm8gYml0cy5cclxuICogQG1lbWJlcm9mIHV0aWwuTG9uZ0JpdHNcclxuICogQHR5cGUge3V0aWwuTG9uZ0JpdHN9XHJcbiAqL1xyXG52YXIgemVybyA9IExvbmdCaXRzLnplcm8gPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XHJcblxyXG56ZXJvLnRvTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xyXG56ZXJvLnp6RW5jb2RlID0gemVyby56ekRlY29kZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfTtcclxuemVyby5sZW5ndGggPSBmdW5jdGlvbigpIHsgcmV0dXJuIDE7IH07XHJcblxyXG4vKipcclxuICogWmVybyBoYXNoLlxyXG4gKiBAbWVtYmVyb2YgdXRpbC5Mb25nQml0c1xyXG4gKiBAdHlwZSB7c3RyaW5nfVxyXG4gKi9cclxudmFyIHplcm9IYXNoID0gTG9uZ0JpdHMuemVyb0hhc2ggPSBcIlxcMFxcMFxcMFxcMFxcMFxcMFxcMFxcMFwiO1xyXG5cclxuLyoqXHJcbiAqIENvbnN0cnVjdHMgbmV3IGxvbmcgYml0cyBmcm9tIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVmFsdWVcclxuICogQHJldHVybnMge3V0aWwuTG9uZ0JpdHN9IEluc3RhbmNlXHJcbiAqL1xyXG5Mb25nQml0cy5mcm9tTnVtYmVyID0gZnVuY3Rpb24gZnJvbU51bWJlcih2YWx1ZSkge1xyXG4gICAgaWYgKHZhbHVlID09PSAwKVxyXG4gICAgICAgIHJldHVybiB6ZXJvO1xyXG4gICAgdmFyIHNpZ24gPSB2YWx1ZSA8IDA7XHJcbiAgICBpZiAoc2lnbilcclxuICAgICAgICB2YWx1ZSA9IC12YWx1ZTtcclxuICAgIHZhciBsbyA9IHZhbHVlID4+PiAwLFxyXG4gICAgICAgIGhpID0gKHZhbHVlIC0gbG8pIC8gNDI5NDk2NzI5NiA+Pj4gMDtcclxuICAgIGlmIChzaWduKSB7XHJcbiAgICAgICAgaGkgPSB+aGkgPj4+IDA7XHJcbiAgICAgICAgbG8gPSB+bG8gPj4+IDA7XHJcbiAgICAgICAgaWYgKCsrbG8gPiA0Mjk0OTY3Mjk1KSB7XHJcbiAgICAgICAgICAgIGxvID0gMDtcclxuICAgICAgICAgICAgaWYgKCsraGkgPiA0Mjk0OTY3Mjk1KVxyXG4gICAgICAgICAgICAgICAgaGkgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMobG8sIGhpKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIG5ldyBsb25nIGJpdHMgZnJvbSBhIG51bWJlciwgbG9uZyBvciBzdHJpbmcuXHJcbiAqIEBwYXJhbSB7TG9uZ3xudW1iZXJ8c3RyaW5nfSB2YWx1ZSBWYWx1ZVxyXG4gKiBAcmV0dXJucyB7dXRpbC5Mb25nQml0c30gSW5zdGFuY2VcclxuICovXHJcbkxvbmdCaXRzLmZyb20gPSBmdW5jdGlvbiBmcm9tKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgIHJldHVybiBMb25nQml0cy5mcm9tTnVtYmVyKHZhbHVlKTtcclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgaWYgKHV0aWwuTG9uZylcclxuICAgICAgICAgICAgdmFsdWUgPSB1dGlsLkxvbmcuZnJvbVN0cmluZyh2YWx1ZSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gTG9uZ0JpdHMuZnJvbU51bWJlcihwYXJzZUludCh2YWx1ZSwgMTApKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZS5sb3cgfHwgdmFsdWUuaGlnaCA/IG5ldyBMb25nQml0cyh2YWx1ZS5sb3cgPj4+IDAsIHZhbHVlLmhpZ2ggPj4+IDApIDogemVybztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIHBvc3NpYmx5IHVuc2FmZSBKYXZhU2NyaXB0IG51bWJlci5cclxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFBvc3NpYmx5IHVuc2FmZSBudW1iZXJcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS50b051bWJlciA9IGZ1bmN0aW9uIHRvTnVtYmVyKHVuc2lnbmVkKSB7XHJcbiAgICBpZiAoIXVuc2lnbmVkICYmIHRoaXMuaGkgPj4+IDMxKSB7XHJcbiAgICAgICAgdmFyIGxvID0gfnRoaXMubG8gKyAxID4+PiAwLFxyXG4gICAgICAgICAgICBoaSA9IH50aGlzLmhpICAgICA+Pj4gMDtcclxuICAgICAgICBpZiAoIWxvKVxyXG4gICAgICAgICAgICBoaSA9IGhpICsgMSA+Pj4gMDtcclxuICAgICAgICByZXR1cm4gLShsbyArIGhpICogNDI5NDk2NzI5Nik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5sbyArIHRoaXMuaGkgKiA0Mjk0OTY3Mjk2O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIHRoaXMgbG9uZyBiaXRzIHRvIGEgbG9uZy5cclxuICogQHBhcmFtIHtib29sZWFufSBbdW5zaWduZWQ9ZmFsc2VdIFdoZXRoZXIgdW5zaWduZWQgb3Igbm90XHJcbiAqIEByZXR1cm5zIHtMb25nfSBMb25nXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUudG9Mb25nID0gZnVuY3Rpb24gdG9Mb25nKHVuc2lnbmVkKSB7XHJcbiAgICByZXR1cm4gdXRpbC5Mb25nXHJcbiAgICAgICAgPyBuZXcgdXRpbC5Mb25nKHRoaXMubG8gfCAwLCB0aGlzLmhpIHwgMCwgQm9vbGVhbih1bnNpZ25lZCkpXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgICA6IHsgbG93OiB0aGlzLmxvIHwgMCwgaGlnaDogdGhpcy5oaSB8IDAsIHVuc2lnbmVkOiBCb29sZWFuKHVuc2lnbmVkKSB9O1xyXG59O1xyXG5cclxudmFyIGNoYXJDb2RlQXQgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQ7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBuZXcgbG9uZyBiaXRzIGZyb20gdGhlIHNwZWNpZmllZCA4IGNoYXJhY3RlcnMgbG9uZyBoYXNoLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaCBIYXNoXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBCaXRzXHJcbiAqL1xyXG5Mb25nQml0cy5mcm9tSGFzaCA9IGZ1bmN0aW9uIGZyb21IYXNoKGhhc2gpIHtcclxuICAgIGlmIChoYXNoID09PSB6ZXJvSGFzaClcclxuICAgICAgICByZXR1cm4gemVybztcclxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMoXHJcbiAgICAgICAgKCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMClcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAxKSA8PCA4XHJcbiAgICAgICAgfCBjaGFyQ29kZUF0LmNhbGwoaGFzaCwgMikgPDwgMTZcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCAzKSA8PCAyNCkgPj4+IDBcclxuICAgICxcclxuICAgICAgICAoIGNoYXJDb2RlQXQuY2FsbChoYXNoLCA0KVxyXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDUpIDw8IDhcclxuICAgICAgICB8IGNoYXJDb2RlQXQuY2FsbChoYXNoLCA2KSA8PCAxNlxyXG4gICAgICAgIHwgY2hhckNvZGVBdC5jYWxsKGhhc2gsIDcpIDw8IDI0KSA+Pj4gMFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyB0aGlzIGxvbmcgYml0cyB0byBhIDggY2hhcmFjdGVycyBsb25nIGhhc2guXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEhhc2hcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbiB0b0hhc2goKSB7XHJcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShcclxuICAgICAgICB0aGlzLmxvICAgICAgICAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiA4ICAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiAxNiAmIDI1NSxcclxuICAgICAgICB0aGlzLmxvID4+PiAyNCAgICAgICxcclxuICAgICAgICB0aGlzLmhpICAgICAgICAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiA4ICAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiAxNiAmIDI1NSxcclxuICAgICAgICB0aGlzLmhpID4+PiAyNFxyXG4gICAgKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBaaWctemFnIGVuY29kZXMgdGhpcyBsb25nIGJpdHMuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS56ekVuY29kZSA9IGZ1bmN0aW9uIHp6RW5jb2RlKCkge1xyXG4gICAgdmFyIG1hc2sgPSAgIHRoaXMuaGkgPj4gMzE7XHJcbiAgICB0aGlzLmhpICA9ICgodGhpcy5oaSA8PCAxIHwgdGhpcy5sbyA+Pj4gMzEpIF4gbWFzaykgPj4+IDA7XHJcbiAgICB0aGlzLmxvICA9ICggdGhpcy5sbyA8PCAxICAgICAgICAgICAgICAgICAgIF4gbWFzaykgPj4+IDA7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBaaWctemFnIGRlY29kZXMgdGhpcyBsb25nIGJpdHMuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkxvbmdCaXRzfSBgdGhpc2BcclxuICovXHJcbkxvbmdCaXRzLnByb3RvdHlwZS56ekRlY29kZSA9IGZ1bmN0aW9uIHp6RGVjb2RlKCkge1xyXG4gICAgdmFyIG1hc2sgPSAtKHRoaXMubG8gJiAxKTtcclxuICAgIHRoaXMubG8gID0gKCh0aGlzLmxvID4+PiAxIHwgdGhpcy5oaSA8PCAzMSkgXiBtYXNrKSA+Pj4gMDtcclxuICAgIHRoaXMuaGkgID0gKCB0aGlzLmhpID4+PiAxICAgICAgICAgICAgICAgICAgXiBtYXNrKSA+Pj4gMDtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiB0aGlzIGxvbmdiaXRzIHdoZW4gZW5jb2RlZCBhcyBhIHZhcmludC5cclxuICogQHJldHVybnMge251bWJlcn0gTGVuZ3RoXHJcbiAqL1xyXG5Mb25nQml0cy5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gbGVuZ3RoKCkge1xyXG4gICAgdmFyIHBhcnQwID0gIHRoaXMubG8sXHJcbiAgICAgICAgcGFydDEgPSAodGhpcy5sbyA+Pj4gMjggfCB0aGlzLmhpIDw8IDQpID4+PiAwLFxyXG4gICAgICAgIHBhcnQyID0gIHRoaXMuaGkgPj4+IDI0O1xyXG4gICAgcmV0dXJuIHBhcnQyID09PSAwXHJcbiAgICAgICAgID8gcGFydDEgPT09IDBcclxuICAgICAgICAgICA/IHBhcnQwIDwgMTYzODRcclxuICAgICAgICAgICAgID8gcGFydDAgPCAxMjggPyAxIDogMlxyXG4gICAgICAgICAgICAgOiBwYXJ0MCA8IDIwOTcxNTIgPyAzIDogNFxyXG4gICAgICAgICAgIDogcGFydDEgPCAxNjM4NFxyXG4gICAgICAgICAgICAgPyBwYXJ0MSA8IDEyOCA/IDUgOiA2XHJcbiAgICAgICAgICAgICA6IHBhcnQxIDwgMjA5NzE1MiA/IDcgOiA4XHJcbiAgICAgICAgIDogcGFydDIgPCAxMjggPyA5IDogMTA7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiTG9uZ0JpdHMiLCJ1dGlsIiwicmVxdWlyZSIsImxvIiwiaGkiLCJ6ZXJvIiwidG9OdW1iZXIiLCJ6ekVuY29kZSIsInp6RGVjb2RlIiwibGVuZ3RoIiwiemVyb0hhc2giLCJmcm9tTnVtYmVyIiwidmFsdWUiLCJzaWduIiwiZnJvbSIsImlzU3RyaW5nIiwiTG9uZyIsImZyb21TdHJpbmciLCJwYXJzZUludCIsImxvdyIsImhpZ2giLCJwcm90b3R5cGUiLCJ1bnNpZ25lZCIsInRvTG9uZyIsIkJvb2xlYW4iLCJjaGFyQ29kZUF0IiwiU3RyaW5nIiwiZnJvbUhhc2giLCJoYXNoIiwiY2FsbCIsInRvSGFzaCIsImZyb21DaGFyQ29kZSIsIm1hc2siLCJwYXJ0MCIsInBhcnQxIiwicGFydDIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/util/minimal.js":
/*!*****************************************************!*\
  !*** ./node_modules/protobufjs/src/util/minimal.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(ssr)/./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(ssr)/./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(ssr)/./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(ssr)/./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(ssr)/./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(ssr)/./node_modules/protobufjs/src/util/longbits.js\");\n\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n */\nutil.isNode = Boolean(typeof global !== \"undefined\" && global && global.process && global.process.versions && global.process.versions.node);\n\n/**\r\n * Global object reference.\r\n * @memberof util\r\n * @type {Object}\r\n */\nutil.global = util.isNode && global ||  false && 0 || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n  return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\nutil.isString = function isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\nutil.isObject = function isObject(value) {\n  return value && typeof value === \"object\";\n};\n\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\nutil.isset =\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\nutil.isSet = function isSet(obj, prop) {\n  var value = obj[prop];\n  if (value != null && obj.hasOwnProperty(prop))\n    // eslint-disable-line eqeqeq, no-prototype-builtins\n    return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n  return false;\n};\n\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\n\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\nutil.Buffer = function () {\n  try {\n    var Buffer = util.inquire(\"buffer\").Buffer;\n    // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n    return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n  } catch (e) {\n    /* istanbul ignore next */\n    return null;\n  }\n}();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n  /* istanbul ignore next */\n  return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\n\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\nutil.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\nutil.longToHash = function longToHash(value) {\n  return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n  var bits = util.LongBits.fromHash(hash);\n  if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n  return bits.toNumber(Boolean(unsigned));\n};\n\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\nfunction merge(dst, src, ifNotSet) {\n  // used by converters\n  for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n  return dst;\n}\nutil.merge = merge;\n\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\nutil.lcFirst = function lcFirst(str) {\n  return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\nfunction newError(name) {\n  function CustomError(message, properties) {\n    if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n    // Error.call(this, message);\n    // ^ just returns a new error instance because the ctor can be called as a function\n\n    Object.defineProperty(this, \"message\", {\n      get: function () {\n        return message;\n      }\n    });\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace)\n      // node\n      Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n      value: new Error().stack || \"\"\n    });\n    if (properties) merge(this, properties);\n  }\n  CustomError.prototype = Object.create(Error.prototype, {\n    constructor: {\n      value: CustomError,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    name: {\n      get: function get() {\n        return name;\n      },\n      set: undefined,\n      enumerable: false,\n      // configurable: false would accurately preserve the behavior of\n      // the original, but I'm guessing that was not intentional.\n      // For an actual error subclass, this property would\n      // be configurable.\n      configurable: true\n    },\n    toString: {\n      value: function value() {\n        return this.name + \": \" + this.message;\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  });\n  return CustomError;\n}\nutil.newError = newError;\n\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\n\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\n\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n  var fieldMap = {};\n  for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n  /**\r\n   * @returns {string|undefined} Set field name, if any\r\n   * @this Object\r\n   * @ignore\r\n   */\n  return function () {\n    // eslint-disable-line consistent-return\n    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n  };\n};\n\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n  /**\r\n   * @param {string} name Field name\r\n   * @returns {undefined}\r\n   * @this Object\r\n   * @ignore\r\n   */\n  return function (name) {\n    for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n  };\n};\n\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\nutil.toJSONOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function () {\n  var Buffer = util.Buffer;\n  /* istanbul ignore if */\n  if (!Buffer) {\n    util._Buffer_from = util._Buffer_allocUnsafe = null;\n    return;\n  }\n  // because node 4.x buffers are incompatible & immutable\n  // see: https://github.com/dcodeIO/protobuf.js/pull/665\n  util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n  function Buffer_from(value, encoding) {\n    return new Buffer(value, encoding);\n  };\n  util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n  function Buffer_allocUnsafe(size) {\n    return new Buffer(size);\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/verifier.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/verifier.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = verifier;\nvar Enum = __webpack_require__(/*! ./enum */ \"(ssr)/./node_modules/protobufjs/src/enum.js\"),\n  util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/protobufjs/src/util.js\");\nfunction invalid(field, expected) {\n  return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n      for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n      gen(\"break\")(\"}\");\n    } else {\n      gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n    }\n  } else {\n    switch (field.type) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n        break;\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n        break;\n      case \"float\":\n      case \"double\":\n        gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n        break;\n      case \"bool\":\n        gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n        break;\n      case \"string\":\n        gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n        break;\n      case \"bytes\":\n        gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\nfunction genVerifyKey(gen, field, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  switch (field.keyType) {\n    case \"int32\":\n    case \"uint32\":\n    case \"sint32\":\n    case \"fixed32\":\n    case \"sfixed32\":\n      gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n      break;\n    case \"int64\":\n    case \"uint64\":\n    case \"sint64\":\n    case \"fixed64\":\n    case \"sfixed64\":\n      gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n      (\"return%j\", invalid(field, \"integer|Long key\"));\n      break;\n    case \"bool\":\n      gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n      break;\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\nfunction verifier(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n\n  var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n  var oneofs = mtype.oneofsArray,\n    seenFirstField = {};\n  if (oneofs.length) gen(\"var p={}\");\n  for (var i = 0; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      ref = \"m\" + util.safeProp(field.name);\n    if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n    // map fields\n    if (field.map) {\n      gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n      genVerifyKey(gen, field, \"k[i]\");\n      genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n\n      // repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n      genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n\n      // required or present fields\n    } else {\n      if (field.partOf) {\n        var oneofProp = util.safeProp(field.partOf.name);\n        if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n        seenFirstField[field.partOf.name] = 1;\n        gen(\"p%s=1\", oneofProp);\n      }\n      genVerifyValue(gen, field, i, ref);\n    }\n    if (field.optional) gen(\"}\");\n  }\n  return gen(\"return null\");\n  /* eslint-enable no-unexpected-multiline */\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/verifier.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/wrappers.js":
/*!*************************************************!*\
  !*** ./node_modules/protobufjs/src/wrappers.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\nvar wrappers = exports;\nvar Message = __webpack_require__(/*! ./message */ \"(ssr)/./node_modules/protobufjs/src/message.js\");\n\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\n\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\n\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function (object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      // Only use fully qualified type name after the last '/'\n      var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"];\n        // type_url prefix is optional, but path seperator is required\n        if (type_url.indexOf(\"/\") === -1) {\n          type_url = \"/\" + type_url;\n        }\n        return this.create({\n          type_url: type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n    return this.fromObject(object);\n  },\n  toObject: function (message, options) {\n    // Default prefix\n    var googleApi = \"type.googleapis.com/\";\n    var prefix = \"\";\n    var name = \"\";\n\n    // decode value if requested and unmapped\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n      // Separate the prefix used\n      prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) message = type.decode(message.value);\n    }\n\n    // wrap value if unmapped\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName;\n      // Default to type.googleapis.com prefix if no prefix is used\n      if (prefix === \"\") {\n        prefix = googleApi;\n      }\n      name = prefix + messageName;\n      object[\"@type\"] = name;\n      return object;\n    }\n    return this.toObject(message, options);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLFFBQVEsR0FBR0MsT0FBTztBQUV0QixJQUFJQyxPQUFPLEdBQUdDLG1CQUFPLENBQUMsaUVBQVcsQ0FBQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0FILFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHO0VBRS9CSSxVQUFVLEVBQUUsU0FBQUEsQ0FBU0MsTUFBTSxFQUFFO0lBRXpCO0lBQ0EsSUFBSUEsTUFBTSxJQUFJQSxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUU7TUFDMUI7TUFDRCxJQUFJQyxJQUFJLEdBQUdELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQ0UsU0FBUyxDQUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUNHLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDMUUsSUFBSUMsSUFBSSxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDSixJQUFJLENBQUM7TUFDNUI7TUFDQSxJQUFJRyxJQUFJLEVBQUU7UUFDTjtRQUNBLElBQUlFLFFBQVEsR0FBR04sTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUM1Q1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDUSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdSLE1BQU0sQ0FBQyxPQUFPLENBQUM7UUFDOUM7UUFDQSxJQUFJTSxRQUFRLENBQUNHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtVQUM5QkgsUUFBUSxHQUFHLEdBQUcsR0FBR0EsUUFBUTtRQUM3QjtRQUNBLE9BQU8sSUFBSSxDQUFDSSxNQUFNLENBQUM7VUFDZkosUUFBUSxFQUFFQSxRQUFRO1VBQ2xCSyxLQUFLLEVBQUVQLElBQUksQ0FBQ1EsTUFBTSxDQUFDUixJQUFJLENBQUNMLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQ2EsTUFBTSxDQUFDO1FBQ3ZELENBQUMsQ0FBQztNQUNOO0lBQ0o7SUFFQSxPQUFPLElBQUksQ0FBQ2QsVUFBVSxDQUFDQyxNQUFNLENBQUM7RUFDbEMsQ0FBQztFQUVEYyxRQUFRLEVBQUUsU0FBQUEsQ0FBU0MsT0FBTyxFQUFFQyxPQUFPLEVBQUU7SUFFakM7SUFDQSxJQUFJQyxTQUFTLEdBQUcsc0JBQXNCO0lBQ3RDLElBQUlDLE1BQU0sR0FBRyxFQUFFO0lBQ2YsSUFBSWpCLElBQUksR0FBRyxFQUFFOztJQUViO0lBQ0EsSUFBSWUsT0FBTyxJQUFJQSxPQUFPLENBQUNHLElBQUksSUFBSUosT0FBTyxDQUFDVCxRQUFRLElBQUlTLE9BQU8sQ0FBQ0osS0FBSyxFQUFFO01BQzlEO01BQ0FWLElBQUksR0FBR2MsT0FBTyxDQUFDVCxRQUFRLENBQUNKLFNBQVMsQ0FBQ2EsT0FBTyxDQUFDVCxRQUFRLENBQUNILFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDeEU7TUFDQWUsTUFBTSxHQUFHSCxPQUFPLENBQUNULFFBQVEsQ0FBQ0osU0FBUyxDQUFDLENBQUMsRUFBRWEsT0FBTyxDQUFDVCxRQUFRLENBQUNILFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7TUFDN0UsSUFBSUMsSUFBSSxHQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDSixJQUFJLENBQUM7TUFDNUI7TUFDQSxJQUFJRyxJQUFJLEVBQ0pXLE9BQU8sR0FBR1gsSUFBSSxDQUFDZ0IsTUFBTSxDQUFDTCxPQUFPLENBQUNKLEtBQUssQ0FBQztJQUM1Qzs7SUFFQTtJQUNBLElBQUksRUFBRUksT0FBTyxZQUFZLElBQUksQ0FBQ00sSUFBSSxDQUFDLElBQUlOLE9BQU8sWUFBWWxCLE9BQU8sRUFBRTtNQUMvRCxJQUFJRyxNQUFNLEdBQUdlLE9BQU8sQ0FBQ08sS0FBSyxDQUFDUixRQUFRLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxDQUFDO01BQ3JELElBQUlPLFdBQVcsR0FBR1IsT0FBTyxDQUFDTyxLQUFLLENBQUNFLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQy9DVCxPQUFPLENBQUNPLEtBQUssQ0FBQ0UsUUFBUSxDQUFDaEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHTyxPQUFPLENBQUNPLEtBQUssQ0FBQ0UsUUFBUTtNQUM1RDtNQUNBLElBQUlOLE1BQU0sS0FBSyxFQUFFLEVBQUU7UUFDZkEsTUFBTSxHQUFHRCxTQUFTO01BQ3RCO01BQ0FoQixJQUFJLEdBQUdpQixNQUFNLEdBQUdLLFdBQVc7TUFDM0J2QixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUdDLElBQUk7TUFDdEIsT0FBT0QsTUFBTTtJQUNqQjtJQUVBLE9BQU8sSUFBSSxDQUFDYyxRQUFRLENBQUNDLE9BQU8sRUFBRUMsT0FBTyxDQUFDO0VBQzFDO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtZmlyZWJhc2UvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JhcHBlcnMuanM/M2VmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8qKlxyXG4gKiBXcmFwcGVycyBmb3IgY29tbW9uIHR5cGVzLlxyXG4gKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsSVdyYXBwZXI+fVxyXG4gKiBAY29uc3RcclxuICovXHJcbnZhciB3cmFwcGVycyA9IGV4cG9ydHM7XHJcblxyXG52YXIgTWVzc2FnZSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VcIik7XHJcblxyXG4vKipcclxuICogRnJvbSBvYmplY3QgY29udmVydGVyIHBhcnQgb2YgYW4ge0BsaW5rIElXcmFwcGVyfS5cclxuICogQHR5cGVkZWYgV3JhcHBlckZyb21PYmplY3RDb252ZXJ0ZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBvYmplY3QgUGxhaW4gb2JqZWN0XHJcbiAqIEByZXR1cm5zIHtNZXNzYWdlPHt9Pn0gTWVzc2FnZSBpbnN0YW5jZVxyXG4gKiBAdGhpcyBUeXBlXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIFRvIG9iamVjdCBjb252ZXJ0ZXIgcGFydCBvZiBhbiB7QGxpbmsgSVdyYXBwZXJ9LlxyXG4gKiBAdHlwZWRlZiBXcmFwcGVyVG9PYmplY3RDb252ZXJ0ZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge01lc3NhZ2U8e30+fSBtZXNzYWdlIE1lc3NhZ2UgaW5zdGFuY2VcclxuICogQHBhcmFtIHtJQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcclxuICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcclxuICogQHRoaXMgVHlwZVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDb21tb24gdHlwZSB3cmFwcGVyIHBhcnQgb2Yge0BsaW5rIHdyYXBwZXJzfS5cclxuICogQGludGVyZmFjZSBJV3JhcHBlclxyXG4gKiBAcHJvcGVydHkge1dyYXBwZXJGcm9tT2JqZWN0Q29udmVydGVyfSBbZnJvbU9iamVjdF0gRnJvbSBvYmplY3QgY29udmVydGVyXHJcbiAqIEBwcm9wZXJ0eSB7V3JhcHBlclRvT2JqZWN0Q29udmVydGVyfSBbdG9PYmplY3RdIFRvIG9iamVjdCBjb252ZXJ0ZXJcclxuICovXHJcblxyXG4vLyBDdXN0b20gd3JhcHBlciBmb3IgQW55XHJcbndyYXBwZXJzW1wiLmdvb2dsZS5wcm90b2J1Zi5BbnlcIl0gPSB7XHJcblxyXG4gICAgZnJvbU9iamVjdDogZnVuY3Rpb24ob2JqZWN0KSB7XHJcblxyXG4gICAgICAgIC8vIHVud3JhcCB2YWx1ZSB0eXBlIGlmIG1hcHBlZFxyXG4gICAgICAgIGlmIChvYmplY3QgJiYgb2JqZWN0W1wiQHR5cGVcIl0pIHtcclxuICAgICAgICAgICAgIC8vIE9ubHkgdXNlIGZ1bGx5IHF1YWxpZmllZCB0eXBlIG5hbWUgYWZ0ZXIgdGhlIGxhc3QgJy8nXHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gb2JqZWN0W1wiQHR5cGVcIl0uc3Vic3RyaW5nKG9iamVjdFtcIkB0eXBlXCJdLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpO1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMubG9va3VwKG5hbWUpO1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHlwZV91cmwgZG9lcyBub3QgYWNjZXB0IGxlYWRpbmcgXCIuXCJcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlX3VybCA9IG9iamVjdFtcIkB0eXBlXCJdLmNoYXJBdCgwKSA9PT0gXCIuXCIgP1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdFtcIkB0eXBlXCJdLnNsaWNlKDEpIDogb2JqZWN0W1wiQHR5cGVcIl07XHJcbiAgICAgICAgICAgICAgICAvLyB0eXBlX3VybCBwcmVmaXggaXMgb3B0aW9uYWwsIGJ1dCBwYXRoIHNlcGVyYXRvciBpcyByZXF1aXJlZFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVfdXJsLmluZGV4T2YoXCIvXCIpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVfdXJsID0gXCIvXCIgKyB0eXBlX3VybDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZV91cmw6IHR5cGVfdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlLmVuY29kZSh0eXBlLmZyb21PYmplY3Qob2JqZWN0KSkuZmluaXNoKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5mcm9tT2JqZWN0KG9iamVjdCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihtZXNzYWdlLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIC8vIERlZmF1bHQgcHJlZml4XHJcbiAgICAgICAgdmFyIGdvb2dsZUFwaSA9IFwidHlwZS5nb29nbGVhcGlzLmNvbS9cIjtcclxuICAgICAgICB2YXIgcHJlZml4ID0gXCJcIjtcclxuICAgICAgICB2YXIgbmFtZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIGRlY29kZSB2YWx1ZSBpZiByZXF1ZXN0ZWQgYW5kIHVubWFwcGVkXHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5qc29uICYmIG1lc3NhZ2UudHlwZV91cmwgJiYgbWVzc2FnZS52YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyBPbmx5IHVzZSBmdWxseSBxdWFsaWZpZWQgdHlwZSBuYW1lIGFmdGVyIHRoZSBsYXN0ICcvJ1xyXG4gICAgICAgICAgICBuYW1lID0gbWVzc2FnZS50eXBlX3VybC5zdWJzdHJpbmcobWVzc2FnZS50eXBlX3VybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcclxuICAgICAgICAgICAgLy8gU2VwYXJhdGUgdGhlIHByZWZpeCB1c2VkXHJcbiAgICAgICAgICAgIHByZWZpeCA9IG1lc3NhZ2UudHlwZV91cmwuc3Vic3RyaW5nKDAsIG1lc3NhZ2UudHlwZV91cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMSk7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5sb29rdXAobmFtZSk7XHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgICAgIGlmICh0eXBlKVxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IHR5cGUuZGVjb2RlKG1lc3NhZ2UudmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gd3JhcCB2YWx1ZSBpZiB1bm1hcHBlZFxyXG4gICAgICAgIGlmICghKG1lc3NhZ2UgaW5zdGFuY2VvZiB0aGlzLmN0b3IpICYmIG1lc3NhZ2UgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBtZXNzYWdlLiR0eXBlLnRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZU5hbWUgPSBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lWzBdID09PSBcIi5cIiA/XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLiR0eXBlLmZ1bGxOYW1lLnNsaWNlKDEpIDogbWVzc2FnZS4kdHlwZS5mdWxsTmFtZTtcclxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byB0eXBlLmdvb2dsZWFwaXMuY29tIHByZWZpeCBpZiBubyBwcmVmaXggaXMgdXNlZFxyXG4gICAgICAgICAgICBpZiAocHJlZml4ID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBwcmVmaXggPSBnb29nbGVBcGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbmFtZSA9IHByZWZpeCArIG1lc3NhZ2VOYW1lO1xyXG4gICAgICAgICAgICBvYmplY3RbXCJAdHlwZVwiXSA9IG5hbWU7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy50b09iamVjdChtZXNzYWdlLCBvcHRpb25zKTtcclxuICAgIH1cclxufTtcclxuIl0sIm5hbWVzIjpbIndyYXBwZXJzIiwiZXhwb3J0cyIsIk1lc3NhZ2UiLCJyZXF1aXJlIiwiZnJvbU9iamVjdCIsIm9iamVjdCIsIm5hbWUiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsInR5cGUiLCJsb29rdXAiLCJ0eXBlX3VybCIsImNoYXJBdCIsInNsaWNlIiwiaW5kZXhPZiIsImNyZWF0ZSIsInZhbHVlIiwiZW5jb2RlIiwiZmluaXNoIiwidG9PYmplY3QiLCJtZXNzYWdlIiwib3B0aW9ucyIsImdvb2dsZUFwaSIsInByZWZpeCIsImpzb24iLCJkZWNvZGUiLCJjdG9yIiwiJHR5cGUiLCJtZXNzYWdlTmFtZSIsImZ1bGxOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/wrappers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer.js":
/*!***********************************************!*\
  !*** ./node_modules/protobufjs/src/writer.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = Writer;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\nvar BufferWriter; // cyclic\n\nvar LongBits = util.LongBits,\n  base64 = util.base64,\n  utf8 = util.utf8;\n\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\nfunction Op(fn, len, val) {\n  /**\r\n   * Function to call.\r\n   * @type {function(Uint8Array, number, *)}\r\n   */\n  this.fn = fn;\n\n  /**\r\n   * Value byte length.\r\n   * @type {number}\r\n   */\n  this.len = len;\n\n  /**\r\n   * Next operation.\r\n   * @type {Writer.Op|undefined}\r\n   */\n  this.next = undefined;\n\n  /**\r\n   * Value to write.\r\n   * @type {*}\r\n   */\n  this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\nfunction State(writer) {\n  /**\r\n   * Current head.\r\n   * @type {Writer.Op}\r\n   */\n  this.head = writer.head;\n\n  /**\r\n   * Current tail.\r\n   * @type {Writer.Op}\r\n   */\n  this.tail = writer.tail;\n\n  /**\r\n   * Current buffer length.\r\n   * @type {number}\r\n   */\n  this.len = writer.len;\n\n  /**\r\n   * Next state.\r\n   * @type {State|null}\r\n   */\n  this.next = writer.states;\n}\n\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\nfunction Writer() {\n  /**\r\n   * Current length.\r\n   * @type {number}\r\n   */\n  this.len = 0;\n\n  /**\r\n   * Operations head.\r\n   * @type {Object}\r\n   */\n  this.head = new Op(noop, 0, 0);\n\n  /**\r\n   * Operations tail\r\n   * @type {Object}\r\n   */\n  this.tail = this.head;\n\n  /**\r\n   * Linked forked states.\r\n   * @type {Object|null}\r\n   */\n  this.states = null;\n\n  // When a value is written, the writer calculates its byte length and puts it into a linked\n  // list of operations to perform when finish() is called. This both allows us to allocate\n  // buffers of the exact required size and reduces the amount of work we have to do compared\n  // to first calculating over objects and then encoding over objects. In our case, the encoding\n  // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup() {\n    return (Writer.create = function create_buffer() {\n      return new BufferWriter();\n    })();\n  }\n  /* istanbul ignore next */ : function create_array() {\n    return new Writer();\n  };\n};\n\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\nWriter.create = create();\n\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\nWriter.alloc = function alloc(size) {\n  return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\nWriter.prototype._push = function push(fn, len, val) {\n  this.tail = this.tail.next = new Op(fn, len, val);\n  this.len += len;\n  return this;\n};\nfunction writeByte(val, buf, pos) {\n  buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128;\n    val >>>= 7;\n  }\n  buf[pos] = val;\n}\n\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\nfunction VarintOp(len, val) {\n  this.len = len;\n  this.next = undefined;\n  this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n  // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n  // uint32 is by far the most frequently used operation and benefits significantly from this.\n  this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n  return this;\n};\n\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.int32 = function write_int32(value) {\n  return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n  : this.uint32(value);\n};\n\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n  return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n  while (val.hi) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n    val.hi >>>= 7;\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = val.lo >>> 7;\n  }\n  buf[pos++] = val.lo;\n}\n\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n  var bits = LongBits.from(value).zzEncode();\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.bool = function write_bool(value) {\n  return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\n\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n  return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.float = function write_float(value) {\n  return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.double = function write_double(value) {\n  return this._push(util.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n  buf.set(val, pos); // also works for plain array values\n}\n/* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n  for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n};\n\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.bytes = function write_bytes(value) {\n  var len = value.length >>> 0;\n  if (!len) return this._push(writeByte, 1, 0);\n  if (util.isString(value)) {\n    var buf = Writer.alloc(len = base64.length(value));\n    base64.decode(value, buf, 0);\n    value = buf;\n  }\n  return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.string = function write_string(value) {\n  var len = utf8.length(value);\n  return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.fork = function fork() {\n  this.states = new State(this);\n  this.head = this.tail = new Op(noop, 0, 0);\n  this.len = 0;\n  return this;\n};\n\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.reset = function reset() {\n  if (this.states) {\n    this.head = this.states.head;\n    this.tail = this.states.tail;\n    this.len = this.states.len;\n    this.states = this.states.next;\n  } else {\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n  }\n  return this;\n};\n\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\nWriter.prototype.ldelim = function ldelim() {\n  var head = this.head,\n    tail = this.tail,\n    len = this.len;\n  this.reset().uint32(len);\n  if (len) {\n    this.tail.next = head.next; // skip noop\n    this.tail = tail;\n    this.len += len;\n  }\n  return this;\n};\n\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\nWriter.prototype.finish = function finish() {\n  var head = this.head.next,\n    // skip noop\n    buf = this.constructor.alloc(this.len),\n    pos = 0;\n  while (head) {\n    head.fn(head.val, buf, pos);\n    pos += head.len;\n    head = head.next;\n  }\n  // this.head = this.tail = null;\n  return buf;\n};\nWriter._configure = function (BufferWriter_) {\n  BufferWriter = BufferWriter_;\n  Writer.create = create();\n  BufferWriter._configure();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/src/writer_buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/protobufjs/src/writer_buffer.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = __webpack_require__(/*! ./util/minimal */ \"(ssr)/./node_modules/protobufjs/src/util/minimal.js\");\n\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\nfunction BufferWriter() {\n  Writer.call(this);\n}\nBufferWriter._configure = function () {\n  /**\r\n   * Allocates a buffer of the specified size.\r\n   * @function\r\n   * @param {number} size Buffer size\r\n   * @returns {Buffer} Buffer\r\n   */\n  BufferWriter.alloc = util._Buffer_allocUnsafe;\n  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy)\n      // Buffer values\n      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n    // plain array values\n    buf[pos++] = val[i++];\n  };\n};\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n}\n\n/**\r\n * @override\r\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = util.Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\n\nBufferWriter._configure();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcHJvdG9idWZqcy9zcmMvd3JpdGVyX2J1ZmZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFlBQVk7O0FBRTdCO0FBQ0EsSUFBSUMsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLCtEQUFVLENBQUM7QUFDaEMsQ0FBQ0YsWUFBWSxDQUFDRyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSixNQUFNLENBQUNFLFNBQVMsQ0FBQyxFQUFFRyxXQUFXLEdBQUdOLFlBQVk7QUFFckYsSUFBSU8sSUFBSSxHQUFHTCxtQkFBTyxDQUFDLDJFQUFnQixDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRixZQUFZQSxDQUFBLEVBQUc7RUFDcEJDLE1BQU0sQ0FBQ08sSUFBSSxDQUFDLElBQUksQ0FBQztBQUNyQjtBQUVBUixZQUFZLENBQUNTLFVBQVUsR0FBRyxZQUFZO0VBQ2xDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJVCxZQUFZLENBQUNVLEtBQUssR0FBR0gsSUFBSSxDQUFDSSxtQkFBbUI7RUFFN0NYLFlBQVksQ0FBQ1ksZ0JBQWdCLEdBQUdMLElBQUksQ0FBQ00sTUFBTSxJQUFJTixJQUFJLENBQUNNLE1BQU0sQ0FBQ1YsU0FBUyxZQUFZVyxVQUFVLElBQUlQLElBQUksQ0FBQ00sTUFBTSxDQUFDVixTQUFTLENBQUNZLEdBQUcsQ0FBQ0MsSUFBSSxLQUFLLEtBQUssR0FDaEksU0FBU0Msb0JBQW9CQSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0lBQzdDRCxHQUFHLENBQUNKLEdBQUcsQ0FBQ0csR0FBRyxFQUFFRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25CO0VBQ0Y7RUFDQSw2QkFDRSxTQUFTQyxxQkFBcUJBLENBQUNILEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7SUFDOUMsSUFBSUYsR0FBRyxDQUFDSSxJQUFJO01BQUU7TUFDWkosR0FBRyxDQUFDSSxJQUFJLENBQUNILEdBQUcsRUFBRUMsR0FBRyxFQUFFLENBQUMsRUFBRUYsR0FBRyxDQUFDSyxNQUFNLENBQUMsQ0FBQyxLQUMvQixLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR04sR0FBRyxDQUFDSyxNQUFNO0lBQUc7SUFDcENKLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFLENBQUMsR0FBR0YsR0FBRyxDQUFDTSxDQUFDLEVBQUUsQ0FBQztFQUN6QixDQUFDO0FBQ1QsQ0FBQzs7QUFHRDtBQUNBO0FBQ0E7QUFDQXhCLFlBQVksQ0FBQ0csU0FBUyxDQUFDc0IsS0FBSyxHQUFHLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsS0FBSyxFQUFFO0VBQzlELElBQUlwQixJQUFJLENBQUNxQixRQUFRLENBQUNELEtBQUssQ0FBQyxFQUNwQkEsS0FBSyxHQUFHcEIsSUFBSSxDQUFDc0IsWUFBWSxDQUFDRixLQUFLLEVBQUUsUUFBUSxDQUFDO0VBQzlDLElBQUlHLEdBQUcsR0FBR0gsS0FBSyxDQUFDSixNQUFNLEtBQUssQ0FBQztFQUM1QixJQUFJLENBQUNRLE1BQU0sQ0FBQ0QsR0FBRyxDQUFDO0VBQ2hCLElBQUlBLEdBQUcsRUFDSCxJQUFJLENBQUNFLEtBQUssQ0FBQ2hDLFlBQVksQ0FBQ1ksZ0JBQWdCLEVBQUVrQixHQUFHLEVBQUVILEtBQUssQ0FBQztFQUN6RCxPQUFPLElBQUk7QUFDZixDQUFDO0FBRUQsU0FBU00saUJBQWlCQSxDQUFDZixHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFO0VBQ3RDLElBQUlGLEdBQUcsQ0FBQ0ssTUFBTSxHQUFHLEVBQUU7SUFBRTtJQUNqQmhCLElBQUksQ0FBQzJCLElBQUksQ0FBQ0MsS0FBSyxDQUFDakIsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxDQUFDLEtBQzlCLElBQUlELEdBQUcsQ0FBQ2lCLFNBQVMsRUFDbEJqQixHQUFHLENBQUNpQixTQUFTLENBQUNsQixHQUFHLEVBQUVFLEdBQUcsQ0FBQyxDQUFDLEtBRXhCRCxHQUFHLENBQUNnQixLQUFLLENBQUNqQixHQUFHLEVBQUVFLEdBQUcsQ0FBQztBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQXBCLFlBQVksQ0FBQ0csU0FBUyxDQUFDa0MsTUFBTSxHQUFHLFNBQVNDLG1CQUFtQkEsQ0FBQ1gsS0FBSyxFQUFFO0VBQ2hFLElBQUlHLEdBQUcsR0FBR3ZCLElBQUksQ0FBQ00sTUFBTSxDQUFDMEIsVUFBVSxDQUFDWixLQUFLLENBQUM7RUFDdkMsSUFBSSxDQUFDSSxNQUFNLENBQUNELEdBQUcsQ0FBQztFQUNoQixJQUFJQSxHQUFHLEVBQ0gsSUFBSSxDQUFDRSxLQUFLLENBQUNDLGlCQUFpQixFQUFFSCxHQUFHLEVBQUVILEtBQUssQ0FBQztFQUM3QyxPQUFPLElBQUk7QUFDZixDQUFDOztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTNCLFlBQVksQ0FBQ1MsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWZpcmViYXNlLy4vbm9kZV9tb2R1bGVzL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanM/MjBkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJXcml0ZXI7XHJcblxyXG4vLyBleHRlbmRzIFdyaXRlclxyXG52YXIgV3JpdGVyID0gcmVxdWlyZShcIi4vd3JpdGVyXCIpO1xyXG4oQnVmZmVyV3JpdGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoV3JpdGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyV3JpdGVyO1xyXG5cclxudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XHJcblxyXG4vKipcclxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxyXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHdyaXRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXHJcbiAqIEBleHRlbmRzIFdyaXRlclxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcbmZ1bmN0aW9uIEJ1ZmZlcldyaXRlcigpIHtcclxuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xyXG59XHJcblxyXG5CdWZmZXJXcml0ZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8qKlxyXG4gICAgICogQWxsb2NhdGVzIGEgYnVmZmVyIG9mIHRoZSBzcGVjaWZpZWQgc2l6ZS5cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemUgQnVmZmVyIHNpemVcclxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IEJ1ZmZlclxyXG4gICAgICovXHJcbiAgICBCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmU7XHJcblxyXG4gICAgQnVmZmVyV3JpdGVyLndyaXRlQnl0ZXNCdWZmZXIgPSB1dGlsLkJ1ZmZlciAmJiB1dGlsLkJ1ZmZlci5wcm90b3R5cGUgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIHV0aWwuQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxyXG4gICAgICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgYnVmLnNldCh2YWwsIHBvcyk7IC8vIGZhc3RlciB0aGFuIGNvcHkgKHJlcXVpcmVzIG5vZGUgPj0gNCB3aGVyZSBCdWZmZXJzIGV4dGVuZCBVaW50OEFycmF5IGFuZCBzZXQgaXMgcHJvcGVybHkgaW5oZXJpdGVkKVxyXG4gICAgICAgICAgLy8gYWxzbyB3b3JrcyBmb3IgcGxhaW4gYXJyYXkgdmFsdWVzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgOiBmdW5jdGlvbiB3cml0ZUJ5dGVzQnVmZmVyX2NvcHkodmFsLCBidWYsIHBvcykge1xyXG4gICAgICAgICAgaWYgKHZhbC5jb3B5KSAvLyBCdWZmZXIgdmFsdWVzXHJcbiAgICAgICAgICAgIHZhbC5jb3B5KGJ1ZiwgcG9zLCAwLCB2YWwubGVuZ3RoKTtcclxuICAgICAgICAgIGVsc2UgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOykgLy8gcGxhaW4gYXJyYXkgdmFsdWVzXHJcbiAgICAgICAgICAgIGJ1Zltwb3MrK10gPSB2YWxbaSsrXTtcclxuICAgICAgICB9O1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAb3ZlcnJpZGVcclxuICovXHJcbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcclxuICAgIGlmICh1dGlsLmlzU3RyaW5nKHZhbHVlKSlcclxuICAgICAgICB2YWx1ZSA9IHV0aWwuX0J1ZmZlcl9mcm9tKHZhbHVlLCBcImJhc2U2NFwiKTtcclxuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XHJcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xyXG4gICAgaWYgKGxlbilcclxuICAgICAgICB0aGlzLl9wdXNoKEJ1ZmZlcldyaXRlci53cml0ZUJ5dGVzQnVmZmVyLCBsZW4sIHZhbHVlKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gd3JpdGVTdHJpbmdCdWZmZXIodmFsLCBidWYsIHBvcykge1xyXG4gICAgaWYgKHZhbC5sZW5ndGggPCA0MCkgLy8gcGxhaW4ganMgaXMgZmFzdGVyIGZvciBzaG9ydCBzdHJpbmdzIChwcm9iYWJseSBkdWUgdG8gcmVkdW5kYW50IGFzc2VydGlvbnMpXHJcbiAgICAgICAgdXRpbC51dGY4LndyaXRlKHZhbCwgYnVmLCBwb3MpO1xyXG4gICAgZWxzZSBpZiAoYnVmLnV0ZjhXcml0ZSlcclxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcclxuICAgIGVsc2VcclxuICAgICAgICBidWYud3JpdGUodmFsLCBwb3MpO1xyXG59XHJcblxyXG4vKipcclxuICogQG92ZXJyaWRlXHJcbiAqL1xyXG5CdWZmZXJXcml0ZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uIHdyaXRlX3N0cmluZ19idWZmZXIodmFsdWUpIHtcclxuICAgIHZhciBsZW4gPSB1dGlsLkJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcclxuICAgIHRoaXMudWludDMyKGxlbik7XHJcbiAgICBpZiAobGVuKVxyXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXHJcbiAqIEBuYW1lIEJ1ZmZlcldyaXRlciNmaW5pc2hcclxuICogQGZ1bmN0aW9uXHJcbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxyXG4gKi9cclxuXHJcbkJ1ZmZlcldyaXRlci5fY29uZmlndXJlKCk7XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiQnVmZmVyV3JpdGVyIiwiV3JpdGVyIiwicmVxdWlyZSIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidXRpbCIsImNhbGwiLCJfY29uZmlndXJlIiwiYWxsb2MiLCJfQnVmZmVyX2FsbG9jVW5zYWZlIiwid3JpdGVCeXRlc0J1ZmZlciIsIkJ1ZmZlciIsIlVpbnQ4QXJyYXkiLCJzZXQiLCJuYW1lIiwid3JpdGVCeXRlc0J1ZmZlcl9zZXQiLCJ2YWwiLCJidWYiLCJwb3MiLCJ3cml0ZUJ5dGVzQnVmZmVyX2NvcHkiLCJjb3B5IiwibGVuZ3RoIiwiaSIsImJ5dGVzIiwid3JpdGVfYnl0ZXNfYnVmZmVyIiwidmFsdWUiLCJpc1N0cmluZyIsIl9CdWZmZXJfZnJvbSIsImxlbiIsInVpbnQzMiIsIl9wdXNoIiwid3JpdGVTdHJpbmdCdWZmZXIiLCJ1dGY4Iiwid3JpdGUiLCJ1dGY4V3JpdGUiLCJzdHJpbmciLCJ3cml0ZV9zdHJpbmdfYnVmZmVyIiwiYnl0ZUxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/api.json":
/*!**********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/api.json ***!
  \**********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Api":{"fields":{"name":{"type":"string","id":1},"methods":{"rule":"repeated","type":"Method","id":2},"options":{"rule":"repeated","type":"Option","id":3},"version":{"type":"string","id":4},"sourceContext":{"type":"SourceContext","id":5},"mixins":{"rule":"repeated","type":"Mixin","id":6},"syntax":{"type":"Syntax","id":7}}},"Method":{"fields":{"name":{"type":"string","id":1},"requestTypeUrl":{"type":"string","id":2},"requestStreaming":{"type":"bool","id":3},"responseTypeUrl":{"type":"string","id":4},"responseStreaming":{"type":"bool","id":5},"options":{"rule":"repeated","type":"Option","id":6},"syntax":{"type":"Syntax","id":7}}},"Mixin":{"fields":{"name":{"type":"string","id":1},"root":{"type":"string","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/descriptor.json":
/*!*****************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/descriptor.json ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"FileDescriptorSet":{"fields":{"file":{"rule":"repeated","type":"FileDescriptorProto","id":1}}},"FileDescriptorProto":{"fields":{"name":{"type":"string","id":1},"package":{"type":"string","id":2},"dependency":{"rule":"repeated","type":"string","id":3},"publicDependency":{"rule":"repeated","type":"int32","id":10,"options":{"packed":false}},"weakDependency":{"rule":"repeated","type":"int32","id":11,"options":{"packed":false}},"messageType":{"rule":"repeated","type":"DescriptorProto","id":4},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":5},"service":{"rule":"repeated","type":"ServiceDescriptorProto","id":6},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":7},"options":{"type":"FileOptions","id":8},"sourceCodeInfo":{"type":"SourceCodeInfo","id":9},"syntax":{"type":"string","id":12}}},"DescriptorProto":{"fields":{"name":{"type":"string","id":1},"field":{"rule":"repeated","type":"FieldDescriptorProto","id":2},"extension":{"rule":"repeated","type":"FieldDescriptorProto","id":6},"nestedType":{"rule":"repeated","type":"DescriptorProto","id":3},"enumType":{"rule":"repeated","type":"EnumDescriptorProto","id":4},"extensionRange":{"rule":"repeated","type":"ExtensionRange","id":5},"oneofDecl":{"rule":"repeated","type":"OneofDescriptorProto","id":8},"options":{"type":"MessageOptions","id":7},"reservedRange":{"rule":"repeated","type":"ReservedRange","id":9},"reservedName":{"rule":"repeated","type":"string","id":10}},"nested":{"ExtensionRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}},"ReservedRange":{"fields":{"start":{"type":"int32","id":1},"end":{"type":"int32","id":2}}}}},"FieldDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":3},"label":{"type":"Label","id":4},"type":{"type":"Type","id":5},"typeName":{"type":"string","id":6},"extendee":{"type":"string","id":2},"defaultValue":{"type":"string","id":7},"oneofIndex":{"type":"int32","id":9},"jsonName":{"type":"string","id":10},"options":{"type":"FieldOptions","id":8}},"nested":{"Type":{"values":{"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Label":{"values":{"LABEL_OPTIONAL":1,"LABEL_REQUIRED":2,"LABEL_REPEATED":3}}}},"OneofDescriptorProto":{"fields":{"name":{"type":"string","id":1},"options":{"type":"OneofOptions","id":2}}},"EnumDescriptorProto":{"fields":{"name":{"type":"string","id":1},"value":{"rule":"repeated","type":"EnumValueDescriptorProto","id":2},"options":{"type":"EnumOptions","id":3}}},"EnumValueDescriptorProto":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"type":"EnumValueOptions","id":3}}},"ServiceDescriptorProto":{"fields":{"name":{"type":"string","id":1},"method":{"rule":"repeated","type":"MethodDescriptorProto","id":2},"options":{"type":"ServiceOptions","id":3}}},"MethodDescriptorProto":{"fields":{"name":{"type":"string","id":1},"inputType":{"type":"string","id":2},"outputType":{"type":"string","id":3},"options":{"type":"MethodOptions","id":4},"clientStreaming":{"type":"bool","id":5},"serverStreaming":{"type":"bool","id":6}}},"FileOptions":{"fields":{"javaPackage":{"type":"string","id":1},"javaOuterClassname":{"type":"string","id":8},"javaMultipleFiles":{"type":"bool","id":10},"javaGenerateEqualsAndHash":{"type":"bool","id":20,"options":{"deprecated":true}},"javaStringCheckUtf8":{"type":"bool","id":27},"optimizeFor":{"type":"OptimizeMode","id":9,"options":{"default":"SPEED"}},"goPackage":{"type":"string","id":11},"ccGenericServices":{"type":"bool","id":16},"javaGenericServices":{"type":"bool","id":17},"pyGenericServices":{"type":"bool","id":18},"deprecated":{"type":"bool","id":23},"ccEnableArenas":{"type":"bool","id":31},"objcClassPrefix":{"type":"string","id":36},"csharpNamespace":{"type":"string","id":37},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[38,38]],"nested":{"OptimizeMode":{"values":{"SPEED":1,"CODE_SIZE":2,"LITE_RUNTIME":3}}}},"MessageOptions":{"fields":{"messageSetWireFormat":{"type":"bool","id":1},"noStandardDescriptorAccessor":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"mapEntry":{"type":"bool","id":7},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[8,8]]},"FieldOptions":{"fields":{"ctype":{"type":"CType","id":1,"options":{"default":"STRING"}},"packed":{"type":"bool","id":2},"jstype":{"type":"JSType","id":6,"options":{"default":"JS_NORMAL"}},"lazy":{"type":"bool","id":5},"deprecated":{"type":"bool","id":3},"weak":{"type":"bool","id":10},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]],"reserved":[[4,4]],"nested":{"CType":{"values":{"STRING":0,"CORD":1,"STRING_PIECE":2}},"JSType":{"values":{"JS_NORMAL":0,"JS_STRING":1,"JS_NUMBER":2}}}},"OneofOptions":{"fields":{"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumOptions":{"fields":{"allowAlias":{"type":"bool","id":2},"deprecated":{"type":"bool","id":3},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"EnumValueOptions":{"fields":{"deprecated":{"type":"bool","id":1},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"ServiceOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"MethodOptions":{"fields":{"deprecated":{"type":"bool","id":33},"uninterpretedOption":{"rule":"repeated","type":"UninterpretedOption","id":999}},"extensions":[[1000,536870911]]},"UninterpretedOption":{"fields":{"name":{"rule":"repeated","type":"NamePart","id":2},"identifierValue":{"type":"string","id":3},"positiveIntValue":{"type":"uint64","id":4},"negativeIntValue":{"type":"int64","id":5},"doubleValue":{"type":"double","id":6},"stringValue":{"type":"bytes","id":7},"aggregateValue":{"type":"string","id":8}},"nested":{"NamePart":{"fields":{"namePart":{"rule":"required","type":"string","id":1},"isExtension":{"rule":"required","type":"bool","id":2}}}}},"SourceCodeInfo":{"fields":{"location":{"rule":"repeated","type":"Location","id":1}},"nested":{"Location":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"span":{"rule":"repeated","type":"int32","id":2},"leadingComments":{"type":"string","id":3},"trailingComments":{"type":"string","id":4},"leadingDetachedComments":{"rule":"repeated","type":"string","id":6}}}}},"GeneratedCodeInfo":{"fields":{"annotation":{"rule":"repeated","type":"Annotation","id":1}},"nested":{"Annotation":{"fields":{"path":{"rule":"repeated","type":"int32","id":1},"sourceFile":{"type":"string","id":2},"begin":{"type":"int32","id":3},"end":{"type":"int32","id":4}}}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/source_context.json":
/*!*********************************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/source_context.json ***!
  \*********************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ }),

/***/ "(ssr)/./node_modules/protobufjs/google/protobuf/type.json":
/*!***********************************************************!*\
  !*** ./node_modules/protobufjs/google/protobuf/type.json ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"nested":{"google":{"nested":{"protobuf":{"nested":{"Type":{"fields":{"name":{"type":"string","id":1},"fields":{"rule":"repeated","type":"Field","id":2},"oneofs":{"rule":"repeated","type":"string","id":3},"options":{"rule":"repeated","type":"Option","id":4},"sourceContext":{"type":"SourceContext","id":5},"syntax":{"type":"Syntax","id":6}}},"Field":{"fields":{"kind":{"type":"Kind","id":1},"cardinality":{"type":"Cardinality","id":2},"number":{"type":"int32","id":3},"name":{"type":"string","id":4},"typeUrl":{"type":"string","id":6},"oneofIndex":{"type":"int32","id":7},"packed":{"type":"bool","id":8},"options":{"rule":"repeated","type":"Option","id":9},"jsonName":{"type":"string","id":10},"defaultValue":{"type":"string","id":11}},"nested":{"Kind":{"values":{"TYPE_UNKNOWN":0,"TYPE_DOUBLE":1,"TYPE_FLOAT":2,"TYPE_INT64":3,"TYPE_UINT64":4,"TYPE_INT32":5,"TYPE_FIXED64":6,"TYPE_FIXED32":7,"TYPE_BOOL":8,"TYPE_STRING":9,"TYPE_GROUP":10,"TYPE_MESSAGE":11,"TYPE_BYTES":12,"TYPE_UINT32":13,"TYPE_ENUM":14,"TYPE_SFIXED32":15,"TYPE_SFIXED64":16,"TYPE_SINT32":17,"TYPE_SINT64":18}},"Cardinality":{"values":{"CARDINALITY_UNKNOWN":0,"CARDINALITY_OPTIONAL":1,"CARDINALITY_REQUIRED":2,"CARDINALITY_REPEATED":3}}}},"Enum":{"fields":{"name":{"type":"string","id":1},"enumvalue":{"rule":"repeated","type":"EnumValue","id":2},"options":{"rule":"repeated","type":"Option","id":3},"sourceContext":{"type":"SourceContext","id":4},"syntax":{"type":"Syntax","id":5}}},"EnumValue":{"fields":{"name":{"type":"string","id":1},"number":{"type":"int32","id":2},"options":{"rule":"repeated","type":"Option","id":3}}},"Option":{"fields":{"name":{"type":"string","id":1},"value":{"type":"Any","id":2}}},"Syntax":{"values":{"SYNTAX_PROTO2":0,"SYNTAX_PROTO3":1}},"Any":{"fields":{"type_url":{"type":"string","id":1},"value":{"type":"bytes","id":2}}},"SourceContext":{"fields":{"fileName":{"type":"string","id":1}}}}}}}}}');

/***/ })

};
;